{
  "version": 3,
  "sources": ["../src/utils/camelize.js", "../src/utils/normalizeData.js", "../src/utils/shortcuts.js", "../src/core/base-element.js", "../src/utils/addSelectOption.js", "../src/utils/appendParamsToUrl.js", "../src/utils/convertArray.js", "../src/utils/elementOffset.js", "../src/utils/interpolate.js", "../src/utils/getTextWidth.js", "../src/utils/randstr.js", "../src/utils/debounce.js", "../src/data-grid.js", "../src/core/base-plugin.js", "../src/plugins/column-resizer.js", "../src/utils/getParentElement.js", "../src/plugins/context-menu.js", "../src/plugins/draggable-headers.js", "../src/plugins/touch-support.js", "../src/plugins/selectable-rows.js", "../src/plugins/fixed-height.js", "../src/plugins/autosize-column.js", "../src/plugins/responsive-grid.js", "../src/plugins/row-actions.js", "../src/plugins/editable-column.js", "../src/plugins/spinner-support.js", "../src/plugins/save-state.js", "../data-grid.js"],
  "sourcesContent": ["/**\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nexport default function camelize(str) {\r\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\r\n}\r\n", "/**\r\n * Parse data attribute and return properly typed data\r\n * @param {String} v\r\n * @returns {any}\r\n */\r\nexport default function normalizeData(v) {\r\n    // Bool\r\n    if (v === \"true\") {\r\n        return true;\r\n    }\r\n    if (v === \"false\") {\r\n        return false;\r\n    }\r\n    // Null or empty\r\n    if (v === \"\" || v === \"null\") {\r\n        return null;\r\n    }\r\n    // Numeric attributes\r\n    if (v === Number(v).toString()) {\r\n        return Number(v);\r\n    }\r\n    // Only attempt json parsing for array or objects\r\n    if (v && typeof v.substring === \"function\" && [\"[\", \"{\"].includes(v.substring(0, 1))) {\r\n        try {\r\n            // In case we have only single quoted values, like ['one', 'two', 'three']\r\n            let val = v;\r\n            if (val.indexOf('\"') === -1) {\r\n                val = val.replace(/'/g, '\"');\r\n            }\r\n            return JSON.parse(decodeURIComponent(val));\r\n        } catch {\r\n            console.error(`Failed to parse ${v}`);\r\n            return {};\r\n        }\r\n    }\r\n    return v;\r\n}\r\n", "/**\r\n * @typedef FlexibleHTMLProps\r\n * @property {boolean} [checked] (HTMLInputElement)\r\n * @property {string} [value] (HTMLInputElement)\r\n * @property {number} [rowHeight] (HTMLTableRowElement)\r\n *\r\n * A flexible type HTMLElement type that does not require using instanceof all over the place\r\n * Make sure that your selector is indeed valid\r\n * Only includes most commons props\r\n * @typedef {HTMLElement & FlexibleHTMLProps} FlexibleHTMLElement\r\n */\r\n\r\n/**\r\n * Keep this as reference for easy documentation\r\n * @typedef {HTMLElement&HTMLInputElement&HTMLTableRowElement} MixedHTMLElement\r\n */\r\n\r\n/**\r\n * @typedef FlexibleEventProps\r\n * @property {FlexibleHTMLElement} target\r\n * @property {FlexibleHTMLElement} currentTarget\r\n * @property {DataTransfer} [dataTransfer] (DragEvent)\r\n * @property {number} [clientX] (MouseEvent)\r\n * @property {number} [clientY] (MouseEvent)\r\n *\r\n * @typedef {Event & FlexibleEventProps} FlexibleEvent\r\n */\r\n\r\n/**\r\n * Keep this as reference for easy documentation\r\n * @typedef {Event&MouseEvent&InputEvent&DragEvent&FocusEvent&KeyboardEvent&PointerEvent} MixedEvent\r\n */\r\n\r\n/**\r\n * @callback FlexibleListener\r\n * @param {FlexibleEvent} event\r\n */\r\n\r\nclass FlexibleEventListenerObject {\r\n    /**\r\n     * @param {FlexibleEvent} e\r\n     */\r\n    handleEvent(e) {}\r\n}\r\n\r\nconst supportedPassiveTypes = [\r\n    \"scroll\",\r\n    \"wheel\",\r\n    \"touchstart\",\r\n    \"touchmove\",\r\n    \"touchenter\",\r\n    \"touchend\",\r\n    \"touchleave\",\r\n    \"mouseout\",\r\n    \"mouseleave\",\r\n    \"mouseup\",\r\n    \"mousedown\",\r\n    \"mousemove\",\r\n    \"mouseenter\",\r\n    \"mousewheel\",\r\n    \"mouseover\",\r\n];\r\n\r\n/**\r\n * Automatically set passive options based on type\r\n * @param {string} type\r\n * @returns {AddEventListenerOptions}\r\n */\r\nfunction passiveOpts(type) {\r\n    if (supportedPassiveTypes.includes(type)) {\r\n        return { passive: true };\r\n    }\r\n    return {};\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {any}\r\n */\r\nexport function getAttribute(el, name) {\r\n    return el.getAttribute(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {Boolean}\r\n */\r\nexport function hasAttribute(el, name) {\r\n    return el.hasAttribute(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @param {any} v\r\n * @param {Boolean} check Prevent setting if attribute is already there\r\n */\r\nexport function setAttribute(el, name, v = \"\", check = false) {\r\n    if (check && hasAttribute(el, name)) return;\r\n    el.setAttribute(name, `${v}`);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function removeAttribute(el, name) {\r\n    if (hasAttribute(el, name)) {\r\n        el.removeAttribute(name);\r\n    }\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function on(el, type, listener) {\r\n    el.addEventListener(type, listener, passiveOpts(type));\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function off(el, type, listener) {\r\n    el.removeEventListener(type, listener, passiveOpts(type));\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function one(el, type, listener) {\r\n    el.addEventListener(type, listener, {\r\n        once: true,\r\n    });\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {String} name\r\n * @param {any} data\r\n * @param {Boolean} bubbles\r\n */\r\nexport function dispatch(el, name, data = {}, bubbles = false) {\r\n    const opts = {};\r\n    if (bubbles) {\r\n        opts.bubbles = true;\r\n    }\r\n    if (data) {\r\n        opts.detail = data;\r\n    }\r\n    el.dispatchEvent(new CustomEvent(name, opts));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {Boolean}\r\n */\r\nexport function hasClass(el, name) {\r\n    return el.classList.contains(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function addClass(el, name) {\r\n    el.classList.add(...name.split(\" \"));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function removeClass(el, name) {\r\n    el.classList.remove(...name.split(\" \"));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function toggleClass(el, name) {\r\n    el.classList.toggle(name);\r\n}\r\n\r\n/**\r\n * @param {String|HTMLElement} selector\r\n * @param {HTMLElement|Document} base\r\n * @returns {FlexibleHTMLElement|null}\r\n */\r\nexport function $(selector, base = document) {\r\n    if (selector instanceof HTMLElement) {\r\n        return selector;\r\n    }\r\n    return base.querySelector(selector);\r\n}\r\n\r\n/**\r\n * @param {String} selector\r\n * @param {Element|Document} base\r\n * @returns {Array<FlexibleHTMLElement>}\r\n */\r\nexport function $$(selector, base = document) {\r\n    return Array.from(base.querySelectorAll(selector));\r\n}\r\n\r\n/**\r\n * Easily retrieve untyped element\r\n * For actual type, prefer use of el.querySelector\r\n * @param {HTMLElement} el\r\n * @param {String|HTMLElement} selector\r\n * @returns {FlexibleHTMLElement}\r\n */\r\nexport function find(el, selector) {\r\n    return $(selector, el);\r\n}\r\n\r\n/**\r\n * Easily retrieve untyped elements\r\n * For actual type, prefer use of el.querySelectorAll\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @returns {Array<FlexibleHTMLElement>}\r\n */\r\nexport function findAll(el, selector) {\r\n    return $$(selector, el);\r\n}\r\n\r\n/**\r\n * @param {*} el\r\n * @returns {FlexibleHTMLElement}\r\n */\r\nexport function el(el) {\r\n    return el;\r\n}\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} K\r\n * @param {K} tagName\r\n * @param {HTMLElement} parent\r\n * @returns {HTMLElementTagNameMap[K]}\r\n */\r\nexport function ce(tagName, parent = null) {\r\n    const el = document.createElement(tagName);\r\n    if (parent) {\r\n        parent.appendChild(el);\r\n    }\r\n    return el;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} newNode\r\n * @param {HTMLElement} existingNode\r\n */\r\nexport function insertAfter(newNode, existingNode) {\r\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\r\n}\r\n", "import camelize from \"../utils/camelize.js\";\r\nimport normalizeData from \"../utils/normalizeData.js\";\r\nimport { dispatch, getAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/** @typedef {import('../data-grid').Options} Options */\r\n\r\n/**\r\n * Base element that does not contain any specific logic\r\n * related to this project but makes HTMLElemnt usable\r\n */\r\nclass BaseElement extends HTMLElement {\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        /** @type {Options} */\r\n        this.options = Object.assign({}, this.defaultOptions, this.normalizedDataset, options);\n\r\n        this.log(\"constructor\");\r\n\r\n        this.setup = false;\r\n        this.fireEvents = true;\r\n        this._ready();\r\n\r\n        this.log(\"ready\");\r\n    }\r\n\r\n    get defaultOptions() {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     * @returns {any}\r\n     */\r\n    getOption(opt) {\r\n        return this.options[opt];\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     * @param {any} v\r\n     */\r\n    setOption(opt, v) {\r\n        setAttribute(this, `data-${opt}`, v);\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     */\r\n    toggleOption(opt) {\r\n        setAttribute(this, `data-${opt}`, !this.getOption(opt));\r\n    }\r\n\r\n    get normalizedDataset() {\r\n        const jsonConfig = this.dataset.config ? JSON.parse(this.dataset.config) : {};\r\n        const data = { ...this.dataset };\r\n        for (const key in data) {\r\n            if (key === \"config\" || !data.hasOwnProperty(key) || typeof data[key] === \"function\") {\r\n                continue;\r\n            }\r\n            data[key] = normalizeData(data[key]);\r\n        }\r\n        // Once normalized, merge into json config\r\n        Object.assign(data, jsonConfig);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @returns {String}\r\n     */\r\n    static template() {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * This is called at the end of constructor. Extend in subclass if needed.\r\n     */\r\n    _ready() {}\r\n\r\n    /**\r\n     * @param {any[]} data\r\n     */\r\n    log(...data) {\r\n        if (this.options.debug) {\r\n            console.log(`[${getAttribute(this, \"id\")}] `, ...data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events within the component\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\r\n     * @param {Event} event\r\n     */\r\n    handleEvent(event) {\r\n        if (this[`on${event.type}`]) {\r\n            this[`on${event.type}`](event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when connected. Extend in subclass if needed.\r\n     */\r\n    _connected() {}\r\n\r\n    connectedCallback() {\r\n        // already connected\r\n        if (this.setup) {\r\n            return;\r\n        }\r\n        this.setup = true;\r\n        // ensure whenDefined callbacks run first\r\n        setTimeout(async () => {\r\n            this.log(\"connectedCallback\");\r\n\r\n            // Append only when labels had the opportunity to be set\r\n            // Don't use shadow dom as it makes theming super hard\r\n            const template = document.createElement(\"template\");\r\n            // @ts-ignore\r\n            template.innerHTML = this.constructor.template();\r\n            this.appendChild(template.content.cloneNode(true));\r\n\n            await this._connected();\n\r\n            // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\r\n            dispatch(this, \"connected\");\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * This is called when disconnected. Extend in subclass if needed.\r\n     */\r\n    _disconnected() {}\r\n\r\n    /**\r\n     * @link https://nolanlawson.com/2024/12/01/avoiding-unnecessary-cleanup-work-in-disconnectedcallback/\r\n     */\r\n    disconnectedCallback() {\r\n        setTimeout(() => {\r\n            if (!this.isConnected && this.setup) {\r\n                this.log(\"disconnectedCallback\");\r\n                this._disconnected();\r\n                // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\r\n                dispatch(this, \"disconnected\");\r\n                this.setup = false;\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#a-props-like-accessor\r\n     * @returns {Object}\r\n     */\r\n    get transformAttributes() {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * This is only meant to work with data attributes\r\n     * This allows us to have properties that reflect automatically in the component\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dataset-attributes\r\n     * @param {String} attributeName\r\n     * @param {String} oldValue\r\n     * @param {String} newValue\r\n     */\r\n    attributeChangedCallback(attributeName, oldValue, newValue) {\r\n        // It didn't change\r\n        if (oldValue === newValue) {\r\n            return;\r\n        }\r\n\r\n        this.log(`attributeChangedCallback: ${attributeName}`);\r\n\r\n        let isOption = false;\r\n        const transformer = this.transformAttributes[attributeName] ?? normalizeData;\r\n\r\n        let attr = attributeName;\r\n        // Data attributes are mapped to options while other attributes are mapped as properties\r\n        if (attr.indexOf(\"data-\") === 0) {\r\n            attr = attr.slice(5);\r\n            isOption = true;\r\n        }\r\n        attr = camelize(attr);\r\n        if (isOption) {\r\n            this.options[attr] = transformer(newValue);\r\n        } else {\r\n            this[attr] = transformer(newValue);\r\n        }\r\n\r\n        // Fire internal event\r\n        if (this.fireEvents && this[`${attr}Changed`]) {\r\n            this[`${attr}Changed`]();\r\n        }\r\n    }\r\n}\r\n\r\nexport default BaseElement;\r\n", "/**\r\n * @param {HTMLSelectElement} el\r\n * @param {String} value\r\n * @param {String} label\r\n * @param {Boolean} checked\r\n */\r\nexport default function addSelectOption(el, value, label, checked = false) {\r\n    const opt = document.createElement(\"option\");\r\n    opt.value = `${value}`;\r\n    if (checked) {\r\n        opt.selected = true;\r\n    }\r\n    opt.label = label;\r\n    el.appendChild(opt);\r\n}\r\n", "/**\r\n * @param {URL} url\r\n * @param {Object} params\r\n */\r\nexport default function appendParamsToUrl(url, params = {}) {\r\n    for (const key of Object.keys(params)) {\r\n        if (Array.isArray(params[key])) {\r\n            for (const k of Object.keys(params[key])) {\r\n                // @ts-ignore\r\n                url.searchParams.append(isNaN(k) ? `${key}[${k}]` : key, params[key][k]);\r\n            }\r\n        } else {\r\n            url.searchParams.append(key, params[key]);\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Force value as arrays\r\n * @param {String|Array} v\r\n * @returns {Array}\r\n */\r\nexport default function convertArray(v) {\r\n    if (typeof v === \"string\") {\r\n        if (v[0] === \"[\") {\r\n            // \"['my', 'value']\" would fail as a json\r\n            let bv = v;\r\n            if (bv.indexOf('\"') === -1) {\r\n                bv = bv.replace(/'/g, '\"');\r\n            }\r\n            return JSON.parse(bv);\r\n        }\r\n\r\n        return v.split(\",\");\r\n    }\r\n    if (!Array.isArray(v)) {\r\n        console.error(\"Invalid array\", v);\r\n        return [];\r\n    }\r\n    return v;\r\n}\r\n", "/**\r\n * @param {HTMLElement} el\r\n * @returns {Object}\r\n */\r\nexport default function elementOffset(el) {\r\n    const rect = el.getBoundingClientRect();\r\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n}\r\n", "/**\r\n * Replace element within {} by their data value\r\n * @param {String} str\r\n * @param {Object} data\r\n * @returns {String}\r\n */\r\nexport default function interpolate(str, data) {\r\n    return str.replace(/\\{([^}]+)?\\}/g, ($1, $2) => data[$2]);\r\n}\r\n", "let canvas;\r\n\r\n/**\r\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\r\n * Getting computed styles only works for dom that are added in the dom\r\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\r\n * @param {String} text The text to be rendered.\r\n * @param {Element} el Target element (defaults to body)\r\n * @param {Boolean} withPadding Include padding on element\r\n * @returns {Number}\r\n */\r\nexport default function getTextWidth(text, el = document.body, withPadding = false) {\r\n    const styles = window.getComputedStyle(el || document.createElement(\"div\"));\r\n    const fontWeight = styles.getPropertyValue(\"font-weight\") || \"normal\";\r\n    const fontSize = styles.getPropertyValue(\"font-size\") || \"1rem\";\r\n    const fontFamily = styles.getPropertyValue(\"font-family\") || \"Arial\";\r\n\r\n    let padding = 0;\r\n    if (withPadding) {\r\n        const paddingLeft = styles.getPropertyValue(\"padding-left\") || \"0\";\r\n        const paddingRight = styles.getPropertyValue(\"padding-right\") || \"0\";\r\n        padding = Number.parseInt(paddingLeft) + Number.parseInt(paddingRight);\r\n    }\r\n\r\n    // re-use canvas object for better performance\r\n    if (!canvas) {\r\n        canvas = document.createElement(\"canvas\");\r\n    }\r\n    const context = canvas.getContext(\"2d\");\r\n    context.font = `${fontWeight} ${fontSize} ${fontFamily}`;\r\n    const metrics = context.measureText(text);\r\n    return Number.parseInt(metrics.width) + padding;\r\n}\r\n", "/**\r\n * @param {String} prefix\r\n * @returns {String}\r\n */\r\nexport default function randstr(prefix) {\r\n    return Math.random()\r\n        .toString(36)\r\n        .replace(\"0.\", prefix || \"\");\r\n}\r\n", "/**\r\n * Define a function that can be happily passed to addEventListener\r\n * @typedef {Function & EventListenerOrEventListenerObject} ExtendedFunction\r\n */\r\n\r\n/**\r\n * @param {Function} handler\r\n * @param {Number} timeout\r\n * @returns {ExtendedFunction}\r\n */\r\nexport default function debounce(handler, timeout = 300) {\r\n    let timer = null;\r\n    return (...args) => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null;\r\n            handler(...args);\r\n        }, timeout);\r\n    };\r\n}\r\n", "/**\r\n * Data Grid Web component\r\n *\r\n * Credits for inspiration\r\n * @link https://github.com/riverside/zino-grid\r\n */\r\n\r\nimport BaseElement from \"./core/base-element.js\";\r\nimport addSelectOption from \"./utils/addSelectOption.js\";\r\nimport appendParamsToUrl from \"./utils/appendParamsToUrl.js\";\r\nimport camelize from \"./utils/camelize.js\";\r\nimport convertArray from \"./utils/convertArray.js\";\r\nimport elementOffset from \"./utils/elementOffset.js\";\r\nimport interpolate from \"./utils/interpolate.js\";\r\nimport getTextWidth from \"./utils/getTextWidth.js\";\r\nimport randstr from \"./utils/randstr.js\";\r\nimport debounce from \"./utils/debounce.js\";\r\nimport {\r\n    $,\r\n    $$,\r\n    dispatch,\r\n    find,\r\n    findAll,\r\n    hasClass,\r\n    removeAttribute,\r\n    getAttribute,\r\n    setAttribute,\r\n    addClass,\r\n    toggleClass,\r\n    on,\r\n    ce,\r\n} from \"./utils/shortcuts.js\";\r\n\r\n/**\r\n * Column definition\r\n * @typedef Column\r\n * @property {String} field - the key in the data\r\n * @property {String} title - the title to display in the header (defaults to \"field\" if not set)\r\n * @property {Number} [width] - the width of the column (auto otherwise)\r\n * @property {String} [class] - class to set on the column (target body or header with th.class or td.class)\r\n * @property {String} [attr] - don't render the column and set a matching attribute on the row with the value of the field\r\n * @property {Boolean} [hidden] - hide the column\r\n * @property {Boolean} [noSort] - allow disabling sort for a given column\r\n * @property {String | Function} [format] - custom data formatting\r\n * @property {String} [defaultFormatValue] - default value to use for formatting\r\n * @property {String} [transform] - custom value transformation\r\n * @property {Boolean} [editable] - replace with input (EditableColumn module)\r\n * @property {String} [editableType] - type of input (EditableColumn module)\r\n * @property {Number} [responsive] - the higher the value, the sooner it will be hidden, disable with 0 (ResponsiveGrid module)\r\n * @property {Boolean} [responsiveHidden] - hidden through responsive module (ResponsiveGrid module)\r\n * @property {String} [filterType] - defines a filter field type (\"text\" or \"select\" - defaults to \"text\")\r\n * @property {Array} [filterList] - defines a custom array to populate a filter select field in the format of [{value: \"\", text: \"\"},...]. When defined, it overrides the default behaviour where the filter select elements are populated by the unique values from the corresponding column records.\r\n * @property {Object} [firstFilterOption] - defines an object for the first option element of the filter select field. defaults to {value: \"\", text: \"\"}\r\n */\r\n\r\n/**\r\n * Row action\r\n * @typedef Action\r\n * @property {String} title - the title of the button\r\n * @property {String} name - the name of the action\r\n * @property {String} class - the class for the button\r\n * @property {String} url - link for the action\r\n * @property {String} html - custom button data\r\n * @property {Boolean} [confirm] - needs confirmation\r\n * @property {Boolean} default - is the default row action\r\n */\r\n\r\n// Import definitions without importing the actual file\r\n/** @typedef {import('./plugins/autosize-column').default} AutosizeColumn */\r\n/** @typedef {import('./plugins/column-resizer').default} ColumnResizer */\r\n/** @typedef {import('./plugins/context-menu').default} ContextMenu */\r\n/** @typedef {import('./plugins/draggable-headers').default} DraggableHeaders */\r\n/** @typedef {import('./plugins/editable-column').default} EditableColumn */\r\n/** @typedef {import('./plugins/fixed-height').default} FixedHeight */\r\n/** @typedef {import('./plugins/responsive-grid').default} ResponsiveGrid */\r\n/** @typedef {import('./plugins/row-actions').default} RowActions */\r\n/** @typedef {import('./plugins/selectable-rows').default} SelectableRows */\r\n/** @typedef {import('./plugins/touch-support').default} TouchSupport */\r\n/** @typedef {import('./plugins/spinner-support').default} SpinnerSupport */\r\n/** @typedef {import('./plugins/save-state').default} SaveState */\r\n\r\n/**\r\n * These plugins are all optional\r\n * @typedef {Object} Plugins\r\n * @property {ColumnResizer} [ColumnResizer] resize handlers in the headers\r\n * @property {ContextMenu} [ContextMenu] menu to show/hide columns\r\n * @property {DraggableHeaders} [DraggableHeaders] draggable headers columns\r\n * @property {EditableColumn} [EditableColumn] draggable headers columns\r\n * @property {TouchSupport} [TouchSupport] touch swipe\r\n * @property {SelectableRows} [SelectableRows] create a column with checkboxes to select rows\r\n * @property {FixedHeight} [FixedHeight] allows having fixed height tables\r\n * @property {AutosizeColumn} [AutosizeColumn] compute ideal width based on column content\r\n * @property {ResponsiveGrid} [ResponsiveGrid] hide/show column on the fly\r\n * @property {RowActions} [RowActions] add action on rows\r\n * @property {SpinnerSupport} [SpinnerSupport] inserts a spinning icon element to indicate grid loading.\r\n * @property {SaveState} [SaveState] stores grid filter, sort, and paging.\r\n */\r\n\r\n/**\r\n * Parameters to pass along or receive from the server\r\n * @typedef ServerParams\r\n * @property {String} serverParams.start\r\n * @property {String} serverParams.length\r\n * @property {String} serverParams.search\r\n * @property {String} serverParams.sort\r\n * @property {String} serverParams.sortDir\r\n * @property {String} serverParams.dataKey\r\n * @property {String} serverParams.metaKey\r\n * @property {String} serverParams.metaTotalKey\r\n * @property {String} serverParams.metaFilteredKey\r\n * @property {String} serverParams.optionsKey\r\n * @property {String} serverParams.paramsKey\r\n */\r\n\r\n/**\r\n * Available data grid options, plugins included\r\n * @typedef Options\r\n * @property {?String} id Custom id for the grid\r\n * @property {?String} url An URL with data to display in JSON format\r\n * @property {Boolean} debug Log actions in DevTools console\r\n * @property {Boolean} filter Allows a filtering functionality\r\n * @property {Boolean} sort Allows a sort by column functionality\r\n * @property {String} defaultSort Default sort field if sorting is enabled\r\n * @property {Boolean} server Is a server side powered grid\r\n * @property {ServerParams} serverParams Describe keys passed to the server backend\r\n * @property {String} dir Dir\r\n * @property {Array} perPageValues Available per page options\r\n * @property {Boolean} hidePerPage Hides the page size select element\r\n * @property {Column[]} columns Available columns\r\n * @property {Number} defaultPage Starting page\r\n * @property {Number} perPage Number of records displayed per page (page size)\r\n * @property {Boolean} expand  Allow cell content to spawn over multiple lines\r\n * @property {Action[]} actions Row actions (RowActions module)\r\n * @property {Boolean} collapseActions Group actions (RowActions module)\r\n * @property {Boolean} resizable Make columns resizable (ColumnResizer module)\r\n * @property {Boolean} selectable Allow multi-selecting rows with a checkboxes (SelectableRows module)\r\n * @property {Boolean} selectVisibleOnly Select all only selects visible rows (SelectableRows module)\r\n * @property {Boolean} singleSelect Enables single row select with radio buttons - no need to set selectable (SelectableRows module)\r\n * @property {Boolean} autosize Compute column sizes based on given data (Autosize module)\r\n * @property {Boolean} autoheight Adjust height so that it matches table size (FixedHeight module)\r\n * @property {Boolean} autohidePager auto-hides the pager when number of records falls below the selected page size\r\n * @property {Boolean} menu Right click menu on column headers (ContextMenu module)\r\n * @property {Boolean} reorder Allows a column reordering functionality (DraggableHeaders module)\r\n * @property {Boolean} responsive Change display mode on small screens (ResponsiveGrid module)\r\n * @property {Boolean} responsiveToggle Show toggle column (ResponsiveGrid module)\r\n * @property {Boolean} filterOnEnter Toggles the ability to filter column data by pressing the Enter or Return key\r\n * @property {String} spinnerClass Sets a space-delimited string of css classes for a spinner (use spinner-border css class for bootstrap 5 spinner)\r\n * @property {Number} filterKeypressDelay Sets a keypress delay time in milliseconds before triggering filter operation.\r\n * @property {Boolean} saveState Enable/disable save state plugin (SaveState module)\r\n * @property {?String} errorMessage A generic text to be displayed in footer when error occurs.\r\n * @property {?String} noData A custom text to be displayed when no data is loaded. This is different from the generic labels.noData that applies for data-grid as a component.\r\n */\r\n\r\n/**\r\n * Available labels that can be translated\r\n * @typedef Labels\r\n * @property {String} itemsPerPage\r\n * @property {String} gotoPage\r\n * @property {String} gotoFirstPage\r\n * @property {String} gotoPrevPage\r\n * @property {String} gotoNextPage\r\n * @property {String} gotoLastPage\r\n * @property {String} of\r\n * @property {String} items\r\n * @property {String} resizeColumn\r\n * @property {String} noData\r\n * @property {String} areYouSure\r\n * @property {String} networkError\r\n */\r\n\r\n/**\r\n * List of registered plugins\r\n * @type {Plugins}\r\n */\r\nlet plugins = {};\r\n\r\n/**\r\n * @type {Labels}\r\n */\r\nlet labels = {\r\n    itemsPerPage: \"Items per page\",\r\n    gotoPage: \"Go to page\",\r\n    gotoFirstPage: \"Go to first page\",\r\n    gotoPrevPage: \"Go to previous page\",\r\n    gotoNextPage: \"Go to next page\",\r\n    gotoLastPage: \"Go to last page\",\r\n    of: \"of\",\r\n    items: \"items\",\r\n    resizeColumn: \"Resize column\",\r\n    noData: \"No data\",\r\n    areYouSure: \"Are you sure?\",\r\n    networkError: \"Network response error\",\r\n};\r\n\r\n/**\r\n * Column definition will update some props on the html element\r\n * @param {HTMLElement} el\r\n * @param {Column} column\r\n */\r\nfunction applyColumnDefinition(el, column) {\r\n    if (column.width) {\r\n        setAttribute(el, \"width\", column.width);\r\n    }\r\n    if (column.class) {\r\n        addClass(el, column.class);\r\n    }\r\n    if (column.hidden) {\r\n        setAttribute(el, \"hidden\", \"\");\r\n        if (column.responsiveHidden) {\r\n            addClass(el, \"dg-responsive-hidden\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n */\r\nclass DataGrid extends BaseElement {\r\n    _filterSelector = \"[id^=dg-filter]\";\n    _excludedRowElementSelector = \"a,button,input,select,textarea\";\r\n    _excludedKeys = [\r\n        37,\r\n        39,\r\n        38,\r\n        40,\r\n        45,\r\n        36,\r\n        35,\r\n        33,\r\n        34,\r\n        27,\r\n        20,\r\n        16,\r\n        17,\r\n        91,\r\n        92,\r\n        18,\r\n        93,\r\n        144,\r\n        231,\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"Insert\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"Escape\",\r\n        \"CapsLock\",\r\n        \"Shift\",\r\n        \"Control\",\r\n        \"Meta\",\r\n        \"Alt\",\r\n        \"ContextMenu\",\r\n        \"NumLock\",\r\n        \"Unidentified\",\r\n    ];\n\r\n    _ready() {\r\n        setAttribute(this, \"id\", this.options.id ?? randstr(\"el-\"), true);\r\n\r\n        /**\r\n         * The grid displays that data\r\n         * @type {Array}\r\n         */\r\n        this.data = [];\r\n        /**\r\n         * We store the original data in this\r\n         * @type {Array}\r\n         */\r\n        this.originalData; // declared uninitialized to allow data preloading before fetch.\r\n\r\n        // Make the IDE happy\r\n        /**\r\n         * @type {Options}\r\n         */\r\n        this.options = this.options || this.defaultOptions;\n        if (this.options.singleSelect) this.options.selectable = true; // singleSelect implies selectable\r\n\r\n        // Init values\r\n        this.fireEvents = false;\r\n        this.page = this.options.defaultPage || 1;\r\n        this.pages = 0;\r\n        this.meta; // declared uninitialized to allow data preloading before fetch.\r\n        /**\r\n         * @type {Plugins}\r\n         */\r\n        this.plugins = {};\r\n        // Init plugins\r\n        for (const [pluginName, pluginClass] of Object.entries(plugins)) {\r\n            // @ts-ignore until we can set typeof import ...\r\n            this.plugins[pluginName] = new pluginClass(this);\r\n        }\r\n\r\n        // Expose options as observed attributes in the dom\r\n        // Do it when fireEvents is disabled to avoid firing change callbacks\r\n        for (const attr of DataGrid.observedAttributes) {\r\n            if (attr.indexOf(\"data-\") === 0) {\r\n                setAttribute(this, attr, this.options[camelize(attr.slice(5))]);\r\n            }\r\n        }\r\n    }\r\n\r\n    static template() {\r\n        return `\r\n<table role=\"grid\" >\r\n    <thead role=\"rowgroup\">\r\n        <tr role=\"row\" aria-rowindex=\"1\" class=\"dg-head-columns\"><th><!-- keep for getTextWidth --></th></tr>\r\n        <tr role=\"row\" aria-rowindex=\"2\" class=\"dg-head-filters\"></tr>\r\n    </thead>\r\n    <tbody role=\"rowgroup\" data-empty=\"${labels.noData}\"></tbody>\r\n    <tfoot role=\"rowgroup\" hidden>\r\n        <tr role=\"row\" aria-rowindex=\"1\">\r\n            <td role=\"gridcell\">\r\n            <div class=\"dg-footer\">\r\n                <div class=\"dg-page-nav\">\r\n                  <select class=\"dg-select-per-page\" aria-label=\"${labels.itemsPerPage}\"></select>\r\n                </div>\r\n                <div class=\"dg-pagination\">\r\n                  <button type=\"button\" class=\"dg-btn-first dg-rotate\" title=\"${labels.gotoFirstPage}\" aria-label=\"${labels.gotoFirstPage}\" disabled>\r\n                    <i class=\"dg-skip-icon\"></i>\r\n                  </button>\r\n                  <button type=\"button\" class=\"dg-btn-prev dg-rotate\" title=\"${labels.gotoPrevPage}\" aria-label=\"${labels.gotoPrevPage}\" disabled>\r\n                    <i class=\"dg-nav-icon\"></i>\r\n                  </button>\r\n                  <input type=\"number\" class=\"dg-input-page\" min=\"1\" step=\"1\" value=\"1\" aria-label=\"${labels.gotoPage}\">\r\n                  <button type=\"button\" class=\"dg-btn-next\" title=\"${labels.gotoNextPage}\" aria-label=\"${labels.gotoNextPage}\" disabled>\r\n                    <i class=\"dg-nav-icon\"></i>\r\n                  </button>\r\n                  <button type=\"button\" class=\"dg-btn-last\" title=\"${labels.gotoLastPage}\" aria-label=\"${labels.gotoLastPage}\" disabled>\r\n                    <i class=\"dg-skip-icon\"></i>\r\n                  </button>\r\n                </div>\r\n                <div class=\"dg-meta\">\r\n                  <span class=\"dg-low\">0</span> - <span class=\"dg-high\">0</span> ${labels.of} <span class=\"dg-total\">0</span> ${labels.items}\r\n                </div>\r\n            </div>\r\n            </td>\r\n        </tr>\r\n    </tfoot>\r\n    <ul class=\"dg-menu\" hidden></ul>\r\n</table>\r\n`;\r\n    }\r\n\r\n    /**\r\n     * @returns {Labels}\r\n     */\r\n    get labels() {\r\n        return labels;\r\n    }\r\n\r\n    /**\r\n     * @returns {Labels}\r\n     */\r\n    static getLabels() {\r\n        return labels;\r\n    }\r\n\r\n    /**\r\n     * @param {Object} v\r\n     */\r\n    static setLabels(v) {\r\n        labels = Object.assign(labels, v);\r\n    }\n\r\n    /** Gets the text to be displayed when no data is loaded. */\n    get noData() {\n        return this.options.noData || this.labels.noData;\r\n    }\n\n    /**\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\n    #setNoData(tbody) {\n        if (!this.hasDataError && tbody.getAttribute(\"data-empty\") !== this.noData) {\r\n            tbody.setAttribute(\"data-empty\", this.noData);\r\n        }\r\n    }\n\r\n    /**\r\n     * @returns {Column}\r\n     */\r\n    get defaultColumn() {\r\n        return {\r\n            field: \"\",\r\n            title: \"\",\r\n            width: 0,\r\n            class: \"\",\r\n            attr: \"\",\r\n            hidden: false,\r\n            editable: false,\r\n            noSort: false,\r\n            responsive: 1,\r\n            responsiveHidden: false,\r\n            format: \"\",\r\n            transform: \"\",\r\n            filterType: \"text\",\r\n            firstFilterOption: { value: \"\", text: \"\" },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @returns {Options}\r\n     */\r\n    get defaultOptions() {\r\n        return {\r\n            id: null,\r\n            url: \"\",\r\n            perPage: 10,\r\n            debug: false,\r\n            filter: false,\r\n            menu: false,\r\n            sort: false,\r\n            server: false,\r\n            serverParams: {\r\n                start: \"start\",\r\n                length: \"length\",\r\n                search: \"search\",\r\n                sort: \"sort\",\r\n                sortDir: \"sortDir\",\r\n                dataKey: \"data\",\r\n                metaKey: \"meta\",\r\n                metaTotalKey: \"total\",\r\n                metaFilteredKey: \"filtered\",\r\n                optionsKey: \"options\",\r\n                paramsKey: \"params\",\r\n            },\r\n            defaultSort: \"\",\r\n            reorder: false,\r\n            dir: \"ltr\",\r\n            perPageValues: [10, 25, 50, 100, 250],\r\n            hidePerPage: false,\r\n            columns: [],\r\n            actions: [],\r\n            collapseActions: false,\r\n            selectable: false,\r\n            selectVisibleOnly: true,\n            singleSelect: false,\r\n            defaultPage: 1,\r\n            resizable: false,\r\n            autosize: true,\r\n            expand: false,\r\n            autoheight: true,\r\n            autohidePager: false,\r\n            responsive: false,\r\n            responsiveToggle: true,\r\n            filterOnEnter: true,\r\n            filterKeypressDelay: 500,\r\n            spinnerClass: \"\",\r\n            saveState: false,\r\n            errorMessage: \"\",\n            noData: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Determines if the grid is initialized.\r\n     * @returns {Boolean}\r\n     */\r\n    get isInit() {\r\n        return this.classList.contains(\"dg-initialized\");\r\n    }\r\n\r\n    /**\r\n     * Determines if data load has failed.\r\n     * @returns {Boolean}\r\n     */\r\n    get hasDataError() {\r\n        return this.classList.contains(\"dg-network-error\");\r\n    }\r\n\r\n    /**\r\n     * @param {Plugins} list\r\n     */\r\n    static registerPlugins(list) {\r\n        plugins = list;\r\n    }\r\n\r\n    /**\r\n     * @param {String} plugin\r\n     */\r\n    static unregisterPlugins(plugin = null) {\r\n        if (plugin === null) {\r\n            plugins = {};\r\n        } else {\r\n            delete plugins[plugin];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Plugins}\r\n     */\r\n    static registeredPlugins() {\r\n        return plugins;\r\n    }\r\n\r\n    /**\r\n     * @param {Object|Array} columns\r\n     * @returns {Column[]}\r\n     */\r\n    convertColumns(columns) {\r\n        const cols = [];\r\n        // Convert key:value objects to actual columns\r\n        if (typeof columns === \"object\" && !Array.isArray(columns)) {\r\n            for (const key of Object.keys(columns)) {\r\n                const col = Object.assign({}, this.defaultColumn);\r\n                col.title = columns[key];\r\n                col.field = key;\r\n                cols.push(col);\r\n            }\r\n        } else {\r\n            for (const item of columns) {\r\n                let col = Object.assign({}, this.defaultColumn);\r\n                if (typeof item === \"string\") {\r\n                    col.title = item;\r\n                    col.field = item;\r\n                } else if (typeof item === \"object\") {\r\n                    col = Object.assign(col, item);\r\n                    if (!col.field) {\r\n                        console.error(\"Invalid column definition\", item);\r\n                    }\r\n                    if (!col.title) {\r\n                        col.title = col.field;\r\n                    }\r\n                } else {\r\n                    console.error(\"Column definition must be a string or an object\");\r\n                }\r\n                cols.push(col);\r\n            }\r\n        }\r\n        return cols;\r\n    }\r\n\r\n    /**\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dom-attributes\r\n     * @returns {Array}\r\n     */\r\n    static get observedAttributes() {\r\n        return [\r\n            \"page\",\r\n            \"data-filter\",\r\n            \"data-sort\",\r\n            \"data-debug\",\r\n            \"data-reorder\",\r\n            \"data-menu\",\r\n            \"data-selectable\",\n            \"data-single-select\",\r\n            \"data-url\",\r\n            \"data-per-page\",\r\n            \"data-responsive\",\r\n        ];\r\n    }\r\n\r\n    get transformAttributes() {\r\n        return {\r\n            columns: (v) => this.convertColumns(convertArray(v)),\r\n            actions: (v) => convertArray(v),\r\n            defaultPage: (v) => Number.parseInt(v),\r\n            perPage: (v) => Number.parseInt(v),\r\n        };\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get thead() {\r\n        //@ts-ignore\r\n        return $(\"thead\", this);\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get tbody() {\r\n        //@ts-ignore\r\n        return $(\"tbody\", this);\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get tfoot() {\r\n        //@ts-ignore\r\n        return $(\"tfoot\", this);\r\n    }\r\n\r\n    get page() {\r\n        return Number.parseInt(this.getAttribute(\"page\"));\r\n    }\r\n\r\n    set page(val) {\r\n        setAttribute(this, \"page\", this.constrainPageValue(val));\r\n    }\r\n\r\n    /**\r\n     * Loads data and configures the grid.\r\n     * @param {Boolean} initOnly\r\n     */\r\n    urlChanged(initOnly = false) {\r\n        if (initOnly && !this.isInit) return this;\r\n        this.reconfig();\r\n        return this.loadData().then(() => this.configureUi());\r\n    }\r\n\r\n    /**\r\n     * Clears columns, re-renders table, and repopulates columns to ensure consistent column widths rendering.\r\n     */\r\n    reconfig() {\r\n        const cols = this.options.columns;\r\n        this.options.columns = [];\r\n        this.configureUi();\r\n        return this.options.columns = cols, this;\r\n    }\r\n\r\n    constrainPageValue(v) {\r\n        let pv = v;\r\n        if (this.pages < pv) {\r\n            pv = this.pages;\r\n        }\r\n        if (pv < 1 || !pv) {\r\n            pv = 1;\r\n        }\r\n        return pv;\r\n    }\r\n\r\n    fixPage() {\n        if (!this.inputPage) return this;\r\n        this.pages = this.totalPages();\r\n        this.page = this.constrainPageValue(this.page);\r\n\r\n        // Show current page in input\r\n        setAttribute(this.inputPage, \"max\", this.pages);\r\n        this.inputPage.value = `${this.page}`;\r\n        return this.inputPage.disabled = this.pages < 2, this;\r\n    }\r\n\r\n    pageChanged() {\r\n        this.reload();\r\n    }\r\n\r\n    responsiveChanged() {\r\n        if (!this.plugins.ResponsiveGrid) {\r\n            return;\r\n        }\r\n        if (this.options.responsive) {\r\n            this.plugins.ResponsiveGrid.observe();\r\n        } else {\r\n            this.plugins.ResponsiveGrid.unobserve();\r\n        }\r\n    }\r\n\r\n    menuChanged() {\r\n        this.renderHeader();\r\n    }\r\n\r\n    /**\r\n     * This is the callback for the select control\r\n     */\r\n    changePerPage() {\r\n        this.options.perPage = Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value);\r\n        this.perPageChanged();\r\n    }\r\n\r\n    /**\r\n     * This is the actual event triggered on attribute change\r\n     */\r\n    perPageChanged() {\r\n        // Refresh UI\r\n        if (\r\n            this.options.perPage !== Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value)\r\n        ) {\r\n            this.perPageValuesChanged();\r\n        }\r\n        // Make sure current page is still valid\r\n        let updatePage = this.page;\r\n        while (updatePage > 1 && this.page * this.options.perPage > this.totalRecords()) {\r\n            updatePage--;\r\n        }\r\n        if (updatePage !== this.page) {\r\n            // Triggers pageChanged, which will trigger reload\r\n            this.page = updatePage;\r\n        } else {\r\n            // Simply reload current page\r\n            this.reload(() => {\r\n                // Preserve distance between top of page and select control if no fixed height\r\n                if (!this.plugins.FixedHeight || !this.plugins.FixedHeight.hasFixedHeight) {\r\n                    this.selectPerPage.scrollIntoView();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    dirChanged() {\r\n        setAttribute(this, \"dir\", this.options.dir);\r\n    }\r\n\r\n    defaultSortChanged() {\r\n        this.sortChanged();\r\n    }\r\n\r\n    /**\r\n     * Populate the select dropdown according to options\r\n     */\r\n    perPageValuesChanged() {\r\n        if (!this.selectPerPage) {\r\n            return;\r\n        }\r\n        while (this.selectPerPage.lastChild) {\r\n            this.selectPerPage.removeChild(this.selectPerPage.lastChild);\r\n        }\r\n        for (const v of this.options.perPageValues) {\r\n            addSelectOption(this.selectPerPage, v, v, v === this.options.perPage);\r\n        }\r\n    }\r\n\r\n    async _connected() {\r\n        /**\r\n         * @type {HTMLTableElement}\r\n         */\r\n        this.table = this.querySelector(\"table\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnFirst = this.querySelector(\".dg-btn-first\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnPrev = this.querySelector(\".dg-btn-prev\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnNext = this.querySelector(\".dg-btn-next\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnLast = this.querySelector(\".dg-btn-last\");\r\n        /**\r\n         * @type {HTMLSelectElement}\r\n         */\r\n        this.selectPerPage = this.querySelector(\".dg-select-per-page\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.inputPage = this.querySelector(\".dg-input-page\");\r\n\r\n        this.getFirst = this.getFirst.bind(this);\r\n        this.getPrev = this.getPrev.bind(this);\r\n        this.getNext = this.getNext.bind(this);\r\n        this.getLast = this.getLast.bind(this);\r\n        this.changePerPage = this.changePerPage.bind(this);\r\n        this.gotoPage = this.gotoPage.bind(this);\r\n\r\n        this.btnFirst.addEventListener(\"click\", this.getFirst);\r\n        this.btnPrev.addEventListener(\"click\", this.getPrev);\r\n        this.btnNext.addEventListener(\"click\", this.getNext);\r\n        this.btnLast.addEventListener(\"click\", this.getLast);\r\n        this.selectPerPage.addEventListener(\"change\", this.changePerPage);\r\n        this.selectPerPage.toggleAttribute(\"hidden\", this.options.hidePerPage);\r\n        this.inputPage.addEventListener(\"input\", this.gotoPage);\r\n\r\n        for (const plugin of Object.values(this.plugins)) {\r\n            await plugin.connected();\r\n        }\r\n\r\n        // Display even if we don't have data\r\n        this.dirChanged();\r\n        this.perPageValuesChanged();\r\n\n        await this.init();\r\n    }\r\n\r\n    _disconnected() {\r\n        this.btnFirst?.removeEventListener(\"click\", this.getFirst);\r\n        this.btnPrev?.removeEventListener(\"click\", this.getPrev);\r\n        this.btnNext?.removeEventListener(\"click\", this.getNext);\r\n        this.btnLast?.removeEventListener(\"click\", this.getLast);\r\n        this.selectPerPage?.removeEventListener(\"change\", this.changePerPage);\r\n        this.inputPage?.removeEventListener(\"input\", this.gotoPage);\r\n\r\n        for (const plugin of Object.values(this.plugins)) {\r\n            plugin.disconnected();\r\n        }\r\n    }\n\n    init() {\n        return this.loadData().finally(() => {\r\n            this.configureUi();\r\n\r\n            this.sortChanged();\r\n            this.classList.add(\"dg-initialized\"); //acts as a flag to prevent unnecessary server calls down the chain.\r\n\r\n            this.filterChanged();\r\n            this.reorderChanged();\r\n\r\n            this.dirChanged();\r\n            this.perPageValuesChanged();\r\n            this.pageChanged();\r\n\r\n            this.fireEvents = true; // We can now fire attributeChangedCallback events\r\n\r\n            this.log(\"initialized\");\r\n        });\n    }\r\n\r\n    /**\r\n     * @param {string} field\r\n     * @returns {Column}\r\n     */\r\n    getCol(field) {\r\n        let found = null;\r\n\r\n        for (const col of this.options.columns) {\r\n            if (col.field === field) {\r\n                found = col;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    getColProp(field, prop) {\r\n        const c = this.getCol(field);\r\n        return c ? c[prop] : null;\r\n    }\r\n\r\n    setColProp(field, prop, val) {\r\n        const c = this.getCol(field);\r\n        if (c) {\r\n            c[prop] = val;\r\n        }\r\n    }\r\n\r\n    visibleColumns() {\r\n        return this.options.columns.filter((col) => {\r\n            return !col.hidden;\r\n        });\r\n    }\r\n\r\n    hiddenColumns() {\r\n        return this.options.columns.filter((col) => {\r\n            return col.hidden === true;\r\n        });\r\n    }\r\n\r\n    showColumn(field, render = true) {\r\n        this.setColProp(field, \"hidden\", false);\r\n\r\n        // We need to render the whole table otherwise layout fixed won't do its job\r\n        if (render) this.renderTable();\r\n\r\n        dispatch(this, \"columnVisibility\", {\r\n            col: field,\r\n            visibility: \"visible\",\r\n        });\r\n    }\r\n\r\n    hideColumn(field, render = true) {\r\n        this.setColProp(field, \"hidden\", true);\r\n\r\n        // We need to render the whole table otherwise layout fixed won't do its job\r\n        if (render) this.renderTable();\r\n\r\n        dispatch(this, \"columnVisibility\", {\r\n            col: field,\r\n            visibility: \"hidden\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the starting index of actual data\r\n     * @returns {Number}\r\n     */\r\n    startColIndex() {\r\n        let start = 1;\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            start++;\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            start++;\r\n        }\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    isSticky() {\r\n        return this.hasAttribute(\"sticky\");\r\n    }\r\n\r\n    /**\r\n     * @param {Boolean} visibleOnly\r\n     * @returns {Number}\r\n     */\r\n    columnsLength(visibleOnly = false) {\r\n        let len = 0;\r\n        // One column per (visible) column\r\n        for (const col of this.options.columns) {\r\n            if (visibleOnly && col.hidden) {\r\n                continue;\r\n            }\r\n            if (!col.attr) {\r\n                len++;\r\n            }\r\n        }\r\n        // Add one col for selectable checkbox at the beginning\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            len++;\r\n        }\r\n        // Add one col for actions at the end\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            len++;\r\n        }\r\n        // Add one col for the responsive toggle\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            len++;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /**\r\n     * Global configuration and renderTable\r\n     * This should be called after your data has been loaded\r\n     */\r\n    configureUi() {\r\n        if (!this.table) return this;\n        this.table.style.visibility = \"hidden\";\r\n        this.renderTable();\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid) {\r\n            // Let the observer make the table visible\r\n        } else {\r\n            this.table.style.visibility = \"visible\";\r\n        }\r\n\r\n        // Store row height for later usage\r\n        if (!this.rowHeight) {\r\n            const tr = find(this, \"tbody tr\") || find(this, \"table tr\");\r\n            if (tr) {\r\n                this.rowHeight = tr.offsetHeight;\r\n            }\r\n        }\n        this.#setNoData(this.tbody);\r\n        return this.fixPage();\r\n    }\r\n\r\n    filterChanged() {\r\n        const row = this.querySelector(\"thead tr.dg-head-filters\");\r\n        if (this.options.filter) {\r\n            removeAttribute(row, \"hidden\");\r\n        } else {\r\n            this.clearFilters();\r\n            setAttribute(row, \"hidden\", \"\");\r\n        }\r\n    }\r\n\r\n    reorderChanged() {\r\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\r\n        for (const th of headers) {\r\n            if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\r\n                continue;\r\n            }\r\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\r\n                th.draggable = true;\r\n            } else {\r\n                th.removeAttribute(\"draggable\");\r\n            }\r\n        }\r\n    }\r\n\r\n    sortChanged() {\r\n        this.log(\"toggle sort\");\r\n\r\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\r\n        for (const th of headers) {\r\n            const fieldName = th.getAttribute(\"field\");\r\n            if (\r\n                th.classList.contains(\"dg-not-sortable\") ||\r\n                (!this.fireEvents && fieldName === this.options.defaultSort)\r\n            ) {\r\n                return;\r\n            }\r\n            if (this.options.sort && !this.getColProp(fieldName, \"noSort\")) {\r\n                setAttribute(th, \"aria-sort\", \"none\");\r\n            } else {\r\n                removeAttribute(th, \"aria-sort\");\r\n            }\r\n        }\r\n    }\r\n\r\n    selectableChanged() {\r\n        this.renderTable();\r\n    }\r\n\r\n    addRow(row) {\r\n        if (!Array.isArray(this.originalData)) {\r\n            return;\r\n        }\r\n        this.log(\"add row\");\r\n        this.originalData.push(row);\r\n        this.data = this.originalData.slice();\r\n        this.sortData();\r\n    }\r\n\r\n    /**\r\n     * @param {any} value Value to remove. Defaults to last row.\r\n     * @param {String} key The key of the item to remove. Defaults to first column\r\n     */\r\n    removeRow(value = null, key = null) {\r\n        if (!Array.isArray(this.originalData)) {\r\n            return;\r\n        }\r\n\r\n        let v = value;\r\n        let k = key;\r\n        if (k === null) {\r\n            k = this.options.columns[0].field;\r\n        }\r\n        if (v === null) {\r\n            v = this.originalData[this.originalData.length - 1][k];\r\n        }\r\n        this.log(`remove row ${k}:${v}`);\r\n        for (let i = 0; i < this.originalData.length; i++) {\r\n            if (this.originalData[i][k] === v) {\r\n                this.originalData.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.data = this.originalData.slice();\r\n        this.sortData();\r\n    }\r\n\r\n    /**\n     * Get selected rows or specific fields from selected rows.\n     * If no keys are provided, returns the full row objects.\n     * If one key is provided, returns an array of values for that key.\n     * If multiple keys are provided, returns an array of objects with those keys and values.\n     * In single select mode, returns a single object or value.\n     * @param {...String} keys - Field names to select from each row.\n     * @returns {Array|Object} Selected rows, values, or objects depending on selection and keys.\n     */\n    getSelection(...keys) {\n        if (!this.plugins.SelectableRows) {\n            return [];\n        }\n        return this.plugins.SelectableRows.getSelection(...keys);\n    }\r\n\r\n    getData() {\r\n        return this.originalData;\r\n    }\r\n\r\n    clearData(force = false) {\r\n        // Already empty\r\n        if (!force && this.data.length === 0) {\r\n            return;\r\n        }\n        this.classList.remove(\"dg-empty\", \"dg-network-error\");\n        this.tbody?.setAttribute(\"data-empty\", this.noData);\r\n        this.data = this.originalData = [];\r\n        this.renderBody();\r\n    }\r\n\r\n    /**\r\n     * Preloads the data intended to bypass the initial fetch operation, allowing for faster intial page load time.\r\n     * Subsequent grid actions after initialization will operate as normal.\r\n     * @param {Object} data - an object with meta ({total, filtered, start}) and data (array of objects) properties.\r\n     */\r\n    preload(data) {\r\n        const metaKey = this.options.serverParams.metaKey;\r\n        const dataKey = this.options.serverParams.dataKey;\r\n        if (data?.[metaKey]) {\r\n            this.meta = data[metaKey];\r\n        }\r\n        if (data?.[dataKey]) {\r\n            this.data = this.originalData = data[dataKey];\r\n        }\r\n    }\r\n\n    /**\n     * Clears and reloads data from url.\n     * @param {Function|String} callbackOrUrl\n     * @returns {DataGrid}\n     */\r\n    refresh(callbackOrUrl = null) {\r\n        this.data = this.originalData = [];\r\n        return this.reload(callbackOrUrl);\r\n    }\r\n\n    /**\n     * Reloads data from url.\n     * @param {Function|String} callbackOrUrl\n     * @returns {DataGrid}\n     */\r\n    reload(callbackOrUrl = null) {\r\n        this.log(\"reload\");\r\n        if (typeof callbackOrUrl === \"string\") {\n            this.options.url = callbackOrUrl;\n        }\r\n        // If the data was cleared, we need to render again\r\n        const needRender = !this.originalData?.length;\r\n        this.fixPage();\r\n        // @ts-ignore\r\n        return this.loadData().finally(() => {\r\n            if (this.hasDataError) return;\r\n            // If we load data from the server, we redraw the table body\r\n            // Otherwise, we just need to paginate\r\n            this.options.server || needRender ? this.renderBody() : this.paginate();\r\n            if (typeof callbackOrUrl === \"function\") {\r\n                callbackOrUrl();\r\n            }\r\n        }).then(() => this);\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    loadData() {\r\n        const flagEmpty = () => !this.data.length && this.classList.add(\"dg-empty\");\r\n        const tbody = this.tbody;\r\n\r\n        // We already have some data\r\n        if (this.meta || this.originalData || this.isInit) {\r\n            // We don't use server side data\r\n            if (!this.options.server || (this.options.server && !this.fireEvents)) {\r\n                this.log(\"skip loadData\");\r\n                flagEmpty();\r\n                return new Promise((resolve) => {\r\n                    resolve();\r\n                });\r\n            }\r\n        }\r\n        this.log(\"loadData\");\r\n        this.loading = true;\r\n        this.classList.add(\"dg-loading\");\r\n        this.classList.remove(\"dg-empty\", \"dg-network-error\");\r\n        return (\r\n            this.fetchData()\r\n                .then((response) => {\r\n                    // We can get a straight array or an object\r\n                    if (Array.isArray(response)) {\r\n                        this.data = response;\r\n                    } else {\r\n                        // Object must contain data key\r\n                        if (!response[this.options.serverParams.dataKey]) {\r\n                            console.error(\r\n                                \"Invalid response, it should contain a data key with an array or be a plain array\",\r\n                                response,\r\n                            );\r\n                            this.options.url = null;\r\n                            return;\r\n                        }\r\n\r\n                        // We may have a config object\r\n                        this.options = Object.assign(\r\n                            this.options,\r\n                            response[this.options.serverParams.optionsKey] ?? {},\r\n                        );\r\n                        // It should return meta data (see metaFilteredKey)\r\n                        this.meta = response[this.options.serverParams.metaKey] ?? {};\r\n                        this.data = response[this.options.serverParams.dataKey];\r\n                    }\r\n                    this.originalData = this.data.slice();\r\n                    this.fixPage();\r\n\r\n                    // Make sure we have a proper set of columns\r\n                    if (this.options.columns.length === 0 && this.originalData.length) {\r\n                        this.options.columns = this.convertColumns(Object.keys(this.originalData[0]));\r\n                    } else {\r\n                        this.options.columns = this.convertColumns(this.options.columns);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.log(err);\r\n                    tbody.setAttribute(\r\n                        \"data-empty\",\r\n                        this.options.errorMessage ||\r\n                            err.message?.replace(/^\\s+|\\r\\n|\\n|\\r$/g, \"\") ||\r\n                            labels.networkError,\r\n                    );\r\n                    this.classList.add(\"dg-empty\", \"dg-network-error\");\r\n                    dispatch(this, \"loadDataFailed\", err);\r\n                })\r\n                // @ts-ignore\r\n                .finally(() => {\r\n                    flagEmpty();\r\n                    this.#setNoData(tbody);\r\n                    this.classList.remove(\"dg-loading\");\r\n                    setAttribute(this.table, \"aria-rowcount\", this.data.length);\r\n                    this.loading = false;\r\n                })\r\n        );\r\n    }\r\n\r\n    getFirst() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = 1;\r\n    }\r\n\r\n    getLast() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.pages;\r\n    }\r\n\r\n    getPrev() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.page - 1;\r\n    }\r\n\r\n    getNext() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.page + 1;\r\n    }\r\n\r\n    gotoPage(event) {\r\n        if (event.type === \"keypress\") {\r\n            const key = event.keyCode || event.key;\r\n            if (key === 13 || key === \"Enter\") {\r\n                event.preventDefault();\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        this.page = Number.parseInt(this.inputPage.value);\r\n    }\r\n\r\n    getSort() {\r\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        if (col) {\r\n            return col.getAttribute(\"field\");\r\n        }\r\n        return this.options.defaultSort;\r\n    }\r\n\r\n    getSortDir() {\r\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        if (col) {\r\n            return col.getAttribute(\"aria-sort\") || \"\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getFilters() {\r\n        const filters = [];\r\n        const inputs = findAll(this, this._filterSelector);\r\n        for (const input of inputs) {\r\n            filters[input.dataset.name] = input.value;\r\n        }\r\n        return filters;\r\n    }\r\n\r\n    clearFilters() {\r\n        const inputs = findAll(this, this._filterSelector);\r\n        for (const input of inputs) {\r\n            input.value = \"\";\r\n        }\r\n        this.filterData();\r\n    }\r\n\r\n    filterData() {\r\n        this.log(\"filter data\");\r\n\r\n        this.page = 1;\r\n\r\n        if (this.options.server) {\r\n            this.reload();\r\n        } else {\r\n            this.data = this.originalData?.slice() ?? [];\r\n\r\n            // Look for rows matching the filters\r\n            const inputs = findAll(this, this._filterSelector);\r\n            for (const input of inputs) {\r\n                const value = input.value;\r\n                if (value) {\r\n                    const name = input.dataset.name;\r\n                    this.data = this.data.filter((item) => {\r\n                        const str = `${item[name]}`;\r\n                        return str.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n                    });\r\n                }\r\n            }\r\n            this.pageChanged();\r\n\r\n            const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n            if (this.options.sort && col) {\r\n                this.sortData();\r\n            } else {\r\n                this.renderBody();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data will be sorted then rendered using renderBody\r\n     * @param {Element} baseCol The column that was clicked or null to use current sort\r\n     */\r\n    sortData(baseCol = null) {\r\n        this.log(\"sort data\");\r\n\r\n        let col = baseCol;\r\n\r\n        // Early exit\r\n        if (col && this.getColProp(col.getAttribute(\"field\"), \"noSort\")) {\r\n            this.log(\"sorting prevented because column is not sortable\");\r\n            return;\r\n        }\r\n        if (this.plugins.ColumnResizer?.isResizing) {\r\n            this.log(\"sorting prevented because resizing\");\r\n            return;\r\n        }\r\n        if (this.loading) {\r\n            this.log(\"sorting prevented because loading\");\r\n            return;\r\n        }\r\n\r\n        // We clicked on a column, update sort state\r\n        if (col !== null) {\r\n            // Remove active sort if any\r\n            const haveClasses = (c) => [\"dg-selectable\", \"dg-actions\", \"dg-responsive-toggle\"].includes(c);\r\n\r\n            const headers = findAll(this, \"thead tr:first-child th\");\r\n            for (const th of headers) {\r\n                // @ts-ignore\r\n                if ([...th.classList].some(haveClasses) || !th.hasAttribute(\"aria-sort\")) {\r\n                    continue;\r\n                }\r\n                if (th !== col) {\r\n                    th.setAttribute(\"aria-sort\", \"none\");\r\n                }\r\n            }\r\n\r\n            // Set tristate col\r\n            if (!col.hasAttribute(\"aria-sort\") || col.getAttribute(\"aria-sort\") === \"none\") {\r\n                col.setAttribute(\"aria-sort\", \"ascending\");\r\n            } else if (col.getAttribute(\"aria-sort\") === \"ascending\") {\r\n                col.setAttribute(\"aria-sort\", \"descending\");\r\n            } else if (col.getAttribute(\"aria-sort\") === \"descending\") {\r\n                col.setAttribute(\"aria-sort\", \"none\");\r\n            }\r\n        } else {\r\n            // Or fetch current sort\r\n            col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        }\r\n\r\n        if (this.options.server) {\r\n            // Reload data with updated sort\r\n            this.loadData().finally(() => {\r\n                this.renderBody();\r\n            });\r\n        } else {\r\n            const sort = col ? col.getAttribute(\"aria-sort\") : \"none\";\r\n            if (sort === \"none\") {\r\n                const stack = [];\r\n\r\n                // Restore order while keeping filters\r\n                this.originalData?.some((itemA) => {\r\n                    this.data.some((itemB) => {\r\n                        if (JSON.stringify(itemA) === JSON.stringify(itemB)) {\r\n                            stack.push(itemB);\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    return stack.length === this.data.length;\r\n                });\r\n\r\n                this.data = stack;\r\n            } else {\r\n                const field = col.getAttribute(\"field\");\r\n                this.data.sort((a, b) => {\r\n                    if (!isNaN(a[field]) && !isNaN(b[field])) {\r\n                        return sort === \"ascending\" ? a[field] - b[field] : b[field] - a[field];\r\n                    }\r\n                    const valA = sort === \"ascending\" ? a[field].toUpperCase() : b[field].toUpperCase();\r\n                    const valB = sort === \"ascending\" ? b[field].toUpperCase() : a[field].toUpperCase();\r\n\r\n                    switch (true) {\r\n                        case valA > valB:\r\n                            return 1;\r\n                        case valA < valB:\r\n                            return -1;\r\n                        case valA === valB:\r\n                            return 0;\r\n                    }\r\n                });\r\n            }\r\n            this.renderBody();\r\n        }\r\n    }\r\n\r\n    _sort(columnName, sortDir) {\r\n        const col = this.querySelector(`.dg-head-columns th[field=${columnName}]`);\r\n        const dir = sortDir === \"ascending\" ? \"none\" : sortDir === \"descending\" ? \"ascending\" : \"descending\";\r\n        col?.setAttribute(\"aria-sort\", dir);\r\n        this.sortData(col);\r\n    }\r\n\r\n    sortAsc = (columnName) => this._sort(columnName, \"ascending\");\r\n    sortDesc = (columnName) => this._sort(columnName, \"descending\");\r\n    sortNone = (columnName) => this._sort(columnName, \"none\");\r\n\r\n    fetchData() {\r\n        if (!this.options.url) {\r\n            return new Promise((resolve, reject) => reject(\"No url set\"));\r\n        }\r\n\r\n        let base = window.location.href;\r\n        // Fix trailing slash if no extension is present\r\n        if (!base.split(\"/\").pop().includes(\".\")) {\r\n            base += base.endsWith(\"/\") ? \"\" : \"/\";\r\n        }\r\n        const url = new URL(this.options.url, base);\r\n        let params = {\r\n            r: Date.now(),\r\n        };\r\n        if (this.options.server) {\r\n            // 0 based\r\n            params[this.options.serverParams.start] = this.page - 1;\r\n            params[this.options.serverParams.length] = this.options.perPage;\r\n            if (this.options.filter) params[this.options.serverParams.search] = this.getFilters();\r\n            params[this.options.serverParams.sort] = this.getSort() || \"\";\r\n            params[this.options.serverParams.sortDir] = this.getSortDir();\r\n\r\n            // extra params ?\r\n            if (this.meta?.[this.options.serverParams.paramsKey]) {\r\n                params = Object.assign(params, this.meta[this.options.serverParams.paramsKey]);\r\n            }\r\n        }\r\n\r\n        appendParamsToUrl(url, params);\r\n\r\n        return fetch(url).then((response) => {\r\n            const newError = new Error(response.statusText || labels.networkError);\r\n            if (!response.ok) {\r\n                // @ts-ignore\r\n                newError.response = response;\r\n                throw newError;\r\n            }\r\n            return response\r\n                .clone()\r\n                .json()\r\n                .catch((err) => {\r\n                    let error = err;\r\n                    if (!this.options.debug) {\r\n                        error = newError;\r\n                    }\r\n                    error.response = response;\r\n                    throw error;\r\n                });\r\n        });\r\n    }\r\n\r\n    renderTable() {\r\n        this.log(\"render table\");\r\n\r\n        if (this.options.menu && this.plugins.ContextMenu) {\r\n            this.plugins.ContextMenu.createMenu();\r\n        }\r\n\r\n        let sortedColumn;\r\n\r\n        this.renderHeader();\r\n        if (this.options.defaultSort) {\r\n            // We can have a default sort even with sort disabled\r\n            sortedColumn = this.querySelector(`thead tr.dg-head-columns th[field=\"${this.options.defaultSort}\"]`);\r\n        }\r\n\r\n        if (sortedColumn) {\r\n            this.sortData(sortedColumn);\r\n        } else {\r\n            this.renderBody();\r\n        }\r\n\r\n        this.renderFooter();\r\n    }\r\n\r\n    /**\r\n     * Create table header\r\n     * - One row for the column headers\r\n     * - One row for the filters\r\n     */\r\n    renderHeader() {\r\n        this.log(\"render header\");\r\n\r\n        const thead = this.thead;\r\n        this.createColumnHeaders(thead);\r\n        this.createColumnFilters(thead);\r\n\r\n        if (this.options.resizable && this.plugins.ColumnResizer) {\r\n            this.plugins.ColumnResizer.renderResizer(labels.resizeColumn);\r\n        }\r\n\r\n        dispatch(this, \"headerRendered\");\r\n    }\r\n\r\n    renderFooter() {\r\n        this.log(\"render footer\");\r\n\r\n        const tfoot = this.tfoot;\r\n        if (!tfoot) return;\n        const td = tfoot.querySelector(\"td\");\r\n        tfoot.removeAttribute(\"hidden\");\r\n        setAttribute(td, \"colspan\", this.columnsLength(true));\r\n        tfoot.style.display = \"\";\r\n    }\r\n\r\n    /**\r\n     * Create the column headers based on column definitions and set options\r\n     * @param {HTMLTableSectionElement} thead\r\n     */\r\n    createColumnHeaders(thead) {\r\n        // @link https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n        const availableWidth = this.clientWidth;\r\n        const colMaxWidth = Math.round((availableWidth / this.columnsLength(true)) * 2);\r\n\r\n        let idx = 0;\r\n        let tr;\r\n\r\n        // Create row\r\n        tr = ce(\"tr\");\r\n        this.headerRow = tr;\r\n        tr.setAttribute(\"role\", \"row\");\r\n        tr.setAttribute(\"aria-rowindex\", \"1\");\r\n        tr.setAttribute(\"class\", \"dg-head-columns\");\r\n\r\n        // We need a real th from the dom to compute the size\r\n        let sampleTh = thead?.querySelector(\"tr.dg-head-columns th\");\n        this.log(\"createColumnHeaders - sampleTh\", sampleTh);\r\n        if (!sampleTh) {\r\n            sampleTh = ce(\"th\");\r\n            thead?.querySelector(\"tr\").appendChild(sampleTh);\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.createHeaderCol(tr);\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            this.plugins.ResponsiveGrid.createHeaderCol(tr);\r\n        }\r\n\r\n        // Create columns\r\n        idx = 0;\r\n        let totalWidth = 0;\r\n        this.log(\"createColumnHeaders - columns\", this.options.columns);\r\n\r\n        for (const column of this.options.columns) {\r\n            if (column.attr) {\r\n                continue;\r\n            }\r\n            const colIdx = idx + this.startColIndex();\r\n            const th = ce(\"th\");\r\n            th.setAttribute(\"scope\", \"col\");\r\n            th.setAttribute(\"role\", \"columnheader button\");\r\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\r\n            th.setAttribute(\"id\", randstr(\"dg-col-\"));\r\n            if (this.options.sort) {\r\n                th.setAttribute(\"aria-sort\", \"none\");\r\n            }\r\n            th.setAttribute(\"field\", column.field);\r\n            if (this.plugins.ResponsiveGrid && this.options.responsive) {\r\n                setAttribute(th, \"data-responsive\", column.responsive || \"\");\r\n            }\r\n            // Make sure the header fits (+ add some room for sort icon if necessary)\r\n            const computedWidth = getTextWidth(column.title, sampleTh, true) + 20;\r\n            th.dataset.minWidth = `${computedWidth}`;\r\n            applyColumnDefinition(th, column);\r\n            th.tabIndex = 0;\r\n            th.textContent = column.title;\r\n\r\n            let w = 0;\r\n            // Autosize small based on first/last row ?\r\n            // Take into account minWidth of the header and max available size based on col numbers\r\n            if (this.options.autosize && this.plugins.AutosizeColumn) {\r\n                const colAvailableWidth = Math.min(availableWidth - totalWidth, colMaxWidth);\r\n                w = this.plugins.AutosizeColumn.computeSize(\r\n                    th,\r\n                    column,\r\n                    Number.parseInt(th.dataset.minWidth),\r\n                    colAvailableWidth,\r\n                );\r\n            } else {\r\n                w = Math.max(Number.parseInt(th.dataset.minWidth), Number.parseInt(th.getAttribute(\"width\")));\r\n            }\r\n\r\n            setAttribute(th, \"width\", w);\r\n            if (column.hidden) {\r\n                th.setAttribute(\"hidden\", \"\");\r\n            } else {\r\n                totalWidth += w;\r\n            }\r\n\r\n            // Reorder columns with drag/drop\r\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\r\n                this.plugins.DraggableHeaders.makeHeaderDraggable(th);\r\n            }\r\n\r\n            tr.appendChild(th);\r\n            idx++;\r\n        }\r\n\r\n        // There is too much available width, and we want to avoid fixed layout to split remaining amount\r\n        if (totalWidth < availableWidth) {\r\n            const visibleCols = findAll(tr, \"th:not([hidden],.dg-not-resizable)\");\r\n            if (visibleCols.length) {\r\n                const lastCol = visibleCols[visibleCols.length - 1];\r\n                removeAttribute(lastCol, \"width\");\r\n            }\r\n        }\r\n\r\n        // Actions\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            this.plugins.RowActions.makeActionHeader(tr);\r\n        }\r\n\r\n        thead?.replaceChild(tr, thead.querySelector(\"tr.dg-head-columns\"));\r\n\r\n        // Once columns are inserted, we have an actual dom to query\r\n        if (thead && thead.offsetWidth > availableWidth) {\r\n            this.log(`adjust width to fix size, ${thead.offsetWidth} > ${availableWidth}`);\r\n            const scrollbarWidth = this.offsetWidth - this.clientWidth;\r\n            let diff = thead.offsetWidth - availableWidth - scrollbarWidth;\r\n            if (this.options.responsive && this.plugins.ResponsiveGrid) {\r\n                diff += scrollbarWidth;\r\n            }\r\n            // Remove diff for columns that can afford it\r\n            const thWithWidth = findAll(tr, \"th[width]\");\r\n\r\n            for (const th of thWithWidth) {\r\n                if (hasClass(th, \"dg-not-resizable\")) {\r\n                    continue;\r\n                }\r\n                if (diff <= 0) {\r\n                    continue;\r\n                }\r\n                const actualWidth = Number.parseInt(th.getAttribute(\"width\"));\r\n                const minWidth = th.dataset.minWidth ? Number.parseInt(th.dataset.minWidth) : 0;\r\n                if (actualWidth > minWidth) {\r\n                    let newWidth = actualWidth - diff;\r\n                    if (newWidth < minWidth) {\r\n                        newWidth = minWidth;\r\n                    }\r\n                    diff -= actualWidth - newWidth;\r\n                    setAttribute(th, \"width\", newWidth);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Context menu\r\n        if (this.options.menu && this.plugins.ContextMenu) {\r\n            this.plugins.ContextMenu.attachContextMenu();\r\n        }\r\n\r\n        // Sort col on click\r\n        const rowsWithSort = findAll(tr, \"[aria-sort]\");\r\n        for (const sortableRow of rowsWithSort) {\r\n            sortableRow.addEventListener(\"click\", () => this.sortData(sortableRow));\r\n        }\r\n\r\n        this.table && setAttribute(this.table, \"aria-colcount\", this.columnsLength(true));\r\n    }\r\n\r\n    createColumnFilters(thead) {\r\n        let idx = 0;\r\n        let tr;\r\n\r\n        // Create row for filters\r\n        tr = ce(\"tr\");\r\n        this.filterRow = tr;\r\n        tr.setAttribute(\"role\", \"row\");\r\n        tr.setAttribute(\"aria-rowindex\", \"2\");\r\n        tr.setAttribute(\"class\", \"dg-head-filters\");\r\n        if (!this.options.filter) {\r\n            tr.setAttribute(\"hidden\", \"\");\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.createFilterCol(tr);\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            this.plugins.ResponsiveGrid.createFilterCol(tr);\r\n        }\r\n\r\n        this.log(\"createColumnFilters - columns\", this.options.columns);\r\n        for (const column of this.options.columns) {\r\n            if (column.attr) {\r\n                continue;\r\n            }\r\n            const colIdx = idx + this.startColIndex();\r\n            const relatedTh = thead?.querySelector(`tr.dg-head-columns th[aria-colindex=\"${colIdx}\"]`);\r\n            if (!relatedTh) {\r\n                console.warn(\"Related th not found\", colIdx);\r\n                continue;\r\n            }\r\n            const th = ce(\"th\");\r\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\r\n\r\n            const filter = this.createFilterElement(column, relatedTh);\r\n            if (!this.options.filter) {\r\n                th.tabIndex = 0;\r\n            } else {\r\n                filter.tabIndex = 0;\r\n            }\r\n\r\n            if (column.hidden) {\r\n                th.setAttribute(\"hidden\", \"\");\r\n            }\r\n\r\n            th.appendChild(filter);\r\n            tr.appendChild(th);\r\n            idx++;\r\n        }\r\n\r\n        // Actions\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            this.plugins.RowActions.makeActionFilter(tr);\r\n        }\r\n\r\n        thead?.replaceChild(tr, thead.querySelector(\"tr.dg-head-filters\"));\r\n\r\n        if (typeof this.options.filterKeypressDelay !== \"number\" || this.options.filterOnEnter)\r\n            this.options.filterKeypressDelay = 0;\r\n\r\n        // Filter content by field events\r\n        const filteredRows = findAll(tr, this._filterSelector);\r\n        for (const el of filteredRows) {\r\n            const eventName = /select/i.test(el.tagName) ? \"change\" : \"keyup\";\r\n            const eventHandler = debounce((e) => {\r\n                const key = e.keyCode || e.key;\r\n                const isKeyPressFilter = !this.options.filterOnEnter && !this._excludedKeys.some((k) => k === key);\r\n                if (key === 13 || key === \"Enter\" || isKeyPressFilter || e.type === \"change\") {\r\n                    this.filterData.call(this);\r\n                }\r\n            }, this.options.filterKeypressDelay);\r\n            el.addEventListener(eventName, eventHandler);\r\n        }\r\n    }\r\n\r\n    createFilterElement(column, relatedTh) {\r\n        const isSelect = column.filterType === \"select\";\r\n        const filter = isSelect ? ce(\"select\") : ce(\"input\");\r\n        if (isSelect) {\r\n            if (!Array.isArray(column.filterList)) {\r\n                // Gets unique values from column records\r\n                const uniqueValues = [...new Set((this.data ?? []).map((e) => e[column.field]))]\r\n                    .filter((v) => v)\r\n                    .sort();\r\n                column.filterList = [column.firstFilterOption || this.defaultColumn.firstFilterOption].concat(\r\n                    uniqueValues.map((e) => ({ value: e, text: e })),\r\n                );\r\n            }\r\n\r\n            for (const e of column.filterList) {\r\n                const opt = ce(\"option\");\r\n                opt.value = e.value;\r\n                opt.text = e.text;\r\n\r\n                if (filter instanceof HTMLSelectElement) {\r\n                    filter.add(opt);\r\n                }\r\n            }\r\n        } else {\r\n            //@ts-ignore\r\n            filter.type = \"text\";\r\n            filter.inputMode = \"search\";\r\n            filter.autocomplete = \"off\";\r\n            filter.spellcheck = false;\r\n        }\r\n        // Allows binding filter to this column\r\n        filter.dataset.name = column.field;\r\n        filter.id = randstr(\"dg-filter-\");\r\n        // Don't use aria-label as it triggers autocomplete\r\n        filter.setAttribute(\"aria-labelledby\", relatedTh.getAttribute(\"id\"));\r\n        return filter;\r\n    }\r\n\r\n    /**\r\n     * Render the data as rows in tbody\r\n     * It will call paginate() at the end\r\n     */\r\n    renderBody() {\r\n        this.log(\"render body\");\r\n        let tr;\r\n        let td;\r\n        let idx;\r\n        const tbody = ce(\"tbody\");\r\n\r\n        this.data.forEach((item, i) => {\r\n            tr = ce(\"tr\");\r\n            setAttribute(tr, \"role\", \"row\");\r\n            setAttribute(tr, \"hidden\", \"\");\r\n            setAttribute(tr, \"aria-rowindex\", i + 1);\r\n            tr.tabIndex = 0;\r\n\r\n            if (this.options.selectable && this.plugins.SelectableRows) {\r\n                this.plugins.SelectableRows.createDataCol(tr);\r\n            }\r\n            if (\r\n                this.options.responsive &&\r\n                this.plugins.ResponsiveGrid &&\r\n                this.plugins.ResponsiveGrid.hasHiddenColumns()\r\n            ) {\r\n                this.plugins.ResponsiveGrid.createDataCol(tr);\r\n            }\r\n\r\n            // Expandable\r\n            if (this.options.expand) {\r\n                tr.classList.add(\"dg-expandable\");\r\n\r\n                on(tr, \"click\", (ev) => {\n                    if (ev.target.matches(this._excludedRowElementSelector)) return;\r\n                    if (this.plugins.ResponsiveGrid) {\r\n                        this.plugins.ResponsiveGrid.blockObserver();\r\n                    }\r\n                    toggleClass(ev.currentTarget, \"dg-expanded\");\r\n                    if (this.plugins.ResponsiveGrid) {\r\n                        this.plugins.ResponsiveGrid.unblockObserver();\r\n                    }\r\n                });\r\n            }\r\n\r\n            idx = 0;\r\n\r\n            for (const column of this.options.columns) {\r\n                if (!column) {\r\n                    console.error(\"Empty column found!\", this.options.columns);\r\n                }\r\n                // It should be applied as an attr of the row\r\n                if (column.attr) {\r\n                    if (item[column.field]) {\r\n                        // Special case if we try to write over the class attr\r\n                        if (column.attr === \"class\") {\r\n                            addClass(tr, item[column.field]);\r\n                        } else {\r\n                            tr.setAttribute(column.attr, item[column.field]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                td = ce(\"td\");\r\n                td.setAttribute(\"role\", \"gridcell\");\r\n                td.setAttribute(\"aria-colindex\", `${idx}${this.startColIndex()}`);\r\n                applyColumnDefinition(td, column);\r\n                // This is required for pure css responsive layout\r\n                td.setAttribute(\"data-name\", column.title);\r\n                td.tabIndex = -1;\r\n\r\n                // Inline editing ...\r\n                if (column.editable && this.plugins.EditableColumn) {\r\n                    addClass(td, \"dg-editable-col\");\r\n                    this.plugins.EditableColumn.makeEditableInput(td, column, item, i);\r\n                } else {\r\n                    // ... or formatting\r\n                    const v = item[column.field] ?? \"\";\r\n                    let tv;\r\n                    // TODO: make this modular\r\n                    switch (column.transform) {\r\n                        case \"uppercase\":\r\n                            tv = v.toUpperCase();\r\n                            break;\r\n                        case \"lowercase\":\r\n                            tv = v.toLowerCase();\r\n                            break;\r\n                        default:\r\n                            tv = v;\r\n                            break;\r\n                    }\r\n                    if (column.format) {\r\n                        // Only use formatting with values or if defaultFormatValue is set\r\n                        if (column.defaultFormatValue !== undefined && (tv === \"\" || tv === null)) {\r\n                            tv = `${column.defaultFormatValue}`;\r\n                        }\r\n                        if (typeof column.format === \"string\" && tv) {\r\n                            td.innerHTML = interpolate(\r\n                                // @ts-ignore\r\n                                column.format,\r\n                                Object.assign(\r\n                                    {\r\n                                        _v: v,\r\n                                        _tv: tv,\r\n                                    },\r\n                                    item,\r\n                                ),\r\n                            );\r\n                        } else if (column.format instanceof Function) {\r\n                            const val = column.format.call(this, { column, rowData: item, cellData: tv, td, tr });\r\n                            td.innerHTML = val || tv || v;\r\n                        }\r\n                    } else {\r\n                        td.textContent = tv;\r\n                    }\r\n                }\r\n                tr.appendChild(td);\r\n                idx++;\r\n            }\r\n\r\n            // Actions\r\n            if (this.options.actions.length && this.plugins.RowActions) {\r\n                this.plugins.RowActions.makeActionRow(tr, item);\r\n            }\r\n\r\n            tbody.appendChild(tr);\r\n\n            dispatch(this, \"rowRendered\", { rowData: item, tr });\r\n        });\r\n\r\n        tbody.setAttribute(\"role\", \"rowgroup\");\r\n\r\n        // Keep data empty message\r\n        const prev = this.tbody;\r\n        prev && tbody.setAttribute(\"data-empty\", prev.getAttribute(\"data-empty\"));\r\n        this.table?.replaceChild(tbody, prev);\r\n\r\n        if (this.plugins.FixedHeight) {\r\n            this.plugins.FixedHeight.createFakeRow();\r\n        }\r\n\r\n        this.paginate();\r\n\r\n        if (this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.shouldSelectAll(tbody);\r\n        }\r\n\r\n        this.classList.toggle(\"dg-empty\", !this.data.length);\r\n\r\n        dispatch(this, \"bodyRendered\");\r\n    }\r\n\r\n    paginate() {\r\n        this.log(\"paginate\");\r\n\r\n        const total = this.totalRecords();\r\n        const p = this.page || 1;\r\n        const tbody = this.tbody;\r\n        const tfoot = this.tfoot;\r\n        if (!tbody || !tfoot) return;\n        const bodyRows = findAll(tbody, \"tr\");\r\n\r\n        // Refresh page count in case we added/removed a page\r\n        this.pages = this.totalPages();\r\n\r\n        let index;\r\n        let high = p * this.options.perPage;\r\n        let low = high - this.options.perPage + 1;\r\n\r\n        if (high > total) {\r\n            high = total;\r\n        }\r\n        if (!total) {\r\n            low = 0;\r\n        }\r\n\r\n        // Display all rows within the set indexes\r\n        // For server side paginated grids, we display everything\r\n        // since the server is taking care of actual pagination\r\n        for (const tr of bodyRows) {\r\n            if (this.options.server) {\r\n                removeAttribute(tr, \"hidden\");\r\n                continue;\r\n            }\r\n            index = Number(getAttribute(tr, \"aria-rowindex\"));\r\n            if (index > high || index < low) {\r\n                setAttribute(tr, \"hidden\", \"\");\r\n            } else {\r\n                removeAttribute(tr, \"hidden\");\r\n            }\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.clearCheckboxes(tbody);\r\n        }\r\n\r\n        // Store default height and update styles if needed\r\n        if (this.plugins.FixedHeight) {\r\n            this.plugins.FixedHeight.updateFakeRow();\r\n        }\r\n\r\n        // Enable/disable buttons if shown\r\n        if (this.btnFirst) {\r\n            this.btnFirst.disabled = this.page <= 1;\r\n            this.btnPrev.disabled = this.page <= 1;\r\n            this.btnNext.disabled = this.page >= this.pages;\r\n            this.btnLast.disabled = this.page >= this.pages;\r\n        }\r\n        tfoot.querySelector(\".dg-low\").textContent = low.toString();\r\n        tfoot.querySelector(\".dg-high\").textContent = high.toString();\r\n        tfoot.querySelector(\".dg-total\").textContent = `${this.totalRecords()}`;\r\n        tfoot.toggleAttribute(\"hidden\", this.options.autohidePager && this.options.perPage > this.totalRecords());\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    totalPages() {\r\n        return Math.ceil(this.totalRecords() / this.options.perPage);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    totalRecords() {\r\n        if (this.options.server) {\r\n            return this.meta?.[this.options.serverParams.metaFilteredKey] || 0;\r\n        }\r\n        return this.data.length;\r\n    }\r\n}\r\n\r\nexport default DataGrid;\r\n", "/** @typedef {import(\"../data-grid\").default} DataGrid */\r\n\r\nclass BasePlugin {\r\n    /**\r\n     * @param {DataGrid} grid\r\n     */\r\n    constructor(grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    connected() {}\r\n\r\n    disconnected() {}\r\n\r\n    /**\r\n     * Handle events within the plugin\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\r\n     * @param {Event} event\r\n     */\r\n    handleEvent(event) {\r\n        if (this[`on${event.type}`]) {\r\n            this[`on${event.type}`](event);\r\n        }\r\n    }\r\n}\r\n\r\nexport default BasePlugin;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport elementOffset from \"../utils/elementOffset.js\";\r\nimport {\r\n    addClass,\r\n    dispatch,\r\n    findAll,\r\n    getAttribute,\r\n    hasClass,\r\n    off,\r\n    on,\r\n    removeAttribute,\r\n    removeClass,\r\n    setAttribute,\r\n} from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to resize columns\r\n */\r\nclass ColumnResizer extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.isResizing = false;\r\n    }\r\n\r\n    /**\r\n     * @param {String} resizeLabel\r\n     */\r\n    renderResizer(resizeLabel) {\r\n        const grid = this.grid;\r\n        const table = grid.table;\r\n        const cols = findAll(grid, \"thead tr.dg-head-columns th\");\r\n\r\n        for (const col of cols) {\r\n            if (hasClass(col, \"dg-not-resizable\")) {\r\n                continue;\r\n            }\r\n            // Create a resizer element\r\n            const resizer = document.createElement(\"div\");\r\n            addClass(resizer, \"dg-resizer\");\r\n            resizer.ariaLabel = resizeLabel;\r\n\r\n            // Add a resizer element to the column\r\n            col.appendChild(resizer);\r\n\r\n            // Handle resizing\r\n            let startX = 0;\r\n            let startW = 0;\r\n            let remainingSpace = 0;\r\n            let max = 0;\r\n\r\n            const mouseMoveHandler = (e) => {\r\n                if (e.clientX > max) {\r\n                    return;\r\n                }\r\n                const newWidth = startW + (e.clientX - startX);\r\n                if (col.dataset.minWidth && newWidth > Number.parseInt(col.dataset.minWidth)) {\r\n                    setAttribute(col, \"width\", newWidth);\r\n                }\r\n            };\r\n\r\n            // When user releases the mouse, remove the existing event listeners\r\n            const mouseUpHandler = () => {\r\n                grid.log(\"resized column\");\r\n\r\n                // Prevent accidental sorting if mouse is not over resize handler\r\n                setTimeout(() => {\r\n                    this.isResizing = false;\r\n                }, 0);\r\n\r\n                removeClass(resizer, \"dg-resizer-active\");\r\n                if (grid.options.reorder) {\r\n                    col.draggable = true;\r\n                }\r\n                col.style.overflow = \"hidden\";\r\n\r\n                // Remove handlers\r\n                off(document, \"mousemove\", mouseMoveHandler);\r\n                off(document, \"mouseup\", mouseUpHandler);\r\n\r\n                dispatch(grid, \"columnResized\", {\r\n                    col: getAttribute(col, \"field\"),\r\n                    width: getAttribute(col, \"width\"),\r\n                });\r\n            };\r\n\r\n            // Otherwise it could sort the col\r\n            on(resizer, \"click\", (e) => {\r\n                e.stopPropagation();\r\n            });\r\n\r\n            on(resizer, \"mousedown\", (e) => {\r\n                e.stopPropagation();\r\n\r\n                this.isResizing = true;\r\n\r\n                const target = e.target;\r\n                const currentCols = findAll(grid, \"dg-head-columns th\");\r\n                const visibleCols = currentCols.filter((col) => {\r\n                    return !col.hasAttribute(\"hidden\");\r\n                });\r\n                const columnIndex = visibleCols.findIndex((column) => column === target.parentNode);\r\n                grid.log(\"resize column\");\r\n\r\n                addClass(resizer, \"dg-resizer-active\");\r\n\r\n                // Make sure we don't drag it\r\n                removeAttribute(col, \"draggable\");\r\n\r\n                // Allow overflow when resizing\r\n                col.style.overflow = \"visible\";\r\n\r\n                // Show full column height (-1 to avoid scrollbar)\r\n                resizer.style.height = `${table.offsetHeight - 1}px`;\r\n\r\n                // Register initial data\r\n                startX = e.clientX;\r\n                startW = col.offsetWidth;\r\n\r\n                remainingSpace = (visibleCols.length - columnIndex) * 30;\r\n                max = elementOffset(target).left + grid.offsetWidth - remainingSpace;\r\n\r\n                // Remove width from next columns to allow auto layout\r\n                setAttribute(col, \"width\", startW);\r\n                for (let j = 0; j < visibleCols.length; j++) {\r\n                    if (j > columnIndex) {\r\n                        removeAttribute(cols[j], \"width\");\r\n                    }\r\n                }\r\n\r\n                // Attach handlers\r\n                on(document, \"mousemove\", mouseMoveHandler);\r\n                on(document, \"mouseup\", mouseUpHandler);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ColumnResizer;\r\n", "/**\r\n * @param {HTMLElement} el\r\n * @param {String} type\r\n * @param {String} prop\r\n * @returns {HTMLElement}\r\n */\r\nexport default function getParentElement(el, type, prop = \"nodeName\") {\r\n    let parent = el;\r\n    while (parent[prop] !== type) {\r\n        parent = parent.parentElement;\r\n    }\r\n    return parent;\r\n}\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getParentElement from \"../utils/getParentElement.js\";\r\nimport { find, off, on, removeAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Create a right click menu on the headers\r\n */\r\nclass ContextMenu extends BasePlugin {\r\n    connected() {\r\n        /**\r\n         * @type {HTMLUListElement}\r\n         */\r\n        this.menu = this.grid.querySelector(\".dg-menu\");\r\n    }\r\n    disconnected() {\r\n        if (this.grid.headerRow) {\r\n            off(this.grid.headerRow, \"contextmenu\", this);\r\n        }\r\n    }\r\n\r\n    attachContextMenu() {\r\n        const grid = this.grid;\r\n        on(grid.headerRow, \"contextmenu\", this);\r\n    }\r\n\r\n    onchange(e) {\r\n        const grid = this.grid;\r\n        const t = e.target;\r\n        const field = t.dataset.name;\r\n        if (t.checked) {\r\n            grid.showColumn(field);\r\n        } else {\r\n            // Prevent hidding last\r\n            if (grid.visibleColumns().length <= 1) {\r\n                // Restore checkbox value\r\n                t.checked = true;\r\n                return;\r\n            }\r\n            grid.hideColumn(field);\r\n        }\r\n        grid.fixPage(); //fixes Chrome footer flexbox resize issues that may appear when there is a large number of columns (i.e. more than 10).\r\n    }\r\n\r\n    oncontextmenu(e) {\r\n        e.preventDefault();\r\n        const grid = this.grid;\r\n        const target = getParentElement(e.target, \"THEAD\");\r\n        const menu = this.menu;\r\n        const rect = target.getBoundingClientRect();\r\n        let x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        menu.style.top = `${y}px`;\r\n        menu.style.left = `${x}px`;\r\n\r\n        removeAttribute(menu, \"hidden\");\r\n        if (x + 150 > rect.width) {\r\n            x -= menu.offsetWidth;\r\n            menu.style.left = `${x}px`;\r\n        }\r\n\r\n        const documentClickHandler = (e) => {\r\n            if (!menu.contains(e.target)) {\r\n                setAttribute(menu, \"hidden\", \"\");\r\n                off(document, \"click\", documentClickHandler);\r\n            }\r\n        };\r\n        on(document, \"click\", documentClickHandler);\r\n    }\r\n    createMenu() {\r\n        const grid = this.grid;\r\n        const menu = this.menu;\r\n        while (menu.lastChild) {\r\n            menu.removeChild(menu.lastChild);\r\n        }\r\n        menu.addEventListener(\"change\", this);\r\n\r\n        for (const col of grid.options.columns) {\r\n            if (col.attr) {\r\n                continue;\r\n            }\r\n            const li = document.createElement(\"li\");\r\n            const label = document.createElement(\"label\");\r\n            const checkbox = document.createElement(\"input\");\r\n            setAttribute(checkbox, \"type\", \"checkbox\");\r\n            setAttribute(checkbox, \"data-name\", col.field);\r\n            if (!col.hidden) {\r\n                checkbox.checked = true;\r\n            }\r\n            const text = document.createTextNode(col.title);\r\n\r\n            label.appendChild(checkbox);\r\n            label.appendChild(text);\r\n\r\n            li.appendChild(label);\r\n            menu.appendChild(li);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ContextMenu;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getParentElement from \"../utils/getParentElement.js\";\r\nimport { dispatch, findAll, getAttribute, on, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to move headers\r\n */\r\nclass DraggableHeaders extends BasePlugin {\r\n    /**\r\n     * @param {HTMLTableCellElement} th\r\n     */\r\n    makeHeaderDraggable(th) {\r\n        const grid = this.grid;\r\n        th.draggable = true;\r\n        on(th, \"dragstart\", (e) => {\r\n            if (grid.plugins.ColumnResizer?.isResizing && e.preventDefault) {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            grid.log(\"reorder col\");\r\n            e.dataTransfer.effectAllowed = \"move\";\r\n            e.dataTransfer.setData(\"text/plain\", e.target.getAttribute(\"aria-colindex\"));\r\n        });\r\n        on(th, \"dragover\", (e) => {\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.dataTransfer.dropEffect = \"move\";\r\n            return false;\r\n        });\r\n        on(th, \"drop\", (e) => {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            const t = e.target;\r\n            const target = getParentElement(t, \"TH\");\r\n            const index = Number.parseInt(e.dataTransfer.getData(\"text/plain\"));\r\n            const targetIndex = Number.parseInt(target.getAttribute(\"aria-colindex\"));\r\n\r\n            if (index === targetIndex) {\r\n                grid.log(\"reordered col stayed the same\");\r\n                return;\r\n            }\r\n            grid.log(`reordered col from ${index} to ${targetIndex}`);\r\n\r\n            const offset = grid.startColIndex();\r\n            const tmp = grid.options.columns[index - offset];\r\n            grid.options.columns[index - offset] = grid.options.columns[targetIndex - offset];\r\n            grid.options.columns[targetIndex - offset] = tmp;\r\n\r\n            const swapNodes = (selector, el1) => {\r\n                const rowIndex = el1.parentNode.getAttribute(\"aria-rowindex\");\r\n                const el2 = grid.querySelector(\r\n                    `${selector} tr[aria-rowindex=\"${rowIndex}\"] [aria-colindex=\"${targetIndex}\"]`,\r\n                );\r\n                setAttribute(el1, \"aria-colindex\", targetIndex);\r\n                setAttribute(el2, \"aria-colindex\", index);\r\n                const newNode = document.createElement(\"th\");\r\n                el1.parentNode.insertBefore(newNode, el1);\r\n                el2.parentNode.replaceChild(el1, el2);\r\n                newNode.parentNode.replaceChild(el2, newNode);\r\n            };\r\n\r\n            // Swap all rows in header and body\r\n            for (const el1 of findAll(grid, `thead th[aria-colindex=\"${index}\"]`)) {\r\n                swapNodes(\"thead\", el1);\r\n            }\r\n            for (const el1 of findAll(grid, `tbody td[aria-colindex=\"${index}\"]`)) {\r\n                swapNodes(\"tbody\", el1);\r\n            }\r\n\r\n            // Updates the columns\r\n            grid.options.columns = findAll(grid, \"thead tr.dg-head-columns th[field]\").map((th) =>\r\n                grid.options.columns.find((c) => c.field === getAttribute(th, \"field\")),\r\n            );\r\n\r\n            dispatch(grid, \"columnReordered\", {\r\n                col: tmp.field,\r\n                from: index,\r\n                to: targetIndex,\r\n            });\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default DraggableHeaders;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\n\r\n/**\r\n * Allows to paginate with horizontal swipe motions\r\n */\r\nclass TouchSupport extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.touch = null;\r\n    }\r\n    connected() {\r\n        const grid = this.grid;\r\n        grid.addEventListener(\"touchstart\", this, { passive: true });\r\n        grid.addEventListener(\"touchmove\", this, { passive: true });\r\n    }\r\n\r\n    disconnected() {\r\n        const grid = this.grid;\r\n        grid.removeEventListener(\"touchstart\", this);\r\n        grid.removeEventListener(\"touchmove\", this);\r\n    }\r\n\r\n    ontouchstart(e) {\r\n        this.touch = e.touches[0];\r\n    }\r\n\r\n    ontouchmove(e) {\r\n        if (!this.touch) {\r\n            return;\r\n        }\r\n        const grid = this.grid;\r\n        const xDiff = this.touch.clientX - e.touches[0].clientX;\r\n        const yDiff = this.touch.clientY - e.touches[0].clientY;\r\n\r\n        if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n            if (xDiff > 0) {\r\n                grid.getNext();\r\n            } else {\r\n                grid.getPrev();\r\n            }\r\n        }\r\n        this.touch = null;\r\n    }\r\n}\r\n\r\nexport default TouchSupport;\r\n", "// @ts-nocheck\r\nimport BasePlugin from \"../core/base-plugin.js\";\r\nimport { dispatch, findAll, hasClass, setAttribute, $, $$ } from \"../utils/shortcuts.js\";\r\n\r\nconst SELECTABLE_CLASS = \"dg-selectable\";\r\nconst SELECT_ALL_CLASS = \"dg-select-all\";\r\nconst CHECKBOX_CLASS = \"form-check-input\"; //bs5\n\r\n/**\r\n * Allows to select rows\r\n */\r\nclass SelectableRows extends BasePlugin {\n    #cbSelector = `tbody tr${this.visibleOnly ? \":not([hidden])\" : \"\"} .${SELECTABLE_CLASS} input[type=checkbox]`;\n    #inputSelector = `tbody .${SELECTABLE_CLASS} input`;\n\r\n    disconnected() {\r\n        if (this.selectAll) {\r\n            this.selectAll.removeEventListener(\"change\", this);\r\n        }\r\n    }\n\n    get isSingleSelect() {\n        return this.grid.options.singleSelect;\n    }\n\n    get visibleOnly() {\n        return this.grid.options.selectVisibleOnly;\n    }\n\r\n    /**\n     * Get selected rows or fields.\n     * Returns full rows, a single field's values, or objects with specified fields.\n     * In single select mode, returns a single item.\n     * @param {...string} keys Field names to select.\n     * @returns {Array|Object} Selected data.\n     */\n    getSelection(...keys) {\n        const grid = this.grid;\n        const selectedData = [];\n\n        const inputs = findAll(grid, `${this.#inputSelector}:checked`);\n\n        for (const checkbox of inputs) {\n            const idx = Number.parseInt(checkbox.dataset.id);\n            const item = grid.data[idx - 1];\n            if (!item) {\n                console.warn(`Item ${idx} not found`);\n                continue;\n            }\n            if (keys.length === 0) {\n                selectedData.push(item);\n            } else if (keys.length === 1) {\n                selectedData.push(item[keys[0]]);\n            } else {\n                selectedData.push(Object.fromEntries(keys.map(k => [k, item[k]])));\n            }\n        }\n        return this.isSingleSelect ? selectedData[0] ?? {} : selectedData;\n    }\r\n\r\n    /**\r\n     * Uncheck box if hidden and visible only\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\r\n    clearCheckboxes(tbody) {\r\n        const grid = this.grid;\r\n        if (!grid.options.selectVisibleOnly) {\r\n            return;\r\n        }\r\n        const inputs = findAll(tbody, `tr[hidden] .${SELECTABLE_CLASS} input`);\r\n        for (const input of inputs) {\r\n            input.checked = false;\n            if (this.isSingleSelect) {\n                input.dataset.toggled = \"false\"; // Reset toggled state for radio buttons\n            }\r\n        }\r\n        this.selectAll.checked = false;\n    }\r\n\r\n    colIndex() {\r\n        return this.grid.startColIndex() - 2;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createHeaderCol(tr) {\r\n        const th = document.createElement(\"th\");\r\n        setAttribute(th, \"scope\", \"col\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(...[SELECTABLE_CLASS, \"dg-not-resizable\", \"dg-not-sortable\"]);\r\n        th.tabIndex = 0;\r\n\n        this.selectAll = document.createElement(\"input\");\r\n        this.selectAll.type = \"checkbox\";\r\n        this.selectAll.classList.add(SELECT_ALL_CLASS);\r\n        this.selectAll.classList.add(CHECKBOX_CLASS);\r\n        this.selectAll.addEventListener(\"change\", this);\r\n\r\n        const label = document.createElement(\"label\");\n        label.hidden = this.isSingleSelect;\r\n        label.appendChild(this.selectAll);\r\n\r\n        th.appendChild(label);\n\r\n        th.setAttribute(\"width\", \"40\");\r\n        tr.appendChild(th);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createFilterCol(tr) {\r\n        const th = document.createElement(\"th\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(SELECTABLE_CLASS);\r\n        th.tabIndex = 0;\r\n\r\n        tr.appendChild(th);\r\n    }\r\n\r\n    /**\r\n     * Handles the selectAll checkbox when any other .dg-selectable checkbox is checked on table body.\r\n     * It should check selectAll if all is checked\r\n     * It should uncheck selectAll if any is unchecked\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\r\n    shouldSelectAll(tbody) {\r\n        if (!this.selectAll) {\r\n            return;\r\n        }\r\n        // Delegate listener for change events on input checkboxes\r\n        tbody.addEventListener(\"change\", this);\r\n        // Make sure state is up to date\r\n        tbody.dispatchEvent(new Event(\"change\"));\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createDataCol(tr) {\r\n        // Create col\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell button\");\r\n        setAttribute(td, \"aria-colindex\", this.colIndex());\r\n        td.classList.add(SELECTABLE_CLASS);\r\n\r\n        // Create input\r\n        const input = document.createElement(\"input\");\r\n        // Alias row id for easy retrieval in getSelection\r\n        input.dataset.id = tr.getAttribute(\"aria-rowindex\");\r\n        input.type = this.isSingleSelect ? \"radio\" : \"checkbox\";\r\n        input.classList.add(CHECKBOX_CLASS);\n        if (this.isSingleSelect) {\n            input.name = \"dg-row-select\";\n            input.dataset.toggled = \"false\";\n        }\n\r\n        // Label need to take full space thanks to css to make the whole cell clickable\r\n        const label = document.createElement(\"label\");\r\n        label.classList.add(\"dg-clickable-cell\");\n\r\n        label.appendChild(input);\r\n        td.appendChild(label);\r\n\r\n        // Prevent unwanted click behaviour on row\r\n        label.addEventListener(\"click\", this);\r\n\r\n        tr.appendChild(td);\r\n    }\r\n\r\n    /**\r\n     * @param {Event} e\r\n     */\r\n    onclick(e) {\n        if (!this.isSingleSelect) return e.stopPropagation();\n\n        // Implements radio button toggle behaviour for selecting and unselecting a row\n        const el = e.target,\n            unchecked = el.dataset.toggled !== \"true\";\n        unchecked && $$(`${this.#cbSelector.replace(\"checkbox\", \"radio\")}`, this.grid)?.forEach(r => {\n            // Uncheck all other radios in the same group and reset their data-toggled\n            if (r.name === el.name && r !== el) r.checked = r.dataset.toggled = false;\n        });\r\n        el.checked = el.dataset.toggled = unchecked;\n        !unchecked && this.onchange(e); // Fires rowsSelected event\r\n    }\r\n\r\n    /**\r\n     * Handle change event on select all or any select checkbox in the table body\r\n     * @param {import(\"../utils/shortcuts.js\").FlexibleEvent} e\r\n     */\r\n    onchange(e) {\n        const el = e.target, grid = this.grid;\n        if (hasClass(e.target, SELECT_ALL_CLASS)) {\n            findAll(grid, this.#inputSelector).forEach(cb => {\n                if (!this.visibleOnly || cb.offsetWidth) cb.checked = this.selectAll.checked;\n            });\n        } else if (el.matches(this.#cbSelector)) {\n            if (!el.closest(`.${SELECTABLE_CLASS}`)) return;\n            const totalCheckboxes = findAll(grid, this.#cbSelector);\n            this.selectAll.checked = totalCheckboxes.every(n => n.checked);\n        }\n        if (el.matches(`.${SELECT_ALL_CLASS},${this.#inputSelector}`)) {\r\n            dispatch(el, \"rowsSelected\", {\r\n                selection: grid.getSelection()\n            }, true);\r\n        }\n    }\r\n}\r\n\r\nexport default SelectableRows;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Support for fixed table height\r\n *\r\n * We should add a fake row to push the footer down in case we don't have enough rows\r\n */\r\nclass FixedHeight extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n\r\n        this.hasFixedHeight = false;\r\n        // If we have a fixed height, make sure we have overflowY set\r\n        if (grid.style.height) {\r\n            grid.style.overflowY = \"auto\";\r\n            this.hasFixedHeight = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n    createFakeRow() {\r\n        const grid = this.grid;\r\n        const tbody = grid.querySelector(\"tbody\");\r\n        const tr = document.createElement(\"tr\");\r\n        setAttribute(tr, \"role\", \"row\");\r\n        setAttribute(tr, \"hidden\", \"\");\r\n        tr.classList.add(\"dg-fake-row\");\r\n        tr.tabIndex = 0;\r\n        tbody?.appendChild(tr);\r\n    }\r\n\r\n    get fakeRow() {\r\n        return this.grid.querySelector(\".dg-fake-row\");\r\n    }\r\n\r\n    /**\r\n     * On last page, use a fake row to push footer down\r\n     */\r\n    updateFakeRow() {\r\n        const grid = this.grid;\r\n        const fakeRow = this.fakeRow;\r\n        if (!fakeRow) {\r\n            return;\r\n        }\r\n\r\n        // We don't need a fake row if we display everything\r\n        if (grid.options.perPage > grid.totalRecords()) {\r\n            return;\r\n        }\r\n        // We are not on last page\r\n        if (grid.page !== grid.totalPages()) {\r\n            return;\r\n        }\r\n        if (!grid.options.autoheight) {\r\n            return;\r\n        }\r\n        // Find remaining missing height\r\n        const max = grid.options.perPage * grid.rowHeight;\r\n        const visibleRows = grid.querySelectorAll(\"tbody tr:not([hidden])\").length;\r\n        const fakeHeight = visibleRows > 1 ? max - visibleRows * grid.rowHeight : max;\r\n        if (fakeHeight > 0) {\r\n            setAttribute(fakeRow, \"height\", fakeHeight);\r\n            fakeRow.removeAttribute(\"hidden\");\r\n        } else {\r\n            fakeRow.removeAttribute(\"height\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default FixedHeight;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getTextWidth from \"../utils/getTextWidth.js\";\r\nimport { getAttribute, hasAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to resize columns\r\n */\r\nclass AutosizeColumn extends BasePlugin {\r\n    /**\r\n     * Autosize col based on column data\r\n     * @param {HTMLTableCellElement} th\r\n     * @param {import(\"../data-grid\").Column} column\r\n     * @param {Number} min\r\n     * @param {Number} max\r\n     * @returns {Number}\r\n     */\r\n    computeSize(th, column, min, max) {\r\n        const grid = this.grid;\r\n        if (hasAttribute(th, \"width\")) {\r\n            return getAttribute(th, \"width\");\r\n        }\r\n        if (!grid.data.length) {\r\n            return;\r\n        }\r\n        const firstVal = grid.data[0];\r\n        const lastVal = grid.data[grid.data.length - 1];\r\n        let v = firstVal[column.field] ? firstVal[column.field].toString() : \"\";\r\n        const v2 = lastVal[column.field] ? lastVal[column.field].toString() : \"\";\r\n        if (v2.length > v.length) {\r\n            v = v2;\r\n        }\r\n        let width = 0;\r\n        if (v.length <= 6) {\r\n            width = min;\r\n        } else if (v.length > 50) {\r\n            width = max;\r\n        } else {\r\n            // Add some extra room to have some spare space\r\n            width = getTextWidth(`${v}0000`, th);\r\n        }\r\n        if (width > max) {\r\n            width = max;\r\n        }\r\n        if (width < min) {\r\n            width = min;\r\n        }\r\n        setAttribute(th, \"width\", width);\r\n        return width;\r\n    }\r\n}\r\n\r\nexport default AutosizeColumn;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport debounce from \"../utils/debounce.js\";\r\nimport {\r\n    addClass,\r\n    ce,\r\n    find,\r\n    findAll,\r\n    hasClass,\r\n    insertAfter,\r\n    removeAttribute,\r\n    removeClass,\r\n    setAttribute,\r\n} from \"../utils/shortcuts.js\";\r\n\r\nconst RESPONSIVE_CLASS = \"dg-responsive\";\r\n\r\nlet obsTo;\r\n\r\n/**\r\n * @param {Array<HTMLElement>} list\r\n * @returns {Array<HTMLElement>}\r\n */\r\nfunction sortByPriority(list) {\r\n    return list.sort((a, b) => {\r\n        const v1 = Number.parseInt(a.dataset.responsive) || 1;\r\n        const v2 = Number.parseInt(b.dataset.responsive) || 1;\r\n        return v2 - v1;\r\n    });\r\n}\r\n\r\n/**\r\n * @type {ResizeObserverCallback}\r\n */\r\n//@ts-ignore\r\nconst callback = debounce((entries) => {\r\n    for (const entry of entries) {\r\n        /**\r\n         * @type {import(\"../data-grid\").default}\r\n         */\r\n        // @ts-ignore\r\n        const grid = entry.target;\r\n        const table = grid.table;\r\n        if (grid.plugins.ResponsiveGrid.observerBlocked) {\r\n            return;\r\n        }\r\n        // check inlineSize (width) and not blockSize (height)\r\n        const contentBoxSize = Array.isArray(entry.contentBoxSize) ? entry.contentBoxSize[0] : entry.contentBoxSize;\r\n        const size = Number.parseInt(contentBoxSize.inlineSize);\r\n        const tableWidth = table.offsetWidth;\r\n        const realTableWidth = findAll(grid.headerRow, \"th\").reduce((result, th) => {\r\n            return result + th.offsetWidth;\r\n        }, 0);\r\n        const diff = (realTableWidth || tableWidth) - size - 1;\r\n        const minWidth = 50;\r\n        const prevAction = grid.plugins.ResponsiveGrid.prevAction;\r\n        // We have an array with the columns to show/hide are in order, most important first\r\n        const headerCols = sortByPriority(\r\n            findAll(grid.headerRow, \"th[field]\")\r\n                .reverse() // Order takes precedence if no priority is set\r\n                .filter((col) => {\r\n                    // Leave out unresponsive columns\r\n                    return col.dataset.responsive !== \"0\";\r\n                }),\r\n        );\r\n        let changed = false;\r\n\r\n        grid.log(`table is ${tableWidth}/${realTableWidth} and available size is ${size}. Diff: ${diff}`);\r\n\r\n        // The table is too big when diff has a high value, otherwise it will be like -1 or -2\r\n        if (diff > 0) {\r\n            if (prevAction === \"show\") {\r\n                return;\r\n            }\r\n            grid.plugins.ResponsiveGrid.prevAction = \"hide\";\r\n            let remaining = diff;\r\n            let cols = headerCols.filter((col) => {\r\n                return !col.hasAttribute(\"hidden\") && col.hasAttribute(\"data-responsive\");\r\n            });\r\n            if (cols.length === 0) {\r\n                cols = headerCols.filter((col) => {\r\n                    return !col.hasAttribute(\"hidden\");\r\n                });\r\n                // Always keep one column\r\n                if (cols.length === 1) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (const col of cols) {\r\n                if (remaining < 0) {\r\n                    continue;\r\n                }\r\n\r\n                const colWidth = col.offsetWidth;\r\n                const field = col.getAttribute(\"field\");\r\n                if (!field) {\r\n                    continue;\r\n                }\r\n                col.dataset.baseWidth = `${col.offsetWidth}`;\r\n\r\n                grid.hideColumn(field, false);\r\n                grid.setColProp(field, \"responsiveHidden\", true);\r\n                changed = true;\r\n\r\n                remaining -= colWidth;\r\n                remaining = Math.round(remaining);\r\n            }\r\n        } else {\r\n            if (prevAction === \"hide\") {\r\n                return;\r\n            }\r\n            grid.plugins.ResponsiveGrid.prevAction = \"show\";\r\n\r\n            const requiredWidth =\r\n                headerCols\r\n                    .filter((col) => {\r\n                        return !col.hasAttribute(\"hidden\");\r\n                    })\r\n                    .reduce((result, col) => {\r\n                        const width = col.dataset.minWidth ? Number.parseInt(col.dataset.minWidth) : col.offsetWidth;\r\n                        return result + width;\r\n                    }, 0) + minWidth; // Add an offset so that inserting column is smoother\r\n\r\n            // Compute available width to insert columns\r\n            let remaining = size - requiredWidth;\r\n            // Do we have any hidden column that we can restore ?\r\n            const filteredHeaderCols = headerCols\r\n                .slice()\r\n                .reverse() // Reverse the array to restore the columns in the proper order\r\n                .filter((col) => {\r\n                    return col.hasAttribute(\"hidden\");\r\n                });\r\n\r\n            for (const col of filteredHeaderCols) {\r\n                if (remaining < minWidth) {\r\n                    continue;\r\n                }\r\n                const colWidth = Number.parseInt(col.dataset.minWidth);\r\n\r\n                // We need to have enough space to restore it\r\n                if (colWidth > remaining) {\r\n                    remaining = -1; // break loop to keep restoring in order\r\n                    continue;\r\n                }\r\n\r\n                const field = col.getAttribute(\"field\");\r\n                if (!field) {\r\n                    continue;\r\n                }\r\n\r\n                grid.showColumn(field, false);\r\n                grid.setColProp(field, \"responsiveHidden\", false);\r\n                changed = true;\r\n\r\n                remaining -= colWidth;\r\n                remaining = Math.round(remaining);\r\n            }\r\n        }\r\n\r\n        // Check footer\r\n        const footer = find(grid.table, \"tfoot\");\r\n        const realFooterWidth = findAll(grid.table, \".dg-footer > div\").reduce((result, div) => {\r\n            return result + div.offsetWidth;\r\n        }, 0);\r\n        const availableFooterWidth = footer.offsetWidth - realFooterWidth;\r\n        if (realFooterWidth > size) {\r\n            addClass(footer, \"dg-footer-compact\");\r\n        } else if (availableFooterWidth > 250) {\r\n            removeClass(footer, \"dg-footer-compact\");\r\n        }\r\n        if (changed) {\r\n            grid.renderTable();\r\n        }\r\n        // Prevent resize loop\r\n        setTimeout(() => {\r\n            grid.plugins.ResponsiveGrid.prevAction = null;\r\n        }, 1000);\r\n        grid.table.style.visibility = \"visible\";\r\n    }\r\n}, 100);\r\nconst resizeObserver = new ResizeObserver(callback);\r\n\r\n/**\r\n * Responsive data grid\r\n */\r\nclass ResponsiveGrid extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n\r\n        this.observerBlocked = false;\r\n        this.prevAction = null;\r\n    }\r\n\r\n    connected() {\r\n        if (this.grid.options.responsive) {\r\n            this.observe();\r\n        }\r\n    }\r\n\r\n    disconnected() {\r\n        this.unobserve();\r\n    }\r\n\r\n    observe() {\r\n        if (!this.grid.options.responsive) {\r\n            return;\r\n        }\r\n        resizeObserver.observe(this.grid);\r\n        this.grid.style.display = \"block\"; // Otherwise resize doesn't happen\r\n        this.grid.style.overflowX = \"hidden\"; // Prevent scrollbars from appearing\r\n    }\r\n\r\n    unobserve() {\r\n        resizeObserver.unobserve(this.grid);\r\n        this.grid.style.display = \"unset\";\r\n        this.grid.style.overflowX = \"unset\";\r\n    }\r\n\r\n    blockObserver() {\r\n        this.observerBlocked = true;\r\n        if (obsTo) {\r\n            clearTimeout(obsTo);\r\n        }\r\n    }\r\n\r\n    unblockObserver() {\r\n        obsTo = setTimeout(() => {\r\n            this.observerBlocked = false;\r\n        }, 200); // more than debounce\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasHiddenColumns() {\r\n        let flag = false;\r\n\r\n        for (const col of this.grid.options.columns) {\r\n            if (col.responsiveHidden) {\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    colIndex() {\r\n        return this.grid.startColIndex() - 1;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createHeaderCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        const th = ce(\"th\", tr);\r\n        setAttribute(th, \"scope\", \"col\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        setAttribute(th, \"width\", \"40\");\r\n        th.classList.add(...[`${RESPONSIVE_CLASS}-toggle`, \"dg-not-resizable\", \"dg-not-sortable\"]);\r\n        th.tabIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createFilterCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        const th = ce(\"th\", tr);\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(`${RESPONSIVE_CLASS}-toggle`);\r\n        th.tabIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createDataCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        // Create col\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell button\");\r\n        setAttribute(td, \"aria-colindex\", this.colIndex());\r\n        td.classList.add(`${RESPONSIVE_CLASS}-toggle`);\r\n\r\n        // Create icon\r\n        td.innerHTML = `<div class='dg-clickable-cell'><svg class='${RESPONSIVE_CLASS}-open' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\">\r\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n  <line y1=\"7\" x1=\"12\" y2=\"17\" x2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n</svg>\r\n<svg class='${RESPONSIVE_CLASS}-close' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" style=\"display:none\">\r\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n</svg></div>`;\r\n        tr.appendChild(td);\r\n\r\n        td.addEventListener(\"click\", this);\r\n        td.addEventListener(\"mousedown\", this);\r\n    }\r\n\r\n    computeLabelWidth() {\r\n        let idealWidth = 0;\r\n        let consideredCol = 0;\r\n        while (idealWidth < 120) {\r\n            consideredCol++;\r\n            const hCol = find(this.grid, `.dg-head-columns th[aria-colindex=\"${consideredCol}\"]`);\r\n            if (hCol) {\r\n                idealWidth += hCol.offsetWidth;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return idealWidth;\r\n    }\r\n\r\n    /**\r\n     * @param {Event} ev\r\n     */\r\n    onmousedown(ev) {\r\n        // Avoid selection through double click\r\n        ev.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * @param {Event} ev\r\n     */\r\n    onclick(ev) {\r\n        // Prevent expandable\r\n        ev.stopPropagation();\r\n\r\n        // target is the element that triggered the event (e.g., the user clicked on)\r\n        // currentTarget is the element that the event listener is attached to.\r\n\r\n        /**\r\n         * @type {HTMLTableRowElement}\r\n         */\r\n        //@ts-ignore\r\n        const td = ev.currentTarget;\r\n        const tr = td.parentElement;\r\n        const open = find(td, `.${RESPONSIVE_CLASS}-open`);\r\n        const close = find(td, `.${RESPONSIVE_CLASS}-close`);\r\n\r\n        this.blockObserver();\r\n\r\n        const isExpanded = hasClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n        if (isExpanded) {\r\n            removeClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n            open.style.display = \"unset\";\r\n            close.style.display = \"none\";\r\n\r\n            // Move back rows and cleanup row\r\n            const childRow = tr.nextElementSibling;\r\n            const hiddenCols = findAll(childRow, `.${RESPONSIVE_CLASS}-hidden`);\r\n\r\n            for (const col of hiddenCols) {\r\n                // We don't really need to care where we insert them since we are going to redraw anyway\r\n                tr.appendChild(col);\r\n                setAttribute(col, \"hidden\");\r\n            }\r\n\r\n            childRow.parentElement.removeChild(childRow);\r\n        } else {\r\n            addClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n            open.style.display = \"none\";\r\n            close.style.display = \"unset\";\r\n\r\n            // Create a child row and move rows into it\r\n            const childRow = ce(\"tr\");\r\n            insertAfter(childRow, tr);\r\n            addClass(childRow, `${RESPONSIVE_CLASS}-child-row`);\r\n\r\n            const childRowTd = ce(\"td\", childRow);\r\n            setAttribute(childRowTd, \"colspan\", this.grid.columnsLength(true));\r\n\r\n            const childTable = ce(\"table\", childRowTd);\r\n            addClass(childTable, `${RESPONSIVE_CLASS}-table`);\r\n\r\n            const hiddenCols = findAll(tr, `.${RESPONSIVE_CLASS}-hidden`);\r\n            const idealWidth = this.computeLabelWidth();\r\n\r\n            for (const col of hiddenCols) {\r\n                const childTableRow = ce(\"tr\", childTable);\r\n\r\n                // Add label\r\n                const label = col.dataset.name;\r\n                const labelCol = ce(\"th\", childTableRow);\r\n                // It looks much better when aligned with an actual col\r\n                labelCol.style.width = `${idealWidth}px`;\r\n                labelCol.innerHTML = label;\r\n\r\n                // Add actual row\r\n                childTableRow.appendChild(col);\r\n                removeAttribute(col, \"hidden\");\r\n            }\r\n        }\r\n\r\n        this.unblockObserver();\r\n    }\r\n}\r\n\r\nexport default ResponsiveGrid;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport interpolate from \"../utils/interpolate.js\";\r\nimport { dispatch, on, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Add action on rows\r\n */\r\nclass RowActions extends BasePlugin {\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasActions() {\r\n        return this.grid.options.actions.length > 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    makeActionHeader(tr) {\r\n        const actionsTh = document.createElement(\"th\");\r\n        setAttribute(actionsTh, \"role\", \"columnheader button\");\r\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\r\n        actionsTh.classList.add(...[\"dg-actions\", \"dg-not-sortable\", \"dg-not-resizable\", this.actionClass]);\r\n        actionsTh.tabIndex = 0;\r\n        tr.appendChild(actionsTh);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    makeActionFilter(tr) {\r\n        const actionsTh = document.createElement(\"th\");\r\n        actionsTh.setAttribute(\"role\", \"columnheader button\");\r\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\r\n        actionsTh.classList.add(...[\"dg-actions\", this.actionClass]);\r\n        actionsTh.tabIndex = 0;\r\n        tr.appendChild(actionsTh);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     * @param {Object} item\r\n     */\r\n    makeActionRow(tr, item) {\r\n        const labels = this.grid.labels;\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell\");\r\n        setAttribute(td, \"aria-colindex\", this.grid.columnsLength(true));\r\n        td.classList.add(...[\"dg-actions\", this.actionClass]);\r\n        td.tabIndex = 0;\r\n\r\n        // Add menu toggle\r\n        const actionsToggle = document.createElement(\"button\");\r\n        actionsToggle.classList.add(\"dg-actions-toggle\");\r\n        actionsToggle.innerHTML = \"\u2630\";\r\n        td.appendChild(actionsToggle);\r\n        on(actionsToggle, \"click\", (ev) => {\r\n            ev.stopPropagation();\r\n            ev.target.parentElement.classList.toggle(\"dg-actions-expand\");\r\n        });\r\n\r\n        for (const action of this.grid.options.actions) {\r\n            const button = document.createElement(\"button\");\r\n            if (action.html) {\r\n                button.innerHTML = action.html;\r\n            } else {\r\n                button.innerText = action.title ?? action.name;\r\n            }\r\n            if (action.title) {\r\n                button.title = action.title;\r\n            }\r\n            if (action.url) {\r\n                button.type = \"submit\";\r\n                button.formAction = interpolate(action.url, item);\r\n            }\r\n            if (action.class) {\r\n                button.classList.add(...action.class.split(\" \"));\r\n            }\r\n            const actionHandler = (ev) => {\r\n                ev.stopPropagation();\r\n                if (action.confirm) {\r\n                    const c = confirm(labels.areYouSure);\r\n                    if (!c) {\r\n                        ev.preventDefault();\r\n                        return;\r\n                    }\r\n                }\r\n                dispatch(this.grid, \"action\", {\r\n                    data: item,\r\n                    action: action.name,\r\n                });\r\n            };\r\n            button.addEventListener(\"click\", actionHandler);\r\n            td.appendChild(button);\r\n\r\n            // Row action\r\n            if (action.default) {\r\n                tr.classList.add(\"dg-actionable\");\r\n                tr.addEventListener(\"click\", actionHandler);\r\n            }\r\n        }\r\n\r\n        tr.appendChild(td);\r\n    }\r\n\r\n    get actionClass() {\r\n        if (this.grid.options.actions.length < 3 && !this.grid.options.collapseActions) {\r\n            return `dg-actions-${this.grid.options.actions.length}`;\r\n        }\r\n        return \"dg-actions-more\";\r\n    }\r\n}\r\n\r\nexport default RowActions;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { dispatch } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Make editable inputs in rows\r\n */\r\nclass EditableColumn extends BasePlugin {\r\n    /**\r\n     *\r\n     * @param {HTMLTableCellElement} td\r\n     * @param {import(\"../data-grid\").Column} column\r\n     * @param {Object} item\r\n     * @param {number} i\r\n     */\r\n    makeEditableInput(td, column, item, i) {\r\n        const gridId = this.grid.getAttribute(\"id\");\r\n        const input = document.createElement(\"input\");\r\n        input.type = column.editableType || \"text\";\r\n        if (input.type === \"email\") {\r\n            input.inputMode = \"email\";\r\n        }\r\n        if (input.type === \"decimal\") {\r\n            input.type = \"text\";\r\n            input.inputMode = \"decimal\";\r\n        }\r\n        input.autocomplete = \"off\";\r\n        input.spellcheck = false;\r\n        input.tabIndex = 0;\r\n        input.classList.add(\"dg-editable\");\r\n        input.name = `${gridId.replace(\"-\", \"_\")}[${i + 1}][${column.field}]`;\r\n        input.value = item[column.field];\r\n        input.dataset.field = column.field;\r\n\r\n        // Prevent row action\r\n        input.addEventListener(\"click\", (ev) => ev.stopPropagation());\r\n        // Enter validates edit\r\n        input.addEventListener(\"keypress\", (ev) => {\r\n            if (ev.type === \"keypress\") {\r\n                const key = ev.keyCode || ev.key;\r\n                if (key === 13 || key === \"Enter\") {\r\n                    input.blur();\r\n                    ev.preventDefault();\r\n                }\r\n            }\r\n        });\r\n        // Save on blur\r\n        input.addEventListener(\"blur\", () => {\r\n            // Only fire on update\r\n            if (input.value === item[input.dataset.field]) {\r\n                return;\r\n            }\r\n            // Update underlying data\r\n            item[input.dataset.field] = input.value;\r\n            // Notify\r\n            dispatch(this.grid, \"edit\", {\r\n                data: item,\r\n                value: input.value,\r\n            });\r\n        });\r\n        td.appendChild(input);\r\n    }\r\n}\r\n\r\nexport default EditableColumn;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { $ } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Adds an element for showing a spinning icon on grid loading.\r\n */\r\nclass SpinnerSupport extends BasePlugin {\n    connected() {\n        // Inserts spinner\r\n        if (this.grid.options.spinnerClass && this.grid.plugins.SpinnerSupport) {\r\n            this.add();\r\n        }\r\n    }\n\r\n    /**\r\n     * Adds a spinner element with its associated css styles.\r\n     */\r\n    add() {\r\n        const grid = this.grid;\r\n        const classes = grid.options.spinnerClass;\r\n        if (!classes) {\r\n            return;\r\n        }\r\n        const cls = classes\r\n            .split(\" \")\r\n            .map((e) => `.${e}`)\r\n            .join(\"\");\r\n\r\n        const template = `\r\n<style id=\"dg-styles\">\r\n  data-grid ${cls} { position: absolute; top: 37%; left: 47%; z-index: 999; }\r\n  data-grid:not(.dg-loading) ${cls} { display: none; }\r\n  data-grid:not(.dg-initialized).dg-loading ${cls} { top: 0; }\r\n  @media only screen and (max-width: 767px) {\r\n    data-grid[responsive] ${cls} { top: 8rem; left: 42%; }\r\n  }\r\n</style>\r\n`;\r\n        if (!$(\"#dg-styles\")) {\r\n            const styleParent = $(\"head\") ?? $(\"body\");\r\n            const position = /head/i.test(styleParent.tagName) ? \"beforeend\" : \"afterbegin\";\r\n            styleParent.insertAdjacentHTML(position, template);\r\n        }\r\n        !$(`i${cls}`, grid) && grid.insertAdjacentHTML(\"afterbegin\", `<i class=\"${classes}\"></i>`);\r\n    }\r\n}\r\n\r\nexport default SpinnerSupport;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { findAll } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * @typedef GridState\r\n * @property {Object} meta\r\n * @property {Number} pages\r\n * @property {Number} page\r\n * @property {Number} perPage\r\n * @property {Object} filters\r\n * @property {Array} columns\r\n * @property {String} sort\r\n * @property {String} sortDir\r\n * @property {Number} scrollTo\r\n */\r\n\r\nclass SaveState extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.cachedState = null;\r\n        this.isFilterSortSet = false;\r\n        this.isDataLoaded = false;\r\n        this.isScrolled = false;\r\n        this.log(\"Init\");\r\n    }\r\n\r\n    async connected() {\r\n        this.log(\"connected\");\r\n        const grid = this.grid;\r\n\r\n        this.log(grid.options);\n\r\n        if (!grid.options.saveState) {\r\n            this.log(\"disabled\");\r\n            return;\r\n        }\r\n\r\n        this.log(\"enabled\");\r\n\r\n        const cachedState = this._getState();\r\n        if (cachedState) {\n            const waitForColumns = async () => { // Use async/await to wait for columns to be available\n                if (!grid.options.server) return;\n                let timeout = 500, // Timeout (in millisecond) to wait for columns to be set\n                    start = Date.now(), colAbsent;\n                while ((colAbsent = !grid.options.columns?.length) && Date.now() - start < timeout) {\n                    await new Promise(resolve => requestAnimationFrame(resolve));\n                }\n                colAbsent && this.log(\"Timeout waiting for columns.\");\n            };\n            const restoreState = async () => { // Ensures columns are loaded before state restoration\n                await waitForColumns();\n\r\n                this.log(\"hide columns\");\r\n\r\n                for (const col of cachedState.columns) {\r\n                    if (col.hidden) {\r\n                        const hideCol = grid.options.columns.find((c) => c.field === col.field);\r\n                        hideCol.hidden = true;\r\n                    }\r\n                }\r\n\r\n                this.log(\"set: meta, pages\");\r\n                grid.options.perPage = cachedState.perPage;\r\n                if (grid.options.server) {\r\n                    grid.meta = cachedState.meta;\r\n                    grid.pages = cachedState.pages;\r\n                    grid.page = cachedState.page;\r\n                }\n            };\n            await restoreState();\n        }\r\n\r\n        this.cachedState = cachedState;\n        this.log(\"cachedState\", this.cachedState);\n\r\n        const dgLoadData = grid.loadData;\r\n        grid.loadData = function (...args) {\r\n            return dgLoadData.apply(this, args).finally(() => {\n                const saveState = this.plugins.SaveState;\r\n                saveState.log(\"loadData\", this.options.columns);\n\r\n                if (!grid.classList.contains(\"dg-initialized\")) {\r\n                    saveState.log(\"not init, loadData skipped\");\r\n                    return;\r\n                }\r\n\r\n                saveState.log(\"loadData finished, set param controls\", this.options.columns);\r\n\r\n                if (saveState.cachedState && !saveState.isFilterSortSet) {\r\n                    saveState.log(\"set sort and filters\");\r\n\r\n                    const sortableHeaders = findAll(grid, \"thead tr.dg-head-columns th[aria-sort]\");\r\n                    for (const el of sortableHeaders) {\r\n                        el.setAttribute(\"aria-sort\", \"none\");\r\n                    }\r\n\r\n                    grid.querySelector(`thead tr.dg-head-columns th[field='${saveState.cachedState.sort}']`)\n                        ?.setAttribute(\"aria-sort\", saveState.cachedState.sortDir);\r\n\r\n                    const filters = findAll(grid.filterRow, \"[id^=dg-filter]\");\r\n                    saveState.log(\"filters\", filters);\r\n\r\n                    for (const el of filters) {\r\n                        el.value = saveState?.cachedState?.filters?.[el.dataset.name] ?? \"\";\r\n                        saveState.log({ name: el.dataset.name, val: el.value, saveState });\r\n                    }\r\n                    saveState.isFilterSortSet = true;\r\n                }\r\n\r\n                /** @type {GridState} */\r\n                const newState = {\r\n                    meta: grid.meta,\r\n                    pages: grid.pages,\r\n                    page: grid.page,\r\n                    perPage: grid.options.perPage,\r\n                    filters: {},\r\n                    columns: grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden })),\r\n                    sort: grid.getSort(),\r\n                    sortDir: grid.getSortDir(),\r\n                    scrollTo: window.scrollY,\r\n                };\r\n\r\n                const filters = grid.getFilters();\r\n                saveState.log(\"filters\", filters);\r\n\r\n                for (const key of Object.keys(filters)) {\r\n                    newState.filters[key] = filters[key] ?? \"\";\r\n                    saveState.log({ key, val: filters[key], newState, filters });\r\n                }\r\n\r\n                saveState.log(\"store new state\", newState);\r\n                saveState._setState(newState);\r\n\r\n                if (!grid.options.server && saveState.cachedState && !saveState.isDataLoaded) {\r\n                    saveState.isDataLoaded = true;\r\n                    grid.filterData();\r\n                    grid.page = saveState.cachedState.page;\r\n                    grid.pageChanged();\r\n                    saveState.log(\"data loaded\");\r\n                }\r\n            });\r\n        };\r\n\r\n        const updateState = () => {\r\n            const saveState = grid.plugins.SaveState;\r\n            const state = saveState._getState();\r\n            if (!state) {\r\n                return;\r\n            }\r\n            state.columns = grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden }));\r\n            state.sort = grid.getSort();\r\n            state.sortDir = grid.getSortDir();\r\n            state.scrollTo = window.scrollY;\r\n            saveState._setState(state);\r\n        };\r\n\r\n        document.addEventListener(\"scrollend\", updateState);\r\n        grid.addEventListener(\"headerRendered\", updateState);\r\n\r\n        grid.addEventListener(\"bodyRendered\", (ev) => {\r\n            if (!grid.classList.contains(\"dg-initialized\") || grid.classList.contains(\"dg-loading\")) {\r\n                return;\r\n            }\r\n\r\n            if (!grid.options.server) {\r\n                updateState();\r\n            }\r\n\r\n            const saveState = grid.plugins.SaveState;\r\n            if (!saveState.cachedState || !saveState.isFilterSortSet) {\r\n                return;\r\n            }\r\n\r\n            if (!saveState.isDataLoaded) {\r\n                saveState.isDataLoaded = true;\n                grid.reload();\r\n                saveState.log(\"***grid reloaded\");\r\n            } else if (!saveState.isScrolled) {\r\n                saveState.isScrolled = true;\r\n                window.scrollTo({ top: saveState.cachedState.scrollTo, left: 0, behavior: \"instant\" });\r\n            }\r\n        });\r\n    }\r\n\r\n    log(...data) {\r\n        this.grid.log(\"[Save-State] \", ...data);\r\n    }\r\n\r\n    /**\r\n     * @returns {GridState}\r\n     */\r\n    _getState() {\r\n        let state;\r\n        try {\r\n            state = JSON.parse(sessionStorage.getItem(`gridSaveState_${this.grid.id}`));\r\n        } catch (_) {}\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * @param {GridState} state\r\n     */\r\n    _setState(state) {\r\n        sessionStorage.setItem(`gridSaveState_${this.grid.id}`, JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default SaveState;\r\n", "/**\r\n * Data Grid custom element\r\n * https://github.com/lekoala/data-grid/\r\n * @license MIT\r\n */\r\n\r\nimport DataGrid from \"./src/data-grid.js\";\r\n// Optional plugins\r\nimport ColumnResizer from \"./src/plugins/column-resizer.js\";\r\nimport ContextMenu from \"./src/plugins/context-menu.js\";\r\nimport DraggableHeaders from \"./src/plugins/draggable-headers.js\";\r\nimport TouchSupport from \"./src/plugins/touch-support.js\";\r\nimport SelectableRows from \"./src/plugins/selectable-rows.js\";\r\nimport FixedHeight from \"./src/plugins/fixed-height.js\";\r\nimport AutosizeColumn from \"./src/plugins/autosize-column.js\";\r\nimport ResponsiveGrid from \"./src/plugins/responsive-grid.js\";\r\nimport RowActions from \"./src/plugins/row-actions.js\";\r\nimport EditableColumn from \"./src/plugins/editable-column.js\";\r\nimport SpinnerSupport from \"./src/plugins/spinner-support.js\";\r\nimport SaveState from \"./src/plugins/save-state.js\";\r\n\r\n// Using shorthand property names\r\n// This make them reserved and keys will be preserved\r\n// Actual class names are renamed\r\nDataGrid.registerPlugins({\r\n  ColumnResizer,\r\n  ContextMenu,\r\n  DraggableHeaders,\r\n  TouchSupport,\r\n  SelectableRows,\r\n  FixedHeight,\r\n  AutosizeColumn,\r\n  ResponsiveGrid,\r\n  RowActions,\r\n  EditableColumn,\r\n  SpinnerSupport,\r\n  SaveState\r\n});\r\n\r\n// Prevent errors if included multiple times\r\nif (!customElements.get(\"data-grid\")) {\r\n  customElements.define(\"data-grid\", DataGrid);\r\n}\r\n\r\nexport default DataGrid;\r\n\r\nconst global = typeof globalThis !== \"undefined\" ? globalThis : self;\r\nglobal.DataGrid = DataGrid;"],
  "mappings": "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",
  "names": ["col", "e", "th", "labels", "filters", "data_grid_default"]
}
