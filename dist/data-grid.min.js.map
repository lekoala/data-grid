{
  "version": 3,
  "sources": ["../src/utils/camelize.js", "../src/utils/normalizeData.js", "../src/utils/shortcuts.js", "../src/core/base-element.js", "../src/utils/addSelectOption.js", "../src/utils/appendParamsToUrl.js", "../src/utils/convertArray.js", "../src/utils/elementOffset.js", "../src/utils/interpolate.js", "../src/utils/getTextWidth.js", "../src/utils/randstr.js", "../src/utils/debounce.js", "../src/data-grid.js", "../src/core/base-plugin.js", "../src/plugins/column-resizer.js", "../src/utils/getParentElement.js", "../src/plugins/context-menu.js", "../src/plugins/draggable-headers.js", "../src/plugins/touch-support.js", "../src/plugins/selectable-rows.js", "../src/plugins/fixed-height.js", "../src/plugins/autosize-column.js", "../src/plugins/responsive-grid.js", "../src/plugins/row-actions.js", "../src/plugins/editable-column.js", "../src/plugins/spinner-support.js", "../src/plugins/save-state.js", "../data-grid.js"],
  "sourcesContent": ["/**\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nexport default function camelize(str) {\r\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\r\n}\r\n", "/**\r\n * Parse data attribute and return properly typed data\r\n * @param {String} v\r\n * @returns {any}\r\n */\r\nexport default function normalizeData(v) {\r\n    // Bool\r\n    if (v === \"true\") {\r\n        return true;\r\n    }\r\n    if (v === \"false\") {\r\n        return false;\r\n    }\r\n    // Null or empty\r\n    if (v === \"\" || v === \"null\") {\r\n        return null;\r\n    }\r\n    // Numeric attributes\r\n    if (v === Number(v).toString()) {\r\n        return Number(v);\r\n    }\r\n    // Only attempt json parsing for array or objects\r\n    if (v && typeof v.substring === \"function\" && [\"[\", \"{\"].includes(v.substring(0, 1))) {\r\n        try {\r\n            // In case we have only single quoted values, like ['one', 'two', 'three']\r\n            let val = v;\r\n            if (val.indexOf('\"') === -1) {\r\n                val = val.replace(/'/g, '\"');\r\n            }\r\n            return JSON.parse(decodeURIComponent(val));\r\n        } catch {\r\n            console.error(`Failed to parse ${v}`);\r\n            return {};\r\n        }\r\n    }\r\n    return v;\r\n}\r\n", "/**\r\n * @typedef FlexibleHTMLProps\r\n * @property {boolean} [checked] (HTMLInputElement)\r\n * @property {string} [value] (HTMLInputElement)\r\n * @property {number} [rowHeight] (HTMLTableRowElement)\r\n *\r\n * A flexible type HTMLElement type that does not require using instanceof all over the place\r\n * Make sure that your selector is indeed valid\r\n * Only includes most commons props\r\n * @typedef {HTMLElement & FlexibleHTMLProps} FlexibleHTMLElement\r\n */\r\n\r\n/**\r\n * Keep this as reference for easy documentation\r\n * @typedef {HTMLElement&HTMLInputElement&HTMLTableRowElement} MixedHTMLElement\r\n */\r\n\r\n/**\r\n * @typedef FlexibleEventProps\r\n * @property {FlexibleHTMLElement} target\r\n * @property {FlexibleHTMLElement} currentTarget\r\n * @property {DataTransfer} [dataTransfer] (DragEvent)\r\n * @property {number} [clientX] (MouseEvent)\r\n * @property {number} [clientY] (MouseEvent)\r\n *\r\n * @typedef {Event & FlexibleEventProps} FlexibleEvent\r\n */\r\n\r\n/**\r\n * Keep this as reference for easy documentation\r\n * @typedef {Event&MouseEvent&InputEvent&DragEvent&FocusEvent&KeyboardEvent&PointerEvent} MixedEvent\r\n */\r\n\r\n/**\r\n * @callback FlexibleListener\r\n * @param {FlexibleEvent} event\r\n */\r\n\r\nclass FlexibleEventListenerObject {\r\n    /**\r\n     * @param {FlexibleEvent} e\r\n     */\r\n    handleEvent(e) {}\r\n}\r\n\r\nconst supportedPassiveTypes = [\r\n    \"scroll\",\r\n    \"wheel\",\r\n    \"touchstart\",\r\n    \"touchmove\",\r\n    \"touchenter\",\r\n    \"touchend\",\r\n    \"touchleave\",\r\n    \"mouseout\",\r\n    \"mouseleave\",\r\n    \"mouseup\",\r\n    \"mousedown\",\r\n    \"mousemove\",\r\n    \"mouseenter\",\r\n    \"mousewheel\",\r\n    \"mouseover\",\r\n];\r\n\r\n/**\r\n * Automatically set passive options based on type\r\n * @param {string} type\r\n * @returns {AddEventListenerOptions}\r\n */\r\nfunction passiveOpts(type) {\r\n    if (supportedPassiveTypes.includes(type)) {\r\n        return { passive: true };\r\n    }\r\n    return {};\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {any}\r\n */\r\nexport function getAttribute(el, name) {\r\n    return el.getAttribute(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {Boolean}\r\n */\r\nexport function hasAttribute(el, name) {\r\n    return el.hasAttribute(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @param {any} v\r\n * @param {Boolean} check Prevent setting if attribute is already there\r\n */\r\nexport function setAttribute(el, name, v = \"\", check = false) {\r\n    if (check && hasAttribute(el, name)) return;\r\n    el.setAttribute(name, `${v}`);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function removeAttribute(el, name) {\r\n    if (hasAttribute(el, name)) {\r\n        el.removeAttribute(name);\r\n    }\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function on(el, type, listener) {\r\n    el.addEventListener(type, listener, passiveOpts(type));\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function off(el, type, listener) {\r\n    el.removeEventListener(type, listener, passiveOpts(type));\r\n}\r\n\r\n/**\r\n * @param {EventTarget} el\r\n * @param {String} type\r\n * @param {EventListenerObject|FlexibleListener} listener\r\n */\r\nexport function one(el, type, listener) {\r\n    el.addEventListener(type, listener, {\r\n        once: true,\r\n    });\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {String} name\r\n * @param {any} data\r\n * @param {Boolean} bubbles\r\n */\r\nexport function dispatch(el, name, data = {}, bubbles = false) {\r\n    const opts = {};\r\n    if (bubbles) {\r\n        opts.bubbles = true;\r\n    }\r\n    if (data) {\r\n        opts.detail = data;\r\n    }\r\n    el.dispatchEvent(new CustomEvent(name, opts));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n * @returns {Boolean}\r\n */\r\nexport function hasClass(el, name) {\r\n    return el.classList.contains(name);\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function addClass(el, name) {\r\n    el.classList.add(...name.split(\" \"));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function removeClass(el, name) {\r\n    el.classList.remove(...name.split(\" \"));\r\n}\r\n\r\n/**\r\n * @param {Element} el\r\n * @param {String} name\r\n */\r\nexport function toggleClass(el, name) {\r\n    el.classList.toggle(name);\r\n}\r\n\r\n/**\r\n * @param {String|HTMLElement} selector\r\n * @param {HTMLElement|Document} base\r\n * @returns {FlexibleHTMLElement|null}\r\n */\r\nexport function $(selector, base = document) {\r\n    if (selector instanceof HTMLElement) {\r\n        return selector;\r\n    }\r\n    return base.querySelector(selector);\r\n}\r\n\r\n/**\r\n * @param {String} selector\r\n * @param {Element|Document} base\r\n * @returns {Array<FlexibleHTMLElement>}\r\n */\r\nexport function $$(selector, base = document) {\r\n    return Array.from(base.querySelectorAll(selector));\r\n}\r\n\r\n/**\r\n * Easily retrieve untyped element\r\n * For actual type, prefer use of el.querySelector\r\n * @param {HTMLElement} el\r\n * @param {String|HTMLElement} selector\r\n * @returns {FlexibleHTMLElement}\r\n */\r\nexport function find(el, selector) {\r\n    return $(selector, el);\r\n}\r\n\r\n/**\r\n * Easily retrieve untyped elements\r\n * For actual type, prefer use of el.querySelectorAll\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @returns {Array<FlexibleHTMLElement>}\r\n */\r\nexport function findAll(el, selector) {\r\n    return $$(selector, el);\r\n}\r\n\r\n/**\r\n * @param {*} el\r\n * @returns {FlexibleHTMLElement}\r\n */\r\nexport function el(el) {\r\n    return el;\r\n}\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} K\r\n * @param {K} tagName\r\n * @param {HTMLElement} parent\r\n * @returns {HTMLElementTagNameMap[K]}\r\n */\r\nexport function ce(tagName, parent = null) {\r\n    const el = document.createElement(tagName);\r\n    if (parent) {\r\n        parent.appendChild(el);\r\n    }\r\n    return el;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} newNode\r\n * @param {HTMLElement} existingNode\r\n */\r\nexport function insertAfter(newNode, existingNode) {\r\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\r\n}\r\n", "import camelize from \"../utils/camelize.js\";\r\nimport normalizeData from \"../utils/normalizeData.js\";\r\nimport { dispatch, getAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/** @typedef {import('../data-grid').Options} Options */\r\n\r\n/**\r\n * Base element that does not contain any specific logic\r\n * related to this project but makes HTMLElemnt usable\r\n */\r\nclass BaseElement extends HTMLElement {\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        /** @type {Options} */\r\n        this.options = Object.assign({}, this.defaultOptions, this.normalizedDataset, options);\n\r\n        this.log(\"constructor\");\r\n\r\n        this.setup = false;\r\n        this.fireEvents = true;\r\n        this._ready();\r\n\r\n        this.log(\"ready\");\r\n    }\r\n\r\n    get defaultOptions() {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     * @returns {any}\r\n     */\r\n    getOption(opt) {\r\n        return this.options[opt];\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     * @param {any} v\r\n     */\r\n    setOption(opt, v) {\r\n        setAttribute(this, `data-${opt}`, v);\r\n    }\r\n\r\n    /**\r\n     * @param {String} opt\r\n     */\r\n    toggleOption(opt) {\r\n        setAttribute(this, `data-${opt}`, !this.getOption(opt));\r\n    }\r\n\r\n    get normalizedDataset() {\r\n        const jsonConfig = this.dataset.config ? JSON.parse(this.dataset.config) : {};\r\n        const data = { ...this.dataset };\r\n        for (const key in data) {\r\n            if (key === \"config\" || !data.hasOwnProperty(key) || typeof data[key] === \"function\") {\r\n                continue;\r\n            }\r\n            data[key] = normalizeData(data[key]);\r\n        }\r\n        // Once normalized, merge into json config\r\n        Object.assign(data, jsonConfig);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @returns {String}\r\n     */\r\n    static template() {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * This is called at the end of constructor. Extend in subclass if needed.\r\n     */\r\n    _ready() {}\r\n\r\n    /**\r\n     * @param {any[]} data\r\n     */\r\n    log(...data) {\r\n        if (this.options.debug) {\r\n            console.log(`[${getAttribute(this, \"id\")}] `, ...data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events within the component\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\r\n     * @param {Event} event\r\n     */\r\n    handleEvent(event) {\r\n        if (this[`on${event.type}`]) {\r\n            this[`on${event.type}`](event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when connected. Extend in subclass if needed.\r\n     */\r\n    _connected() {}\r\n\r\n    connectedCallback() {\r\n        // already connected\r\n        if (this.setup) {\r\n            return;\r\n        }\r\n        this.setup = true;\r\n        // ensure whenDefined callbacks run first\r\n        setTimeout(async () => {\r\n            this.log(\"connectedCallback\");\r\n\r\n            // Append only when labels had the opportunity to be set\r\n            // Don't use shadow dom as it makes theming super hard\r\n            const template = document.createElement(\"template\");\r\n            // @ts-ignore\r\n            template.innerHTML = this.constructor.template();\r\n            this.appendChild(template.content.cloneNode(true));\r\n\n            await this._connected();\n\r\n            // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\r\n            dispatch(this, \"connected\");\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * This is called when disconnected. Extend in subclass if needed.\r\n     */\r\n    _disconnected() {}\r\n\r\n    /**\r\n     * @link https://nolanlawson.com/2024/12/01/avoiding-unnecessary-cleanup-work-in-disconnectedcallback/\r\n     */\r\n    disconnectedCallback() {\r\n        setTimeout(() => {\r\n            if (!this.isConnected && this.setup) {\r\n                this.log(\"disconnectedCallback\");\r\n                this._disconnected();\r\n                // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\r\n                dispatch(this, \"disconnected\");\r\n                this.setup = false;\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#a-props-like-accessor\r\n     * @returns {Object}\r\n     */\r\n    get transformAttributes() {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * This is only meant to work with data attributes\r\n     * This allows us to have properties that reflect automatically in the component\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dataset-attributes\r\n     * @param {String} attributeName\r\n     * @param {String} oldValue\r\n     * @param {String} newValue\r\n     */\r\n    attributeChangedCallback(attributeName, oldValue, newValue) {\r\n        // It didn't change\r\n        if (oldValue === newValue) {\r\n            return;\r\n        }\r\n\r\n        this.log(`attributeChangedCallback: ${attributeName}`);\r\n\r\n        let isOption = false;\r\n        const transformer = this.transformAttributes[attributeName] ?? normalizeData;\r\n\r\n        let attr = attributeName;\r\n        // Data attributes are mapped to options while other attributes are mapped as properties\r\n        if (attr.indexOf(\"data-\") === 0) {\r\n            attr = attr.slice(5);\r\n            isOption = true;\r\n        }\r\n        attr = camelize(attr);\r\n        if (isOption) {\r\n            this.options[attr] = transformer(newValue);\r\n        } else {\r\n            this[attr] = transformer(newValue);\r\n        }\r\n\r\n        // Fire internal event\r\n        if (this.fireEvents && this[`${attr}Changed`]) {\r\n            this[`${attr}Changed`]();\r\n        }\r\n    }\r\n}\r\n\r\nexport default BaseElement;\r\n", "/**\r\n * @param {HTMLSelectElement} el\r\n * @param {String} value\r\n * @param {String} label\r\n * @param {Boolean} checked\r\n */\r\nexport default function addSelectOption(el, value, label, checked = false) {\r\n    const opt = document.createElement(\"option\");\r\n    opt.value = `${value}`;\r\n    if (checked) {\r\n        opt.selected = true;\r\n    }\r\n    opt.label = label;\r\n    el.appendChild(opt);\r\n}\r\n", "/**\r\n * @param {URL} url\r\n * @param {Object} params\r\n */\r\nexport default function appendParamsToUrl(url, params = {}) {\r\n    for (const key of Object.keys(params)) {\r\n        if (Array.isArray(params[key])) {\r\n            for (const k of Object.keys(params[key])) {\r\n                // @ts-ignore\r\n                url.searchParams.append(isNaN(k) ? `${key}[${k}]` : key, params[key][k]);\r\n            }\r\n        } else {\r\n            url.searchParams.append(key, params[key]);\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Force value as arrays\r\n * @param {String|Array} v\r\n * @returns {Array}\r\n */\r\nexport default function convertArray(v) {\r\n    if (typeof v === \"string\") {\r\n        if (v[0] === \"[\") {\r\n            // \"['my', 'value']\" would fail as a json\r\n            let bv = v;\r\n            if (bv.indexOf('\"') === -1) {\r\n                bv = bv.replace(/'/g, '\"');\r\n            }\r\n            return JSON.parse(bv);\r\n        }\r\n\r\n        return v.split(\",\");\r\n    }\r\n    if (!Array.isArray(v)) {\r\n        console.error(\"Invalid array\", v);\r\n        return [];\r\n    }\r\n    return v;\r\n}\r\n", "/**\r\n * @param {HTMLElement} el\r\n * @returns {Object}\r\n */\r\nexport default function elementOffset(el) {\r\n    const rect = el.getBoundingClientRect();\r\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n}\r\n", "/**\r\n * Replace element within {} by their data value\r\n * @param {String} str\r\n * @param {Object} data\r\n * @returns {String}\r\n */\r\nexport default function interpolate(str, data) {\r\n    return str.replace(/\\{([^}]+)?\\}/g, ($1, $2) => data[$2]);\r\n}\r\n", "let canvas;\r\n\r\n/**\r\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\r\n * Getting computed styles only works for dom that are added in the dom\r\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\r\n * @param {String} text The text to be rendered.\r\n * @param {Element} el Target element (defaults to body)\r\n * @param {Boolean} withPadding Include padding on element\r\n * @returns {Number}\r\n */\r\nexport default function getTextWidth(text, el = document.body, withPadding = false) {\r\n    const styles = window.getComputedStyle(el || document.createElement(\"div\"));\r\n    const fontWeight = styles.getPropertyValue(\"font-weight\") || \"normal\";\r\n    const fontSize = styles.getPropertyValue(\"font-size\") || \"1rem\";\r\n    const fontFamily = styles.getPropertyValue(\"font-family\") || \"Arial\";\r\n\r\n    let padding = 0;\r\n    if (withPadding) {\r\n        const paddingLeft = styles.getPropertyValue(\"padding-left\") || \"0\";\r\n        const paddingRight = styles.getPropertyValue(\"padding-right\") || \"0\";\r\n        padding = Number.parseInt(paddingLeft) + Number.parseInt(paddingRight);\r\n    }\r\n\r\n    // re-use canvas object for better performance\r\n    if (!canvas) {\r\n        canvas = document.createElement(\"canvas\");\r\n    }\r\n    const context = canvas.getContext(\"2d\");\r\n    context.font = `${fontWeight} ${fontSize} ${fontFamily}`;\r\n    const metrics = context.measureText(text);\r\n    return Number.parseInt(metrics.width) + padding;\r\n}\r\n", "/**\r\n * @param {String} prefix\r\n * @returns {String}\r\n */\r\nexport default function randstr(prefix) {\r\n    return Math.random()\r\n        .toString(36)\r\n        .replace(\"0.\", prefix || \"\");\r\n}\r\n", "/**\r\n * Define a function that can be happily passed to addEventListener\r\n * @typedef {Function & EventListenerOrEventListenerObject} ExtendedFunction\r\n */\r\n\r\n/**\r\n * @param {Function} handler\r\n * @param {Number} timeout\r\n * @returns {ExtendedFunction}\r\n */\r\nexport default function debounce(handler, timeout = 300) {\r\n    let timer = null;\r\n    return (...args) => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null;\r\n            handler(...args);\r\n        }, timeout);\r\n    };\r\n}\r\n", "/**\r\n * Data Grid Web component\r\n *\r\n * Credits for inspiration\r\n * @link https://github.com/riverside/zino-grid\r\n */\r\n\r\nimport BaseElement from \"./core/base-element.js\";\r\nimport addSelectOption from \"./utils/addSelectOption.js\";\r\nimport appendParamsToUrl from \"./utils/appendParamsToUrl.js\";\r\nimport camelize from \"./utils/camelize.js\";\r\nimport convertArray from \"./utils/convertArray.js\";\r\nimport elementOffset from \"./utils/elementOffset.js\";\r\nimport interpolate from \"./utils/interpolate.js\";\r\nimport getTextWidth from \"./utils/getTextWidth.js\";\r\nimport randstr from \"./utils/randstr.js\";\r\nimport debounce from \"./utils/debounce.js\";\r\nimport {\r\n    $,\r\n    $$,\r\n    dispatch,\r\n    find,\r\n    findAll,\r\n    hasClass,\r\n    removeAttribute,\r\n    getAttribute,\r\n    setAttribute,\r\n    addClass,\r\n    toggleClass,\r\n    on,\r\n    ce,\r\n} from \"./utils/shortcuts.js\";\r\n\r\n/**\r\n * Column definition\r\n * @typedef Column\r\n * @property {String} field - the key in the data\r\n * @property {String} title - the title to display in the header (defaults to \"field\" if not set)\r\n * @property {Number} [width] - the width of the column (auto otherwise)\r\n * @property {String} [class] - class to set on the column (target body or header with th.class or td.class)\r\n * @property {String} [attr] - don't render the column and set a matching attribute on the row with the value of the field\r\n * @property {Boolean} [hidden] - hide the column\r\n * @property {Boolean} [noSort] - allow disabling sort for a given column\r\n * @property {String | Function} [format] - custom data formatting\r\n * @property {String} [defaultFormatValue] - default value to use for formatting\r\n * @property {String} [transform] - custom value transformation\r\n * @property {Boolean} [editable] - replace with input (EditableColumn module)\r\n * @property {String} [editableType] - type of input (EditableColumn module)\r\n * @property {Number} [responsive] - the higher the value, the sooner it will be hidden, disable with 0 (ResponsiveGrid module)\r\n * @property {Boolean} [responsiveHidden] - hidden through responsive module (ResponsiveGrid module)\r\n * @property {String} [filterType] - defines a filter field type (\"text\" or \"select\" - defaults to \"text\")\r\n * @property {Array} [filterList] - defines a custom array to populate a filter select field in the format of [{value: \"\", text: \"\"},...]. When defined, it overrides the default behaviour where the filter select elements are populated by the unique values from the corresponding column records.\r\n * @property {Object} [firstFilterOption] - defines an object for the first option element of the filter select field. defaults to {value: \"\", text: \"\"}\r\n */\r\n\r\n/**\r\n * Row action\r\n * @typedef Action\r\n * @property {String} title - the title of the button\r\n * @property {String} name - the name of the action\r\n * @property {String} class - the class for the button\r\n * @property {String} url - link for the action\r\n * @property {String} html - custom button data\r\n * @property {Boolean} [confirm] - needs confirmation\r\n * @property {Boolean} default - is the default row action\r\n */\r\n\r\n// Import definitions without importing the actual file\r\n/** @typedef {import('./plugins/autosize-column').default} AutosizeColumn */\r\n/** @typedef {import('./plugins/column-resizer').default} ColumnResizer */\r\n/** @typedef {import('./plugins/context-menu').default} ContextMenu */\r\n/** @typedef {import('./plugins/draggable-headers').default} DraggableHeaders */\r\n/** @typedef {import('./plugins/editable-column').default} EditableColumn */\r\n/** @typedef {import('./plugins/fixed-height').default} FixedHeight */\r\n/** @typedef {import('./plugins/responsive-grid').default} ResponsiveGrid */\r\n/** @typedef {import('./plugins/row-actions').default} RowActions */\r\n/** @typedef {import('./plugins/selectable-rows').default} SelectableRows */\r\n/** @typedef {import('./plugins/touch-support').default} TouchSupport */\r\n/** @typedef {import('./plugins/spinner-support').default} SpinnerSupport */\r\n/** @typedef {import('./plugins/save-state').default} SaveState */\r\n\r\n/**\r\n * These plugins are all optional\r\n * @typedef {Object} Plugins\r\n * @property {ColumnResizer} [ColumnResizer] resize handlers in the headers\r\n * @property {ContextMenu} [ContextMenu] menu to show/hide columns\r\n * @property {DraggableHeaders} [DraggableHeaders] draggable headers columns\r\n * @property {EditableColumn} [EditableColumn] draggable headers columns\r\n * @property {TouchSupport} [TouchSupport] touch swipe\r\n * @property {SelectableRows} [SelectableRows] create a column with checkboxes to select rows\r\n * @property {FixedHeight} [FixedHeight] allows having fixed height tables\r\n * @property {AutosizeColumn} [AutosizeColumn] compute ideal width based on column content\r\n * @property {ResponsiveGrid} [ResponsiveGrid] hide/show column on the fly\r\n * @property {RowActions} [RowActions] add action on rows\r\n * @property {SpinnerSupport} [SpinnerSupport] inserts a spinning icon element to indicate grid loading.\r\n * @property {SaveState} [SaveState] stores grid filter, sort, and paging.\r\n */\r\n\r\n/**\r\n * Parameters to pass along or receive from the server\r\n * @typedef ServerParams\r\n * @property {String} serverParams.start\r\n * @property {String} serverParams.length\r\n * @property {String} serverParams.search\r\n * @property {String} serverParams.sort\r\n * @property {String} serverParams.sortDir\r\n * @property {String} serverParams.dataKey\r\n * @property {String} serverParams.metaKey\r\n * @property {String} serverParams.metaTotalKey\r\n * @property {String} serverParams.metaFilteredKey\r\n * @property {String} serverParams.optionsKey\r\n * @property {String} serverParams.paramsKey\r\n */\r\n\r\n/**\r\n * Available data grid options, plugins included\r\n * @typedef Options\r\n * @property {?String} id Custom id for the grid\r\n * @property {?String} url An URL with data to display in JSON format\r\n * @property {Boolean} debug Log actions in DevTools console\r\n * @property {Boolean} filter Allows a filtering functionality\r\n * @property {Boolean} sort Allows a sort by column functionality\r\n * @property {String} defaultSort Default sort field if sorting is enabled\r\n * @property {Boolean} server Is a server side powered grid\r\n * @property {ServerParams} serverParams Describe keys passed to the server backend\r\n * @property {String} dir Dir\r\n * @property {Array} perPageValues Available per page options\r\n * @property {Boolean} hidePerPage Hides the page size select element\r\n * @property {Column[]} columns Available columns\r\n * @property {Number} defaultPage Starting page\r\n * @property {Number} perPage Number of records displayed per page (page size)\r\n * @property {Boolean} expand  Allow cell content to spawn over multiple lines\r\n * @property {Action[]} actions Row actions (RowActions module)\r\n * @property {Boolean} collapseActions Group actions (RowActions module)\r\n * @property {Boolean} resizable Make columns resizable (ColumnResizer module)\r\n * @property {Boolean} selectable Allow multi-selecting rows with a checkboxes (SelectableRows module)\r\n * @property {Boolean} selectVisibleOnly Select all only selects visible rows (SelectableRows module)\r\n * @property {Boolean} singleSelect Enables single row select with radio buttons - no need to set selectable (SelectableRows module)\r\n * @property {Boolean} autosize Compute column sizes based on given data (Autosize module)\r\n * @property {Boolean} autoheight Adjust height so that it matches table size (FixedHeight module)\r\n * @property {Boolean} autohidePager auto-hides the pager when number of records falls below the selected page size\r\n * @property {Boolean} menu Right click menu on column headers (ContextMenu module)\r\n * @property {Boolean} reorder Allows a column reordering functionality (DraggableHeaders module)\r\n * @property {Boolean} responsive Change display mode on small screens (ResponsiveGrid module)\r\n * @property {Boolean} responsiveToggle Show toggle column (ResponsiveGrid module)\r\n * @property {Boolean} filterOnEnter Toggles the ability to filter column data by pressing the Enter or Return key\r\n * @property {String} spinnerClass Sets a space-delimited string of css classes for a spinner (use spinner-border css class for bootstrap 5 spinner)\r\n * @property {Number} filterKeypressDelay Sets a keypress delay time in milliseconds before triggering filter operation.\r\n * @property {Boolean} saveState Enable/disable save state plugin (SaveState module)\r\n * @property {?String} errorMessage A generic text to be displayed in footer when error occurs.\r\n * @property {?String} noData A custom text to be displayed when no data is loaded. This is different from the generic labels.noData that applies for data-grid as a component.\r\n */\r\n\r\n/**\r\n * Available labels that can be translated\r\n * @typedef Labels\r\n * @property {String} itemsPerPage\r\n * @property {String} gotoPage\r\n * @property {String} gotoFirstPage\r\n * @property {String} gotoPrevPage\r\n * @property {String} gotoNextPage\r\n * @property {String} gotoLastPage\r\n * @property {String} of\r\n * @property {String} items\r\n * @property {String} resizeColumn\r\n * @property {String} noData\r\n * @property {String} areYouSure\r\n * @property {String} networkError\r\n */\r\n\r\n/**\r\n * List of registered plugins\r\n * @type {Plugins}\r\n */\r\nlet plugins = {};\r\n\r\n/**\r\n * @type {Labels}\r\n */\r\nlet labels = {\r\n    itemsPerPage: \"Items per page\",\r\n    gotoPage: \"Go to page\",\r\n    gotoFirstPage: \"Go to first page\",\r\n    gotoPrevPage: \"Go to previous page\",\r\n    gotoNextPage: \"Go to next page\",\r\n    gotoLastPage: \"Go to last page\",\r\n    of: \"of\",\r\n    items: \"items\",\r\n    resizeColumn: \"Resize column\",\r\n    noData: \"No data\",\r\n    areYouSure: \"Are you sure?\",\r\n    networkError: \"Network response error\",\r\n};\r\n\r\n/**\r\n * Column definition will update some props on the html element\r\n * @param {HTMLElement} el\r\n * @param {Column} column\r\n */\r\nfunction applyColumnDefinition(el, column) {\r\n    if (column.width) {\r\n        setAttribute(el, \"width\", column.width);\r\n    }\r\n    if (column.class) {\r\n        addClass(el, column.class);\r\n    }\r\n    if (column.hidden) {\r\n        setAttribute(el, \"hidden\", \"\");\r\n        if (column.responsiveHidden) {\r\n            addClass(el, \"dg-responsive-hidden\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n */\r\nclass DataGrid extends BaseElement {\r\n    _filterSelector = \"[id^=dg-filter]\";\n    _excludedRowElementSelector = \"a,button,input,select,textarea\";\r\n    _excludedKeys = [\r\n        37,\r\n        39,\r\n        38,\r\n        40,\r\n        45,\r\n        36,\r\n        35,\r\n        33,\r\n        34,\r\n        27,\r\n        20,\r\n        16,\r\n        17,\r\n        91,\r\n        92,\r\n        18,\r\n        93,\r\n        144,\r\n        231,\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"Insert\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"Escape\",\r\n        \"CapsLock\",\r\n        \"Shift\",\r\n        \"Control\",\r\n        \"Meta\",\r\n        \"Alt\",\r\n        \"ContextMenu\",\r\n        \"NumLock\",\r\n        \"Unidentified\",\r\n    ];\n\r\n    _ready() {\r\n        setAttribute(this, \"id\", this.options.id ?? randstr(\"el-\"), true);\r\n\r\n        /**\r\n         * The grid displays that data\r\n         * @type {Array}\r\n         */\r\n        this.data = [];\r\n        /**\r\n         * We store the original data in this\r\n         * @type {Array}\r\n         */\r\n        this.originalData; // declared uninitialized to allow data preloading before fetch.\r\n\r\n        // Make the IDE happy\r\n        /**\r\n         * @type {Options}\r\n         */\r\n        this.options = this.options || this.defaultOptions;\n        if (this.options.singleSelect) this.options.selectable = true; // singleSelect implies selectable\r\n\r\n        // Init values\r\n        this.fireEvents = false;\r\n        this.page = this.options.defaultPage || 1;\r\n        this.pages = 0;\r\n        this.meta; // declared uninitialized to allow data preloading before fetch.\r\n        /**\r\n         * @type {Plugins}\r\n         */\r\n        this.plugins = {};\r\n        // Init plugins\r\n        for (const [pluginName, pluginClass] of Object.entries(plugins)) {\r\n            // @ts-ignore until we can set typeof import ...\r\n            this.plugins[pluginName] = new pluginClass(this);\r\n        }\r\n\r\n        // Expose options as observed attributes in the dom\r\n        // Do it when fireEvents is disabled to avoid firing change callbacks\r\n        for (const attr of DataGrid.observedAttributes) {\r\n            if (attr.indexOf(\"data-\") === 0) {\r\n                setAttribute(this, attr, this.options[camelize(attr.slice(5))]);\r\n            }\r\n        }\r\n    }\r\n\r\n    static template() {\r\n        return `\r\n<table role=\"grid\" >\r\n    <thead role=\"rowgroup\">\r\n        <tr role=\"row\" aria-rowindex=\"1\" class=\"dg-head-columns\"><th><!-- keep for getTextWidth --></th></tr>\r\n        <tr role=\"row\" aria-rowindex=\"2\" class=\"dg-head-filters\"></tr>\r\n    </thead>\r\n    <tbody role=\"rowgroup\" data-empty=\"${labels.noData}\"></tbody>\r\n    <tfoot role=\"rowgroup\" hidden>\r\n        <tr role=\"row\" aria-rowindex=\"1\">\r\n            <td role=\"gridcell\">\r\n            <div class=\"dg-footer\">\r\n                <div class=\"dg-page-nav\">\r\n                  <select class=\"dg-select-per-page\" aria-label=\"${labels.itemsPerPage}\"></select>\r\n                </div>\r\n                <div class=\"dg-pagination\">\r\n                  <button type=\"button\" class=\"dg-btn-first dg-rotate\" title=\"${labels.gotoFirstPage}\" aria-label=\"${labels.gotoFirstPage}\" disabled>\r\n                    <i class=\"dg-skip-icon\"></i>\r\n                  </button>\r\n                  <button type=\"button\" class=\"dg-btn-prev dg-rotate\" title=\"${labels.gotoPrevPage}\" aria-label=\"${labels.gotoPrevPage}\" disabled>\r\n                    <i class=\"dg-nav-icon\"></i>\r\n                  </button>\r\n                  <input type=\"number\" class=\"dg-input-page\" min=\"1\" step=\"1\" value=\"1\" aria-label=\"${labels.gotoPage}\">\r\n                  <button type=\"button\" class=\"dg-btn-next\" title=\"${labels.gotoNextPage}\" aria-label=\"${labels.gotoNextPage}\" disabled>\r\n                    <i class=\"dg-nav-icon\"></i>\r\n                  </button>\r\n                  <button type=\"button\" class=\"dg-btn-last\" title=\"${labels.gotoLastPage}\" aria-label=\"${labels.gotoLastPage}\" disabled>\r\n                    <i class=\"dg-skip-icon\"></i>\r\n                  </button>\r\n                </div>\r\n                <div class=\"dg-meta\">\r\n                  <span class=\"dg-low\">0</span> - <span class=\"dg-high\">0</span> ${labels.of} <span class=\"dg-total\">0</span> ${labels.items}\r\n                </div>\r\n            </div>\r\n            </td>\r\n        </tr>\r\n    </tfoot>\r\n    <ul class=\"dg-menu\" hidden></ul>\r\n</table>\r\n`;\r\n    }\r\n\r\n    /**\r\n     * @returns {Labels}\r\n     */\r\n    get labels() {\r\n        return labels;\r\n    }\r\n\r\n    /**\r\n     * @returns {Labels}\r\n     */\r\n    static getLabels() {\r\n        return labels;\r\n    }\r\n\r\n    /**\r\n     * @param {Object} v\r\n     */\r\n    static setLabels(v) {\r\n        labels = Object.assign(labels, v);\r\n    }\n\r\n    /** Gets the text to be displayed when no data is loaded. */\n    get noData() {\n        return this.options.noData || this.labels.noData;\r\n    }\n\n    /**\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\n    #setNoData(tbody) {\n        if (!this.hasDataError && tbody.getAttribute(\"data-empty\") !== this.noData) {\r\n            tbody.setAttribute(\"data-empty\", this.noData);\r\n        }\r\n    }\n\r\n    /**\r\n     * @returns {Column}\r\n     */\r\n    get defaultColumn() {\r\n        return {\r\n            field: \"\",\r\n            title: \"\",\r\n            width: 0,\r\n            class: \"\",\r\n            attr: \"\",\r\n            hidden: false,\r\n            editable: false,\r\n            noSort: false,\r\n            responsive: 1,\r\n            responsiveHidden: false,\r\n            format: \"\",\r\n            transform: \"\",\r\n            filterType: \"text\",\r\n            firstFilterOption: { value: \"\", text: \"\" },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @returns {Options}\r\n     */\r\n    get defaultOptions() {\r\n        return {\r\n            id: null,\r\n            url: \"\",\r\n            perPage: 10,\r\n            debug: false,\r\n            filter: false,\r\n            menu: false,\r\n            sort: false,\r\n            server: false,\r\n            serverParams: {\r\n                start: \"start\",\r\n                length: \"length\",\r\n                search: \"search\",\r\n                sort: \"sort\",\r\n                sortDir: \"sortDir\",\r\n                dataKey: \"data\",\r\n                metaKey: \"meta\",\r\n                metaTotalKey: \"total\",\r\n                metaFilteredKey: \"filtered\",\r\n                optionsKey: \"options\",\r\n                paramsKey: \"params\",\r\n            },\r\n            defaultSort: \"\",\r\n            reorder: false,\r\n            dir: \"ltr\",\r\n            perPageValues: [10, 25, 50, 100, 250],\r\n            hidePerPage: false,\r\n            columns: [],\r\n            actions: [],\r\n            collapseActions: false,\r\n            selectable: false,\r\n            selectVisibleOnly: true,\n            singleSelect: false,\r\n            defaultPage: 1,\r\n            resizable: false,\r\n            autosize: true,\r\n            expand: false,\r\n            autoheight: true,\r\n            autohidePager: false,\r\n            responsive: false,\r\n            responsiveToggle: true,\r\n            filterOnEnter: true,\r\n            filterKeypressDelay: 500,\r\n            spinnerClass: \"\",\r\n            saveState: false,\r\n            errorMessage: \"\",\n            noData: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Determines if the grid is initialized.\r\n     * @returns {Boolean}\r\n     */\r\n    get isInit() {\r\n        return this.classList.contains(\"dg-initialized\");\r\n    }\r\n\r\n    /**\r\n     * Determines if data load has failed.\r\n     * @returns {Boolean}\r\n     */\r\n    get hasDataError() {\r\n        return this.classList.contains(\"dg-network-error\");\r\n    }\r\n\r\n    /**\r\n     * @param {Plugins} list\r\n     */\r\n    static registerPlugins(list) {\r\n        plugins = list;\r\n    }\r\n\r\n    /**\r\n     * @param {String} plugin\r\n     */\r\n    static unregisterPlugins(plugin = null) {\r\n        if (plugin === null) {\r\n            plugins = {};\r\n        } else {\r\n            delete plugins[plugin];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Plugins}\r\n     */\r\n    static registeredPlugins() {\r\n        return plugins;\r\n    }\r\n\r\n    /**\r\n     * @param {Object|Array} columns\r\n     * @returns {Column[]}\r\n     */\r\n    convertColumns(columns) {\r\n        const cols = [];\r\n        // Convert key:value objects to actual columns\r\n        if (typeof columns === \"object\" && !Array.isArray(columns)) {\r\n            for (const key of Object.keys(columns)) {\r\n                const col = Object.assign({}, this.defaultColumn);\r\n                col.title = columns[key];\r\n                col.field = key;\r\n                cols.push(col);\r\n            }\r\n        } else {\r\n            for (const item of columns) {\r\n                let col = Object.assign({}, this.defaultColumn);\r\n                if (typeof item === \"string\") {\r\n                    col.title = item;\r\n                    col.field = item;\r\n                } else if (typeof item === \"object\") {\r\n                    col = Object.assign(col, item);\r\n                    if (!col.field) {\r\n                        console.error(\"Invalid column definition\", item);\r\n                    }\r\n                    if (!col.title) {\r\n                        col.title = col.field;\r\n                    }\r\n                } else {\r\n                    console.error(\"Column definition must be a string or an object\");\r\n                }\r\n                cols.push(col);\r\n            }\r\n        }\r\n        return cols;\r\n    }\r\n\r\n    /**\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dom-attributes\r\n     * @returns {Array}\r\n     */\r\n    static get observedAttributes() {\r\n        return [\r\n            \"page\",\r\n            \"data-filter\",\r\n            \"data-sort\",\r\n            \"data-debug\",\r\n            \"data-reorder\",\r\n            \"data-menu\",\r\n            \"data-selectable\",\n            \"data-single-select\",\r\n            \"data-url\",\r\n            \"data-per-page\",\r\n            \"data-responsive\",\r\n        ];\r\n    }\r\n\r\n    get transformAttributes() {\r\n        return {\r\n            columns: (v) => this.convertColumns(convertArray(v)),\r\n            actions: (v) => convertArray(v),\r\n            defaultPage: (v) => Number.parseInt(v),\r\n            perPage: (v) => Number.parseInt(v),\r\n        };\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get thead() {\r\n        //@ts-ignore\r\n        return $(\"thead\", this);\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get tbody() {\r\n        //@ts-ignore\r\n        return $(\"tbody\", this);\r\n    }\r\n\r\n    /** @returns {HTMLTableSectionElement} */\r\n    get tfoot() {\r\n        //@ts-ignore\r\n        return $(\"tfoot\", this);\r\n    }\r\n\r\n    get page() {\r\n        return Number.parseInt(this.getAttribute(\"page\"));\r\n    }\r\n\r\n    set page(val) {\r\n        setAttribute(this, \"page\", this.constrainPageValue(val));\r\n    }\r\n\r\n    /**\r\n     * Loads data and configures the grid.\r\n     * @param {Boolean} initOnly\r\n     */\r\n    urlChanged(initOnly = false) {\r\n        if (initOnly && !this.isInit) return this;\r\n        this.reconfig();\r\n        return this.loadData().then(() => this.configureUi());\r\n    }\r\n\r\n    /**\r\n     * Clears columns, re-renders table, and repopulates columns to ensure consistent column widths rendering.\r\n     */\r\n    reconfig() {\r\n        const cols = this.options.columns;\r\n        this.options.columns = [];\r\n        this.configureUi();\r\n        return this.options.columns = cols, this;\r\n    }\r\n\r\n    constrainPageValue(v) {\r\n        let pv = v;\r\n        if (this.pages < pv) {\r\n            pv = this.pages;\r\n        }\r\n        if (pv < 1 || !pv) {\r\n            pv = 1;\r\n        }\r\n        return pv;\r\n    }\r\n\r\n    fixPage() {\n        if (!this.inputPage) return this;\r\n        this.pages = this.totalPages();\r\n        this.page = this.constrainPageValue(this.page);\r\n\r\n        // Show current page in input\r\n        setAttribute(this.inputPage, \"max\", this.pages);\r\n        this.inputPage.value = `${this.page}`;\r\n        return this.inputPage.disabled = this.pages < 2, this;\r\n    }\r\n\r\n    pageChanged() {\r\n        this.reload();\r\n    }\r\n\r\n    responsiveChanged() {\r\n        if (!this.plugins.ResponsiveGrid) {\r\n            return;\r\n        }\r\n        if (this.options.responsive) {\r\n            this.plugins.ResponsiveGrid.observe();\r\n        } else {\r\n            this.plugins.ResponsiveGrid.unobserve();\r\n        }\r\n    }\r\n\r\n    menuChanged() {\r\n        this.renderHeader();\r\n    }\r\n\r\n    /**\r\n     * This is the callback for the select control\r\n     */\r\n    changePerPage() {\r\n        this.options.perPage = Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value);\r\n        this.perPageChanged();\r\n    }\r\n\r\n    /**\r\n     * This is the actual event triggered on attribute change\r\n     */\r\n    perPageChanged() {\r\n        // Refresh UI\r\n        if (\r\n            this.options.perPage !== Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value)\r\n        ) {\r\n            this.perPageValuesChanged();\r\n        }\r\n        // Make sure current page is still valid\r\n        let updatePage = this.page;\r\n        while (updatePage > 1 && this.page * this.options.perPage > this.totalRecords()) {\r\n            updatePage--;\r\n        }\r\n        if (updatePage !== this.page) {\r\n            // Triggers pageChanged, which will trigger reload\r\n            this.page = updatePage;\r\n        } else {\r\n            // Simply reload current page\r\n            this.reload(() => {\r\n                // Preserve distance between top of page and select control if no fixed height\r\n                if (!this.plugins.FixedHeight || !this.plugins.FixedHeight.hasFixedHeight) {\r\n                    this.selectPerPage.scrollIntoView();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    dirChanged() {\r\n        setAttribute(this, \"dir\", this.options.dir);\r\n    }\r\n\r\n    defaultSortChanged() {\r\n        this.sortChanged();\r\n    }\r\n\r\n    /**\r\n     * Populate the select dropdown according to options\r\n     */\r\n    perPageValuesChanged() {\r\n        if (!this.selectPerPage) {\r\n            return;\r\n        }\r\n        while (this.selectPerPage.lastChild) {\r\n            this.selectPerPage.removeChild(this.selectPerPage.lastChild);\r\n        }\r\n        for (const v of this.options.perPageValues) {\r\n            addSelectOption(this.selectPerPage, v, v, v === this.options.perPage);\r\n        }\r\n    }\r\n\r\n    async _connected() {\r\n        /**\r\n         * @type {HTMLTableElement}\r\n         */\r\n        this.table = this.querySelector(\"table\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnFirst = this.querySelector(\".dg-btn-first\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnPrev = this.querySelector(\".dg-btn-prev\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnNext = this.querySelector(\".dg-btn-next\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.btnLast = this.querySelector(\".dg-btn-last\");\r\n        /**\r\n         * @type {HTMLSelectElement}\r\n         */\r\n        this.selectPerPage = this.querySelector(\".dg-select-per-page\");\r\n        /**\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.inputPage = this.querySelector(\".dg-input-page\");\r\n\r\n        this.getFirst = this.getFirst.bind(this);\r\n        this.getPrev = this.getPrev.bind(this);\r\n        this.getNext = this.getNext.bind(this);\r\n        this.getLast = this.getLast.bind(this);\r\n        this.changePerPage = this.changePerPage.bind(this);\r\n        this.gotoPage = this.gotoPage.bind(this);\r\n\r\n        this.btnFirst.addEventListener(\"click\", this.getFirst);\r\n        this.btnPrev.addEventListener(\"click\", this.getPrev);\r\n        this.btnNext.addEventListener(\"click\", this.getNext);\r\n        this.btnLast.addEventListener(\"click\", this.getLast);\r\n        this.selectPerPage.addEventListener(\"change\", this.changePerPage);\r\n        this.selectPerPage.toggleAttribute(\"hidden\", this.options.hidePerPage);\r\n        this.inputPage.addEventListener(\"input\", this.gotoPage);\r\n\r\n        for (const plugin of Object.values(this.plugins)) {\r\n            await plugin.connected();\r\n        }\r\n\r\n        // Display even if we don't have data\r\n        this.dirChanged();\r\n        this.perPageValuesChanged();\r\n\n        await this.init();\r\n    }\r\n\r\n    _disconnected() {\r\n        this.btnFirst?.removeEventListener(\"click\", this.getFirst);\r\n        this.btnPrev?.removeEventListener(\"click\", this.getPrev);\r\n        this.btnNext?.removeEventListener(\"click\", this.getNext);\r\n        this.btnLast?.removeEventListener(\"click\", this.getLast);\r\n        this.selectPerPage?.removeEventListener(\"change\", this.changePerPage);\r\n        this.inputPage?.removeEventListener(\"input\", this.gotoPage);\r\n\r\n        for (const plugin of Object.values(this.plugins)) {\r\n            plugin.disconnected();\r\n        }\r\n    }\n\n    init() {\n        return this.loadData().finally(() => {\r\n            this.configureUi();\r\n\r\n            this.sortChanged();\r\n            this.classList.add(\"dg-initialized\"); //acts as a flag to prevent unnecessary server calls down the chain.\r\n\r\n            this.filterChanged();\r\n            this.reorderChanged();\r\n\r\n            this.dirChanged();\r\n            this.perPageValuesChanged();\r\n            this.pageChanged();\r\n\r\n            this.fireEvents = true; // We can now fire attributeChangedCallback events\r\n\r\n            this.log(\"initialized\");\r\n        });\n    }\r\n\r\n    /**\r\n     * @param {string} field\r\n     * @returns {Column}\r\n     */\r\n    getCol(field) {\r\n        let found = null;\r\n\r\n        for (const col of this.options.columns) {\r\n            if (col.field === field) {\r\n                found = col;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    getColProp(field, prop) {\r\n        const c = this.getCol(field);\r\n        return c ? c[prop] : null;\r\n    }\r\n\r\n    setColProp(field, prop, val) {\r\n        const c = this.getCol(field);\r\n        if (c) {\r\n            c[prop] = val;\r\n        }\r\n    }\r\n\r\n    visibleColumns() {\r\n        return this.options.columns.filter((col) => {\r\n            return !col.hidden;\r\n        });\r\n    }\r\n\r\n    hiddenColumns() {\r\n        return this.options.columns.filter((col) => {\r\n            return col.hidden === true;\r\n        });\r\n    }\r\n\r\n    showColumn(field, render = true) {\r\n        this.setColProp(field, \"hidden\", false);\r\n\r\n        // We need to render the whole table otherwise layout fixed won't do its job\r\n        if (render) this.renderTable();\r\n\r\n        dispatch(this, \"columnVisibility\", {\r\n            col: field,\r\n            visibility: \"visible\",\r\n        });\r\n    }\r\n\r\n    hideColumn(field, render = true) {\r\n        this.setColProp(field, \"hidden\", true);\r\n\r\n        // We need to render the whole table otherwise layout fixed won't do its job\r\n        if (render) this.renderTable();\r\n\r\n        dispatch(this, \"columnVisibility\", {\r\n            col: field,\r\n            visibility: \"hidden\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the starting index of actual data\r\n     * @returns {Number}\r\n     */\r\n    startColIndex() {\r\n        let start = 1;\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            start++;\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            start++;\r\n        }\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    isSticky() {\r\n        return this.hasAttribute(\"sticky\");\r\n    }\r\n\r\n    /**\r\n     * @param {Boolean} visibleOnly\r\n     * @returns {Number}\r\n     */\r\n    columnsLength(visibleOnly = false) {\r\n        let len = 0;\r\n        // One column per (visible) column\r\n        for (const col of this.options.columns) {\r\n            if (visibleOnly && col.hidden) {\r\n                continue;\r\n            }\r\n            if (!col.attr) {\r\n                len++;\r\n            }\r\n        }\r\n        // Add one col for selectable checkbox at the beginning\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            len++;\r\n        }\r\n        // Add one col for actions at the end\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            len++;\r\n        }\r\n        // Add one col for the responsive toggle\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            len++;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /**\r\n     * Global configuration and renderTable\r\n     * This should be called after your data has been loaded\r\n     */\r\n    configureUi() {\r\n        if (!this.table) return this;\n        this.table.style.visibility = \"hidden\";\r\n        this.renderTable();\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid) {\r\n            // Let the observer make the table visible\r\n        } else {\r\n            this.table.style.visibility = \"visible\";\r\n        }\r\n\r\n        // Store row height for later usage\r\n        if (!this.rowHeight) {\r\n            const tr = find(this, \"tbody tr\") || find(this, \"table tr\");\r\n            if (tr) {\r\n                this.rowHeight = tr.offsetHeight;\r\n            }\r\n        }\n        this.#setNoData(this.tbody);\r\n        return this.fixPage();\r\n    }\r\n\r\n    filterChanged() {\r\n        const row = this.querySelector(\"thead tr.dg-head-filters\");\r\n        if (this.options.filter) {\r\n            removeAttribute(row, \"hidden\");\r\n        } else {\r\n            this.clearFilters();\r\n            setAttribute(row, \"hidden\", \"\");\r\n        }\r\n    }\r\n\r\n    reorderChanged() {\r\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\r\n        for (const th of headers) {\r\n            if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\r\n                continue;\r\n            }\r\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\r\n                th.draggable = true;\r\n            } else {\r\n                th.removeAttribute(\"draggable\");\r\n            }\r\n        }\r\n    }\r\n\r\n    sortChanged() {\r\n        this.log(\"toggle sort\");\r\n\r\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\r\n        for (const th of headers) {\r\n            const fieldName = th.getAttribute(\"field\");\r\n            if (\r\n                th.classList.contains(\"dg-not-sortable\") ||\r\n                (!this.fireEvents && fieldName === this.options.defaultSort)\r\n            ) {\r\n                return;\r\n            }\r\n            if (this.options.sort && !this.getColProp(fieldName, \"noSort\")) {\r\n                setAttribute(th, \"aria-sort\", \"none\");\r\n            } else {\r\n                removeAttribute(th, \"aria-sort\");\r\n            }\r\n        }\r\n    }\r\n\r\n    selectableChanged() {\r\n        this.renderTable();\r\n    }\r\n\r\n    addRow(row) {\r\n        if (!Array.isArray(this.originalData)) {\r\n            return;\r\n        }\r\n        this.log(\"add row\");\r\n        this.originalData.push(row);\r\n        this.data = this.originalData.slice();\r\n        this.sortData();\r\n    }\r\n\r\n    /**\r\n     * @param {any} value Value to remove. Defaults to last row.\r\n     * @param {String} key The key of the item to remove. Defaults to first column\r\n     */\r\n    removeRow(value = null, key = null) {\r\n        if (!Array.isArray(this.originalData)) {\r\n            return;\r\n        }\r\n\r\n        let v = value;\r\n        let k = key;\r\n        if (k === null) {\r\n            k = this.options.columns[0].field;\r\n        }\r\n        if (v === null) {\r\n            v = this.originalData[this.originalData.length - 1][k];\r\n        }\r\n        this.log(`remove row ${k}:${v}`);\r\n        for (let i = 0; i < this.originalData.length; i++) {\r\n            if (this.originalData[i][k] === v) {\r\n                this.originalData.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.data = this.originalData.slice();\r\n        this.sortData();\r\n    }\r\n\r\n    /**\n     * Get selected rows or specific fields from selected rows.\n     * If no keys are provided, returns the full row objects.\n     * If one key is provided, returns an array of values for that key.\n     * If multiple keys are provided, returns an array of objects with those keys and values.\n     * In single select mode, returns a single object or value.\n     * @param {...String} keys - Field names to select from each row.\n     * @returns {Array|Object} Selected rows, values, or objects depending on selection and keys.\n     */\n    getSelection(...keys) {\n        if (!this.plugins.SelectableRows) {\n            return [];\n        }\n        return this.plugins.SelectableRows.getSelection(...keys);\n    }\r\n\r\n    getData() {\r\n        return this.originalData;\r\n    }\r\n\r\n    clearData(force = false) {\r\n        // Already empty\r\n        if (!force && this.data.length === 0) {\r\n            return;\r\n        }\n        this.classList.remove(\"dg-empty\", \"dg-network-error\");\n        this.tbody?.setAttribute(\"data-empty\", this.noData);\r\n        this.data = this.originalData = [];\r\n        this.renderBody();\r\n    }\r\n\r\n    /**\r\n     * Preloads the data intended to bypass the initial fetch operation, allowing for faster intial page load time.\r\n     * Subsequent grid actions after initialization will operate as normal.\r\n     * @param {Object} data - an object with meta ({total, filtered, start}) and data (array of objects) properties.\r\n     */\r\n    preload(data) {\r\n        const metaKey = this.options.serverParams.metaKey;\r\n        const dataKey = this.options.serverParams.dataKey;\r\n        if (data?.[metaKey]) {\r\n            this.meta = data[metaKey];\r\n        }\r\n        if (data?.[dataKey]) {\r\n            this.data = this.originalData = data[dataKey];\r\n        }\r\n    }\r\n\n    /**\n     * Clears and reloads data from url.\n     * @param {Function|String} callbackOrUrl\n     * @returns {DataGrid}\n     */\r\n    refresh(callbackOrUrl = null) {\r\n        this.data = this.originalData = [];\r\n        return this.reload(callbackOrUrl);\r\n    }\r\n\n    /**\n     * Reloads data from url.\n     * @param {Function|String} callbackOrUrl\n     * @returns {DataGrid}\n     */\r\n    reload(callbackOrUrl = null) {\r\n        this.log(\"reload\");\r\n        if (typeof callbackOrUrl === \"string\") {\n            this.options.url = callbackOrUrl;\n        }\r\n        // If the data was cleared, we need to render again\r\n        const needRender = !this.originalData?.length;\r\n        this.fixPage();\r\n        // @ts-ignore\r\n        return this.loadData().finally(() => {\r\n            if (this.hasDataError) return;\r\n            // If we load data from the server, we redraw the table body\r\n            // Otherwise, we just need to paginate\r\n            this.options.server || needRender ? this.renderBody() : this.paginate();\r\n            if (typeof callbackOrUrl === \"function\") {\r\n                callbackOrUrl();\r\n            }\r\n        }).then(() => this);\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    loadData() {\r\n        const flagEmpty = () => !this.data.length && this.classList.add(\"dg-empty\");\r\n        const tbody = this.tbody;\r\n\r\n        // We already have some data\r\n        if (this.meta || this.originalData || this.isInit) {\r\n            // We don't use server side data\r\n            if (!this.options.server || (this.options.server && !this.fireEvents)) {\r\n                this.log(\"skip loadData\");\r\n                flagEmpty();\r\n                return new Promise((resolve) => {\r\n                    resolve();\r\n                });\r\n            }\r\n        }\r\n        this.log(\"loadData\");\r\n        this.loading = true;\r\n        this.classList.add(\"dg-loading\");\r\n        this.classList.remove(\"dg-empty\", \"dg-network-error\");\r\n        return (\r\n            this.fetchData()\r\n                .then((response) => {\r\n                    // We can get a straight array or an object\r\n                    if (Array.isArray(response)) {\r\n                        this.data = response;\r\n                    } else {\r\n                        // Object must contain data key\r\n                        if (!response[this.options.serverParams.dataKey]) {\r\n                            console.error(\r\n                                \"Invalid response, it should contain a data key with an array or be a plain array\",\r\n                                response,\r\n                            );\r\n                            this.options.url = null;\r\n                            return;\r\n                        }\r\n\r\n                        // We may have a config object\r\n                        this.options = Object.assign(\r\n                            this.options,\r\n                            response[this.options.serverParams.optionsKey] ?? {},\r\n                        );\r\n                        // It should return meta data (see metaFilteredKey)\r\n                        this.meta = response[this.options.serverParams.metaKey] ?? {};\r\n                        this.data = response[this.options.serverParams.dataKey];\r\n                    }\r\n                    this.originalData = this.data.slice();\r\n                    this.fixPage();\r\n\r\n                    // Make sure we have a proper set of columns\r\n                    if (this.options.columns.length === 0 && this.originalData.length) {\r\n                        this.options.columns = this.convertColumns(Object.keys(this.originalData[0]));\r\n                    } else {\r\n                        this.options.columns = this.convertColumns(this.options.columns);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.log(err);\r\n                    tbody.setAttribute(\r\n                        \"data-empty\",\r\n                        this.options.errorMessage ||\r\n                            err.message?.replace(/^\\s+|\\r\\n|\\n|\\r$/g, \"\") ||\r\n                            labels.networkError,\r\n                    );\r\n                    this.classList.add(\"dg-empty\", \"dg-network-error\");\r\n                    dispatch(this, \"loadDataFailed\", err);\r\n                })\r\n                // @ts-ignore\r\n                .finally(() => {\r\n                    flagEmpty();\r\n                    this.#setNoData(tbody);\r\n                    this.classList.remove(\"dg-loading\");\r\n                    setAttribute(this.table, \"aria-rowcount\", this.data.length);\r\n                    this.loading = false;\r\n                })\r\n        );\r\n    }\r\n\r\n    getFirst() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = 1;\r\n    }\r\n\r\n    getLast() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.pages;\r\n    }\r\n\r\n    getPrev() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.page - 1;\r\n    }\r\n\r\n    getNext() {\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n        this.page = this.page + 1;\r\n    }\r\n\r\n    gotoPage(event) {\r\n        if (event.type === \"keypress\") {\r\n            const key = event.keyCode || event.key;\r\n            if (key === 13 || key === \"Enter\") {\r\n                event.preventDefault();\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        this.page = Number.parseInt(this.inputPage.value);\r\n    }\r\n\r\n    getSort() {\r\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        if (col) {\r\n            return col.getAttribute(\"field\");\r\n        }\r\n        return this.options.defaultSort;\r\n    }\r\n\r\n    getSortDir() {\r\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        if (col) {\r\n            return col.getAttribute(\"aria-sort\") || \"\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getFilters() {\r\n        const filters = [];\r\n        const inputs = findAll(this, this._filterSelector);\r\n        for (const input of inputs) {\r\n            filters[input.dataset.name] = input.value;\r\n        }\r\n        return filters;\r\n    }\r\n\r\n    clearFilters() {\r\n        const inputs = findAll(this, this._filterSelector);\r\n        for (const input of inputs) {\r\n            input.value = \"\";\r\n        }\r\n        this.filterData();\r\n    }\r\n\r\n    filterData() {\r\n        this.log(\"filter data\");\r\n\r\n        this.page = 1;\r\n\r\n        if (this.options.server) {\r\n            this.reload();\r\n        } else {\r\n            this.data = this.originalData?.slice() ?? [];\r\n\r\n            // Look for rows matching the filters\r\n            const inputs = findAll(this, this._filterSelector);\r\n            for (const input of inputs) {\r\n                const value = input.value;\r\n                if (value) {\r\n                    const name = input.dataset.name;\r\n                    this.data = this.data.filter((item) => {\r\n                        const str = `${item[name]}`;\r\n                        return str.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n                    });\r\n                }\r\n            }\r\n            this.pageChanged();\r\n\r\n            const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n            if (this.options.sort && col) {\r\n                this.sortData();\r\n            } else {\r\n                this.renderBody();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data will be sorted then rendered using renderBody\r\n     * @param {Element} baseCol The column that was clicked or null to use current sort\r\n     */\r\n    sortData(baseCol = null) {\r\n        this.log(\"sort data\");\r\n\r\n        let col = baseCol;\r\n\r\n        // Early exit\r\n        if (col && this.getColProp(col.getAttribute(\"field\"), \"noSort\")) {\r\n            this.log(\"sorting prevented because column is not sortable\");\r\n            return;\r\n        }\r\n        if (this.plugins.ColumnResizer?.isResizing) {\r\n            this.log(\"sorting prevented because resizing\");\r\n            return;\r\n        }\r\n        if (this.loading) {\r\n            this.log(\"sorting prevented because loading\");\r\n            return;\r\n        }\r\n\r\n        // We clicked on a column, update sort state\r\n        if (col !== null) {\r\n            // Remove active sort if any\r\n            const haveClasses = (c) => [\"dg-selectable\", \"dg-actions\", \"dg-responsive-toggle\"].includes(c);\r\n\r\n            const headers = findAll(this, \"thead tr:first-child th\");\r\n            for (const th of headers) {\r\n                // @ts-ignore\r\n                if ([...th.classList].some(haveClasses) || !th.hasAttribute(\"aria-sort\")) {\r\n                    continue;\r\n                }\r\n                if (th !== col) {\r\n                    th.setAttribute(\"aria-sort\", \"none\");\r\n                }\r\n            }\r\n\r\n            // Set tristate col\r\n            if (!col.hasAttribute(\"aria-sort\") || col.getAttribute(\"aria-sort\") === \"none\") {\r\n                col.setAttribute(\"aria-sort\", \"ascending\");\r\n            } else if (col.getAttribute(\"aria-sort\") === \"ascending\") {\r\n                col.setAttribute(\"aria-sort\", \"descending\");\r\n            } else if (col.getAttribute(\"aria-sort\") === \"descending\") {\r\n                col.setAttribute(\"aria-sort\", \"none\");\r\n            }\r\n        } else {\r\n            // Or fetch current sort\r\n            col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\r\n        }\r\n\r\n        if (this.options.server) {\r\n            // Reload data with updated sort\r\n            this.loadData().finally(() => {\r\n                this.renderBody();\r\n            });\r\n        } else {\r\n            const sort = col ? col.getAttribute(\"aria-sort\") : \"none\";\r\n            if (sort === \"none\") {\r\n                const stack = [];\r\n\r\n                // Restore order while keeping filters\r\n                this.originalData?.some((itemA) => {\r\n                    this.data.some((itemB) => {\r\n                        if (JSON.stringify(itemA) === JSON.stringify(itemB)) {\r\n                            stack.push(itemB);\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    return stack.length === this.data.length;\r\n                });\r\n\r\n                this.data = stack;\r\n            } else {\r\n                const field = col.getAttribute(\"field\");\r\n                this.data.sort((a, b) => {\r\n                    if (!isNaN(a[field]) && !isNaN(b[field])) {\r\n                        return sort === \"ascending\" ? a[field] - b[field] : b[field] - a[field];\r\n                    }\r\n                    const valA = sort === \"ascending\" ? a[field].toUpperCase() : b[field].toUpperCase();\r\n                    const valB = sort === \"ascending\" ? b[field].toUpperCase() : a[field].toUpperCase();\r\n\r\n                    switch (true) {\r\n                        case valA > valB:\r\n                            return 1;\r\n                        case valA < valB:\r\n                            return -1;\r\n                        case valA === valB:\r\n                            return 0;\r\n                    }\r\n                });\r\n            }\r\n            this.renderBody();\r\n        }\r\n    }\r\n\r\n    _sort(columnName, sortDir) {\r\n        const col = this.querySelector(`.dg-head-columns th[field=${columnName}]`);\r\n        const dir = sortDir === \"ascending\" ? \"none\" : sortDir === \"descending\" ? \"ascending\" : \"descending\";\r\n        col?.setAttribute(\"aria-sort\", dir);\r\n        this.sortData(col);\r\n    }\r\n\r\n    sortAsc = (columnName) => this._sort(columnName, \"ascending\");\r\n    sortDesc = (columnName) => this._sort(columnName, \"descending\");\r\n    sortNone = (columnName) => this._sort(columnName, \"none\");\r\n\r\n    fetchData() {\r\n        if (!this.options.url) {\r\n            return new Promise((resolve, reject) => reject(\"No url set\"));\r\n        }\r\n\r\n        let base = window.location.href;\r\n        // Fix trailing slash if no extension is present\r\n        if (!base.split(\"/\").pop().includes(\".\")) {\r\n            base += base.endsWith(\"/\") ? \"\" : \"/\";\r\n        }\r\n        const url = new URL(this.options.url, base);\r\n        let params = {\r\n            r: Date.now(),\r\n        };\r\n        if (this.options.server) {\r\n            // 0 based\r\n            params[this.options.serverParams.start] = this.page - 1;\r\n            params[this.options.serverParams.length] = this.options.perPage;\r\n            if (this.options.filter) params[this.options.serverParams.search] = this.getFilters();\r\n            params[this.options.serverParams.sort] = this.getSort() || \"\";\r\n            params[this.options.serverParams.sortDir] = this.getSortDir();\r\n\r\n            // extra params ?\r\n            if (this.meta?.[this.options.serverParams.paramsKey]) {\r\n                params = Object.assign(params, this.meta[this.options.serverParams.paramsKey]);\r\n            }\r\n        }\r\n\r\n        appendParamsToUrl(url, params);\r\n\r\n        return fetch(url).then((response) => {\r\n            const newError = new Error(response.statusText || labels.networkError);\r\n            if (!response.ok) {\r\n                // @ts-ignore\r\n                newError.response = response;\r\n                throw newError;\r\n            }\r\n            return response\r\n                .clone()\r\n                .json()\r\n                .catch((err) => {\r\n                    let error = err;\r\n                    if (!this.options.debug) {\r\n                        error = newError;\r\n                    }\r\n                    error.response = response;\r\n                    throw error;\r\n                });\r\n        });\r\n    }\r\n\r\n    renderTable() {\r\n        this.log(\"render table\");\r\n\r\n        if (this.options.menu && this.plugins.ContextMenu) {\r\n            this.plugins.ContextMenu.createMenu();\r\n        }\r\n\r\n        let sortedColumn;\r\n\r\n        this.renderHeader();\r\n        if (this.options.defaultSort) {\r\n            // We can have a default sort even with sort disabled\r\n            sortedColumn = this.querySelector(`thead tr.dg-head-columns th[field=\"${this.options.defaultSort}\"]`);\r\n        }\r\n\r\n        if (sortedColumn) {\r\n            this.sortData(sortedColumn);\r\n        } else {\r\n            this.renderBody();\r\n        }\r\n\r\n        this.renderFooter();\r\n    }\r\n\r\n    /**\r\n     * Create table header\r\n     * - One row for the column headers\r\n     * - One row for the filters\r\n     */\r\n    renderHeader() {\r\n        this.log(\"render header\");\r\n\r\n        const thead = this.thead;\r\n        this.createColumnHeaders(thead);\r\n        this.createColumnFilters(thead);\r\n\r\n        if (this.options.resizable && this.plugins.ColumnResizer) {\r\n            this.plugins.ColumnResizer.renderResizer(labels.resizeColumn);\r\n        }\r\n\r\n        dispatch(this, \"headerRendered\");\r\n    }\r\n\r\n    renderFooter() {\r\n        this.log(\"render footer\");\r\n\r\n        const tfoot = this.tfoot;\r\n        if (!tfoot) return;\n        const td = tfoot.querySelector(\"td\");\r\n        tfoot.removeAttribute(\"hidden\");\r\n        setAttribute(td, \"colspan\", this.columnsLength(true));\r\n        tfoot.style.display = \"\";\r\n    }\r\n\r\n    /**\r\n     * Create the column headers based on column definitions and set options\r\n     * @param {HTMLTableSectionElement} thead\r\n     */\r\n    createColumnHeaders(thead) {\r\n        // @link https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n        const availableWidth = this.clientWidth;\r\n        const colMaxWidth = Math.round((availableWidth / this.columnsLength(true)) * 2);\r\n\r\n        let idx = 0;\r\n        let tr;\r\n\r\n        // Create row\r\n        tr = ce(\"tr\");\r\n        this.headerRow = tr;\r\n        tr.setAttribute(\"role\", \"row\");\r\n        tr.setAttribute(\"aria-rowindex\", \"1\");\r\n        tr.setAttribute(\"class\", \"dg-head-columns\");\r\n\r\n        // We need a real th from the dom to compute the size\r\n        let sampleTh = thead?.querySelector(\"tr.dg-head-columns th\");\n        this.log(\"createColumnHeaders - sampleTh\", sampleTh);\r\n        if (!sampleTh) {\r\n            sampleTh = ce(\"th\");\r\n            thead?.querySelector(\"tr\").appendChild(sampleTh);\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.createHeaderCol(tr);\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            this.plugins.ResponsiveGrid.createHeaderCol(tr);\r\n        }\r\n\r\n        // Create columns\r\n        idx = 0;\r\n        let totalWidth = 0;\r\n        this.log(\"createColumnHeaders - columns\", this.options.columns);\r\n\r\n        for (const column of this.options.columns) {\r\n            if (column.attr) {\r\n                continue;\r\n            }\r\n            const colIdx = idx + this.startColIndex();\r\n            const th = ce(\"th\");\r\n            th.setAttribute(\"scope\", \"col\");\r\n            th.setAttribute(\"role\", \"columnheader button\");\r\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\r\n            th.setAttribute(\"id\", randstr(\"dg-col-\"));\r\n            if (this.options.sort) {\r\n                th.setAttribute(\"aria-sort\", \"none\");\r\n            }\r\n            th.setAttribute(\"field\", column.field);\r\n            if (this.plugins.ResponsiveGrid && this.options.responsive) {\r\n                setAttribute(th, \"data-responsive\", column.responsive || \"\");\r\n            }\r\n            // Make sure the header fits (+ add some room for sort icon if necessary)\r\n            const computedWidth = getTextWidth(column.title, sampleTh, true) + 20;\r\n            th.dataset.minWidth = `${computedWidth}`;\r\n            applyColumnDefinition(th, column);\r\n            th.tabIndex = 0;\r\n            th.textContent = column.title;\r\n\r\n            let w = 0;\r\n            // Autosize small based on first/last row ?\r\n            // Take into account minWidth of the header and max available size based on col numbers\r\n            if (this.options.autosize && this.plugins.AutosizeColumn) {\r\n                const colAvailableWidth = Math.min(availableWidth - totalWidth, colMaxWidth);\r\n                w = this.plugins.AutosizeColumn.computeSize(\r\n                    th,\r\n                    column,\r\n                    Number.parseInt(th.dataset.minWidth),\r\n                    colAvailableWidth,\r\n                );\r\n            } else {\r\n                w = Math.max(Number.parseInt(th.dataset.minWidth), Number.parseInt(th.getAttribute(\"width\")));\r\n            }\r\n\r\n            setAttribute(th, \"width\", w);\r\n            if (column.hidden) {\r\n                th.setAttribute(\"hidden\", \"\");\r\n            } else {\r\n                totalWidth += w;\r\n            }\r\n\r\n            // Reorder columns with drag/drop\r\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\r\n                this.plugins.DraggableHeaders.makeHeaderDraggable(th);\r\n            }\r\n\r\n            tr.appendChild(th);\r\n            idx++;\r\n        }\r\n\r\n        // There is too much available width, and we want to avoid fixed layout to split remaining amount\r\n        if (totalWidth < availableWidth) {\r\n            const visibleCols = findAll(tr, \"th:not([hidden],.dg-not-resizable)\");\r\n            if (visibleCols.length) {\r\n                const lastCol = visibleCols[visibleCols.length - 1];\r\n                removeAttribute(lastCol, \"width\");\r\n            }\r\n        }\r\n\r\n        // Actions\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            this.plugins.RowActions.makeActionHeader(tr);\r\n        }\r\n\r\n        thead?.replaceChild(tr, thead.querySelector(\"tr.dg-head-columns\"));\r\n\r\n        // Once columns are inserted, we have an actual dom to query\r\n        if (thead && thead.offsetWidth > availableWidth) {\r\n            this.log(`adjust width to fix size, ${thead.offsetWidth} > ${availableWidth}`);\r\n            const scrollbarWidth = this.offsetWidth - this.clientWidth;\r\n            let diff = thead.offsetWidth - availableWidth - scrollbarWidth;\r\n            if (this.options.responsive && this.plugins.ResponsiveGrid) {\r\n                diff += scrollbarWidth;\r\n            }\r\n            // Remove diff for columns that can afford it\r\n            const thWithWidth = findAll(tr, \"th[width]\");\r\n\r\n            for (const th of thWithWidth) {\r\n                if (hasClass(th, \"dg-not-resizable\")) {\r\n                    continue;\r\n                }\r\n                if (diff <= 0) {\r\n                    continue;\r\n                }\r\n                const actualWidth = Number.parseInt(th.getAttribute(\"width\"));\r\n                const minWidth = th.dataset.minWidth ? Number.parseInt(th.dataset.minWidth) : 0;\r\n                if (actualWidth > minWidth) {\r\n                    let newWidth = actualWidth - diff;\r\n                    if (newWidth < minWidth) {\r\n                        newWidth = minWidth;\r\n                    }\r\n                    diff -= actualWidth - newWidth;\r\n                    setAttribute(th, \"width\", newWidth);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Context menu\r\n        if (this.options.menu && this.plugins.ContextMenu) {\r\n            this.plugins.ContextMenu.attachContextMenu();\r\n        }\r\n\r\n        // Sort col on click\r\n        const rowsWithSort = findAll(tr, \"[aria-sort]\");\r\n        for (const sortableRow of rowsWithSort) {\r\n            sortableRow.addEventListener(\"click\", () => this.sortData(sortableRow));\r\n        }\r\n\r\n        this.table && setAttribute(this.table, \"aria-colcount\", this.columnsLength(true));\r\n    }\r\n\r\n    createColumnFilters(thead) {\r\n        let idx = 0;\r\n        let tr;\r\n\r\n        // Create row for filters\r\n        tr = ce(\"tr\");\r\n        this.filterRow = tr;\r\n        tr.setAttribute(\"role\", \"row\");\r\n        tr.setAttribute(\"aria-rowindex\", \"2\");\r\n        tr.setAttribute(\"class\", \"dg-head-filters\");\r\n        if (!this.options.filter) {\r\n            tr.setAttribute(\"hidden\", \"\");\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.createFilterCol(tr);\r\n        }\r\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\r\n            this.plugins.ResponsiveGrid.createFilterCol(tr);\r\n        }\r\n\r\n        this.log(\"createColumnFilters - columns\", this.options.columns);\r\n        for (const column of this.options.columns) {\r\n            if (column.attr) {\r\n                continue;\r\n            }\r\n            const colIdx = idx + this.startColIndex();\r\n            const relatedTh = thead?.querySelector(`tr.dg-head-columns th[aria-colindex=\"${colIdx}\"]`);\r\n            if (!relatedTh) {\r\n                console.warn(\"Related th not found\", colIdx);\r\n                continue;\r\n            }\r\n            const th = ce(\"th\");\r\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\r\n\r\n            const filter = this.createFilterElement(column, relatedTh);\r\n            if (!this.options.filter) {\r\n                th.tabIndex = 0;\r\n            } else {\r\n                filter.tabIndex = 0;\r\n            }\r\n\r\n            if (column.hidden) {\r\n                th.setAttribute(\"hidden\", \"\");\r\n            }\r\n\r\n            th.appendChild(filter);\r\n            tr.appendChild(th);\r\n            idx++;\r\n        }\r\n\r\n        // Actions\r\n        if (this.options.actions.length && this.plugins.RowActions) {\r\n            this.plugins.RowActions.makeActionFilter(tr);\r\n        }\r\n\r\n        thead?.replaceChild(tr, thead.querySelector(\"tr.dg-head-filters\"));\r\n\r\n        if (typeof this.options.filterKeypressDelay !== \"number\" || this.options.filterOnEnter)\r\n            this.options.filterKeypressDelay = 0;\r\n\r\n        // Filter content by field events\r\n        const filteredRows = findAll(tr, this._filterSelector);\r\n        for (const el of filteredRows) {\r\n            const eventName = /select/i.test(el.tagName) ? \"change\" : \"keyup\";\r\n            const eventHandler = debounce((e) => {\r\n                const key = e.keyCode || e.key;\r\n                const isKeyPressFilter = !this.options.filterOnEnter && !this._excludedKeys.some((k) => k === key);\r\n                if (key === 13 || key === \"Enter\" || isKeyPressFilter || e.type === \"change\") {\r\n                    this.filterData.call(this);\r\n                }\r\n            }, this.options.filterKeypressDelay);\r\n            el.addEventListener(eventName, eventHandler);\r\n        }\r\n    }\r\n\r\n    createFilterElement(column, relatedTh) {\r\n        const isSelect = column.filterType === \"select\";\r\n        const filter = isSelect ? ce(\"select\") : ce(\"input\");\r\n        if (isSelect) {\r\n            if (!Array.isArray(column.filterList)) {\r\n                // Gets unique values from column records\r\n                const uniqueValues = [...new Set((this.data ?? []).map((e) => e[column.field]))]\r\n                    .filter((v) => v)\r\n                    .sort();\r\n                column.filterList = [column.firstFilterOption || this.defaultColumn.firstFilterOption].concat(\r\n                    uniqueValues.map((e) => ({ value: e, text: e })),\r\n                );\r\n            }\r\n\r\n            for (const e of column.filterList) {\r\n                const opt = ce(\"option\");\r\n                opt.value = e.value;\r\n                opt.text = e.text;\r\n\r\n                if (filter instanceof HTMLSelectElement) {\r\n                    filter.add(opt);\r\n                }\r\n            }\r\n        } else {\r\n            //@ts-ignore\r\n            filter.type = \"text\";\r\n            filter.inputMode = \"search\";\r\n            filter.autocomplete = \"off\";\r\n            filter.spellcheck = false;\r\n        }\r\n        // Allows binding filter to this column\r\n        filter.dataset.name = column.field;\r\n        filter.id = randstr(\"dg-filter-\");\r\n        // Don't use aria-label as it triggers autocomplete\r\n        filter.setAttribute(\"aria-labelledby\", relatedTh.getAttribute(\"id\"));\r\n        return filter;\r\n    }\r\n\r\n    /**\r\n     * Render the data as rows in tbody\r\n     * It will call paginate() at the end\r\n     */\r\n    renderBody() {\r\n        this.log(\"render body\");\r\n        let tr;\r\n        let td;\r\n        let idx;\r\n        const tbody = ce(\"tbody\");\r\n\r\n        this.data.forEach((item, i) => {\r\n            tr = ce(\"tr\");\r\n            setAttribute(tr, \"role\", \"row\");\r\n            setAttribute(tr, \"hidden\", \"\");\r\n            setAttribute(tr, \"aria-rowindex\", i + 1);\r\n            tr.tabIndex = 0;\r\n\r\n            if (this.options.selectable && this.plugins.SelectableRows) {\r\n                this.plugins.SelectableRows.createDataCol(tr);\r\n            }\r\n            if (\r\n                this.options.responsive &&\r\n                this.plugins.ResponsiveGrid &&\r\n                this.plugins.ResponsiveGrid.hasHiddenColumns()\r\n            ) {\r\n                this.plugins.ResponsiveGrid.createDataCol(tr);\r\n            }\r\n\r\n            // Expandable\r\n            if (this.options.expand) {\r\n                tr.classList.add(\"dg-expandable\");\r\n\r\n                on(tr, \"click\", (ev) => {\n                    if (ev.target.matches(this._excludedRowElementSelector)) return;\r\n                    if (this.plugins.ResponsiveGrid) {\r\n                        this.plugins.ResponsiveGrid.blockObserver();\r\n                    }\r\n                    toggleClass(ev.currentTarget, \"dg-expanded\");\r\n                    if (this.plugins.ResponsiveGrid) {\r\n                        this.plugins.ResponsiveGrid.unblockObserver();\r\n                    }\r\n                });\r\n            }\r\n\r\n            idx = 0;\r\n\r\n            for (const column of this.options.columns) {\r\n                if (!column) {\r\n                    console.error(\"Empty column found!\", this.options.columns);\r\n                }\r\n                // It should be applied as an attr of the row\r\n                if (column.attr) {\r\n                    if (item[column.field]) {\r\n                        // Special case if we try to write over the class attr\r\n                        if (column.attr === \"class\") {\r\n                            addClass(tr, item[column.field]);\r\n                        } else {\r\n                            tr.setAttribute(column.attr, item[column.field]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                td = ce(\"td\");\r\n                td.setAttribute(\"role\", \"gridcell\");\r\n                td.setAttribute(\"aria-colindex\", `${idx}${this.startColIndex()}`);\r\n                applyColumnDefinition(td, column);\r\n                // This is required for pure css responsive layout\r\n                td.setAttribute(\"data-name\", column.title);\r\n                td.tabIndex = -1;\r\n\r\n                // Inline editing ...\r\n                if (column.editable && this.plugins.EditableColumn) {\r\n                    addClass(td, \"dg-editable-col\");\r\n                    this.plugins.EditableColumn.makeEditableInput(td, column, item, i);\r\n                } else {\r\n                    // ... or formatting\r\n                    const v = item[column.field] ?? \"\";\r\n                    let tv;\r\n                    // TODO: make this modular\r\n                    switch (column.transform) {\r\n                        case \"uppercase\":\r\n                            tv = v.toUpperCase();\r\n                            break;\r\n                        case \"lowercase\":\r\n                            tv = v.toLowerCase();\r\n                            break;\r\n                        default:\r\n                            tv = v;\r\n                            break;\r\n                    }\r\n                    if (column.format) {\r\n                        // Only use formatting with values or if defaultFormatValue is set\r\n                        if (column.defaultFormatValue !== undefined && (tv === \"\" || tv === null)) {\r\n                            tv = `${column.defaultFormatValue}`;\r\n                        }\r\n                        if (typeof column.format === \"string\" && tv) {\r\n                            td.innerHTML = interpolate(\r\n                                // @ts-ignore\r\n                                column.format,\r\n                                Object.assign(\r\n                                    {\r\n                                        _v: v,\r\n                                        _tv: tv,\r\n                                    },\r\n                                    item,\r\n                                ),\r\n                            );\r\n                        } else if (column.format instanceof Function) {\r\n                            const val = column.format.call(this, { column, rowData: item, cellData: tv, td, tr });\r\n                            td.innerHTML = val || tv || v;\r\n                        }\r\n                    } else {\r\n                        td.textContent = tv;\r\n                    }\r\n                }\r\n                tr.appendChild(td);\r\n                idx++;\r\n            }\r\n\r\n            // Actions\r\n            if (this.options.actions.length && this.plugins.RowActions) {\r\n                this.plugins.RowActions.makeActionRow(tr, item);\r\n            }\r\n\r\n            tbody.appendChild(tr);\r\n\n            dispatch(this, \"rowRendered\", { rowData: item, tr });\r\n        });\r\n\r\n        tbody.setAttribute(\"role\", \"rowgroup\");\r\n\r\n        // Keep data empty message\r\n        const prev = this.tbody;\r\n        prev && tbody.setAttribute(\"data-empty\", prev.getAttribute(\"data-empty\"));\r\n        this.table?.replaceChild(tbody, prev);\r\n\r\n        if (this.plugins.FixedHeight) {\r\n            this.plugins.FixedHeight.createFakeRow();\r\n        }\r\n\r\n        this.paginate();\r\n\r\n        if (this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.shouldSelectAll(tbody);\r\n        }\r\n\r\n        this.classList.toggle(\"dg-empty\", !this.data.length);\r\n\r\n        dispatch(this, \"bodyRendered\");\r\n    }\r\n\r\n    paginate() {\r\n        this.log(\"paginate\");\r\n\r\n        const total = this.totalRecords();\r\n        const p = this.page || 1;\r\n        const tbody = this.tbody;\r\n        const tfoot = this.tfoot;\r\n        if (!tbody || !tfoot) return;\n        const bodyRows = findAll(tbody, \"tr\");\r\n\r\n        // Refresh page count in case we added/removed a page\r\n        this.pages = this.totalPages();\r\n\r\n        let index;\r\n        let high = p * this.options.perPage;\r\n        let low = high - this.options.perPage + 1;\r\n\r\n        if (high > total) {\r\n            high = total;\r\n        }\r\n        if (!total) {\r\n            low = 0;\r\n        }\r\n\r\n        // Display all rows within the set indexes\r\n        // For server side paginated grids, we display everything\r\n        // since the server is taking care of actual pagination\r\n        for (const tr of bodyRows) {\r\n            if (this.options.server) {\r\n                removeAttribute(tr, \"hidden\");\r\n                continue;\r\n            }\r\n            index = Number(getAttribute(tr, \"aria-rowindex\"));\r\n            if (index > high || index < low) {\r\n                setAttribute(tr, \"hidden\", \"\");\r\n            } else {\r\n                removeAttribute(tr, \"hidden\");\r\n            }\r\n        }\r\n\r\n        if (this.options.selectable && this.plugins.SelectableRows) {\r\n            this.plugins.SelectableRows.clearCheckboxes(tbody);\r\n        }\r\n\r\n        // Store default height and update styles if needed\r\n        if (this.plugins.FixedHeight) {\r\n            this.plugins.FixedHeight.updateFakeRow();\r\n        }\r\n\r\n        // Enable/disable buttons if shown\r\n        if (this.btnFirst) {\r\n            this.btnFirst.disabled = this.page <= 1;\r\n            this.btnPrev.disabled = this.page <= 1;\r\n            this.btnNext.disabled = this.page >= this.pages;\r\n            this.btnLast.disabled = this.page >= this.pages;\r\n        }\r\n        tfoot.querySelector(\".dg-low\").textContent = low.toString();\r\n        tfoot.querySelector(\".dg-high\").textContent = high.toString();\r\n        tfoot.querySelector(\".dg-total\").textContent = `${this.totalRecords()}`;\r\n        tfoot.toggleAttribute(\"hidden\", this.options.autohidePager && this.options.perPage > this.totalRecords());\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    totalPages() {\r\n        return Math.ceil(this.totalRecords() / this.options.perPage);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    totalRecords() {\r\n        if (this.options.server) {\r\n            return this.meta?.[this.options.serverParams.metaFilteredKey] || 0;\r\n        }\r\n        return this.data.length;\r\n    }\r\n}\r\n\r\nexport default DataGrid;\r\n", "/** @typedef {import(\"../data-grid\").default} DataGrid */\r\n\r\nclass BasePlugin {\r\n    /**\r\n     * @param {DataGrid} grid\r\n     */\r\n    constructor(grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    connected() {}\r\n\r\n    disconnected() {}\r\n\r\n    /**\r\n     * Handle events within the plugin\r\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\r\n     * @param {Event} event\r\n     */\r\n    handleEvent(event) {\r\n        if (this[`on${event.type}`]) {\r\n            this[`on${event.type}`](event);\r\n        }\r\n    }\r\n}\r\n\r\nexport default BasePlugin;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport elementOffset from \"../utils/elementOffset.js\";\r\nimport {\r\n    addClass,\r\n    dispatch,\r\n    findAll,\r\n    getAttribute,\r\n    hasClass,\r\n    off,\r\n    on,\r\n    removeAttribute,\r\n    removeClass,\r\n    setAttribute,\r\n} from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to resize columns\r\n */\r\nclass ColumnResizer extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.isResizing = false;\r\n    }\r\n\r\n    /**\r\n     * @param {String} resizeLabel\r\n     */\r\n    renderResizer(resizeLabel) {\r\n        const grid = this.grid;\r\n        const table = grid.table;\r\n        const cols = findAll(grid, \"thead tr.dg-head-columns th\");\r\n\r\n        for (const col of cols) {\r\n            if (hasClass(col, \"dg-not-resizable\")) {\r\n                continue;\r\n            }\r\n            // Create a resizer element\r\n            const resizer = document.createElement(\"div\");\r\n            addClass(resizer, \"dg-resizer\");\r\n            resizer.ariaLabel = resizeLabel;\r\n\r\n            // Add a resizer element to the column\r\n            col.appendChild(resizer);\r\n\r\n            // Handle resizing\r\n            let startX = 0;\r\n            let startW = 0;\r\n            let remainingSpace = 0;\r\n            let max = 0;\r\n\r\n            const mouseMoveHandler = (e) => {\r\n                if (e.clientX > max) {\r\n                    return;\r\n                }\r\n                const newWidth = startW + (e.clientX - startX);\r\n                if (col.dataset.minWidth && newWidth > Number.parseInt(col.dataset.minWidth)) {\r\n                    setAttribute(col, \"width\", newWidth);\r\n                }\r\n            };\r\n\r\n            // When user releases the mouse, remove the existing event listeners\r\n            const mouseUpHandler = () => {\r\n                grid.log(\"resized column\");\r\n\r\n                // Prevent accidental sorting if mouse is not over resize handler\r\n                setTimeout(() => {\r\n                    this.isResizing = false;\r\n                }, 0);\r\n\r\n                removeClass(resizer, \"dg-resizer-active\");\r\n                if (grid.options.reorder) {\r\n                    col.draggable = true;\r\n                }\r\n                col.style.overflow = \"hidden\";\r\n\r\n                // Remove handlers\r\n                off(document, \"mousemove\", mouseMoveHandler);\r\n                off(document, \"mouseup\", mouseUpHandler);\r\n\r\n                dispatch(grid, \"columnResized\", {\r\n                    col: getAttribute(col, \"field\"),\r\n                    width: getAttribute(col, \"width\"),\r\n                });\r\n            };\r\n\r\n            // Otherwise it could sort the col\r\n            on(resizer, \"click\", (e) => {\r\n                e.stopPropagation();\r\n            });\r\n\r\n            on(resizer, \"mousedown\", (e) => {\r\n                e.stopPropagation();\r\n\r\n                this.isResizing = true;\r\n\r\n                const target = e.target;\r\n                const currentCols = findAll(grid, \"dg-head-columns th\");\r\n                const visibleCols = currentCols.filter((col) => {\r\n                    return !col.hasAttribute(\"hidden\");\r\n                });\r\n                const columnIndex = visibleCols.findIndex((column) => column === target.parentNode);\r\n                grid.log(\"resize column\");\r\n\r\n                addClass(resizer, \"dg-resizer-active\");\r\n\r\n                // Make sure we don't drag it\r\n                removeAttribute(col, \"draggable\");\r\n\r\n                // Allow overflow when resizing\r\n                col.style.overflow = \"visible\";\r\n\r\n                // Show full column height (-1 to avoid scrollbar)\r\n                resizer.style.height = `${table.offsetHeight - 1}px`;\r\n\r\n                // Register initial data\r\n                startX = e.clientX;\r\n                startW = col.offsetWidth;\r\n\r\n                remainingSpace = (visibleCols.length - columnIndex) * 30;\r\n                max = elementOffset(target).left + grid.offsetWidth - remainingSpace;\r\n\r\n                // Remove width from next columns to allow auto layout\r\n                setAttribute(col, \"width\", startW);\r\n                for (let j = 0; j < visibleCols.length; j++) {\r\n                    if (j > columnIndex) {\r\n                        removeAttribute(cols[j], \"width\");\r\n                    }\r\n                }\r\n\r\n                // Attach handlers\r\n                on(document, \"mousemove\", mouseMoveHandler);\r\n                on(document, \"mouseup\", mouseUpHandler);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ColumnResizer;\r\n", "/**\r\n * @param {HTMLElement} el\r\n * @param {String} type\r\n * @param {String} prop\r\n * @returns {HTMLElement}\r\n */\r\nexport default function getParentElement(el, type, prop = \"nodeName\") {\r\n    let parent = el;\r\n    while (parent[prop] !== type) {\r\n        parent = parent.parentElement;\r\n    }\r\n    return parent;\r\n}\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getParentElement from \"../utils/getParentElement.js\";\r\nimport { find, off, on, removeAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Create a right click menu on the headers\r\n */\r\nclass ContextMenu extends BasePlugin {\r\n    connected() {\r\n        /**\r\n         * @type {HTMLUListElement}\r\n         */\r\n        this.menu = this.grid.querySelector(\".dg-menu\");\r\n    }\r\n    disconnected() {\r\n        if (this.grid.headerRow) {\r\n            off(this.grid.headerRow, \"contextmenu\", this);\r\n        }\r\n    }\r\n\r\n    attachContextMenu() {\r\n        const grid = this.grid;\r\n        on(grid.headerRow, \"contextmenu\", this);\r\n    }\r\n\r\n    onchange(e) {\r\n        const grid = this.grid;\r\n        const t = e.target;\r\n        const field = t.dataset.name;\r\n        if (t.checked) {\r\n            grid.showColumn(field);\r\n        } else {\r\n            // Prevent hidding last\r\n            if (grid.visibleColumns().length <= 1) {\r\n                // Restore checkbox value\r\n                t.checked = true;\r\n                return;\r\n            }\r\n            grid.hideColumn(field);\r\n        }\r\n        grid.fixPage(); //fixes Chrome footer flexbox resize issues that may appear when there is a large number of columns (i.e. more than 10).\r\n    }\r\n\r\n    oncontextmenu(e) {\r\n        e.preventDefault();\r\n        const grid = this.grid;\r\n        const target = getParentElement(e.target, \"THEAD\");\r\n        const menu = this.menu;\r\n        const rect = target.getBoundingClientRect();\r\n        let x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        menu.style.top = `${y}px`;\r\n        menu.style.left = `${x}px`;\r\n\r\n        removeAttribute(menu, \"hidden\");\r\n        if (x + 150 > rect.width) {\r\n            x -= menu.offsetWidth;\r\n            menu.style.left = `${x}px`;\r\n        }\r\n\r\n        const documentClickHandler = (e) => {\r\n            if (!menu.contains(e.target)) {\r\n                setAttribute(menu, \"hidden\", \"\");\r\n                off(document, \"click\", documentClickHandler);\r\n            }\r\n        };\r\n        on(document, \"click\", documentClickHandler);\r\n    }\r\n    createMenu() {\r\n        const grid = this.grid;\r\n        const menu = this.menu;\r\n        while (menu.lastChild) {\r\n            menu.removeChild(menu.lastChild);\r\n        }\r\n        menu.addEventListener(\"change\", this);\r\n\r\n        for (const col of grid.options.columns) {\r\n            if (col.attr) {\r\n                continue;\r\n            }\r\n            const li = document.createElement(\"li\");\r\n            const label = document.createElement(\"label\");\r\n            const checkbox = document.createElement(\"input\");\r\n            setAttribute(checkbox, \"type\", \"checkbox\");\r\n            setAttribute(checkbox, \"data-name\", col.field);\r\n            if (!col.hidden) {\r\n                checkbox.checked = true;\r\n            }\r\n            const text = document.createTextNode(col.title);\r\n\r\n            label.appendChild(checkbox);\r\n            label.appendChild(text);\r\n\r\n            li.appendChild(label);\r\n            menu.appendChild(li);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ContextMenu;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getParentElement from \"../utils/getParentElement.js\";\r\nimport { dispatch, findAll, getAttribute, on, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to move headers\r\n */\r\nclass DraggableHeaders extends BasePlugin {\r\n    /**\r\n     * @param {HTMLTableCellElement} th\r\n     */\r\n    makeHeaderDraggable(th) {\r\n        const grid = this.grid;\r\n        th.draggable = true;\r\n        on(th, \"dragstart\", (e) => {\r\n            if (grid.plugins.ColumnResizer?.isResizing && e.preventDefault) {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            grid.log(\"reorder col\");\r\n            e.dataTransfer.effectAllowed = \"move\";\r\n            e.dataTransfer.setData(\"text/plain\", e.target.getAttribute(\"aria-colindex\"));\r\n        });\r\n        on(th, \"dragover\", (e) => {\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.dataTransfer.dropEffect = \"move\";\r\n            return false;\r\n        });\r\n        on(th, \"drop\", (e) => {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            const t = e.target;\r\n            const target = getParentElement(t, \"TH\");\r\n            const index = Number.parseInt(e.dataTransfer.getData(\"text/plain\"));\r\n            const targetIndex = Number.parseInt(target.getAttribute(\"aria-colindex\"));\r\n\r\n            if (index === targetIndex) {\r\n                grid.log(\"reordered col stayed the same\");\r\n                return;\r\n            }\r\n            grid.log(`reordered col from ${index} to ${targetIndex}`);\r\n\r\n            const offset = grid.startColIndex();\r\n            const tmp = grid.options.columns[index - offset];\r\n            grid.options.columns[index - offset] = grid.options.columns[targetIndex - offset];\r\n            grid.options.columns[targetIndex - offset] = tmp;\r\n\r\n            const swapNodes = (selector, el1) => {\r\n                const rowIndex = el1.parentNode.getAttribute(\"aria-rowindex\");\r\n                const el2 = grid.querySelector(\r\n                    `${selector} tr[aria-rowindex=\"${rowIndex}\"] [aria-colindex=\"${targetIndex}\"]`,\r\n                );\r\n                setAttribute(el1, \"aria-colindex\", targetIndex);\r\n                setAttribute(el2, \"aria-colindex\", index);\r\n                const newNode = document.createElement(\"th\");\r\n                el1.parentNode.insertBefore(newNode, el1);\r\n                el2.parentNode.replaceChild(el1, el2);\r\n                newNode.parentNode.replaceChild(el2, newNode);\r\n            };\r\n\r\n            // Swap all rows in header and body\r\n            for (const el1 of findAll(grid, `thead th[aria-colindex=\"${index}\"]`)) {\r\n                swapNodes(\"thead\", el1);\r\n            }\r\n            for (const el1 of findAll(grid, `tbody td[aria-colindex=\"${index}\"]`)) {\r\n                swapNodes(\"tbody\", el1);\r\n            }\r\n\r\n            // Updates the columns\r\n            grid.options.columns = findAll(grid, \"thead tr.dg-head-columns th[field]\").map((th) =>\r\n                grid.options.columns.find((c) => c.field === getAttribute(th, \"field\")),\r\n            );\r\n\r\n            dispatch(grid, \"columnReordered\", {\r\n                col: tmp.field,\r\n                from: index,\r\n                to: targetIndex,\r\n            });\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default DraggableHeaders;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\n\r\n/**\r\n * Allows to paginate with horizontal swipe motions\r\n */\r\nclass TouchSupport extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.touch = null;\r\n    }\r\n    connected() {\r\n        const grid = this.grid;\r\n        grid.addEventListener(\"touchstart\", this, { passive: true });\r\n        grid.addEventListener(\"touchmove\", this, { passive: true });\r\n    }\r\n\r\n    disconnected() {\r\n        const grid = this.grid;\r\n        grid.removeEventListener(\"touchstart\", this);\r\n        grid.removeEventListener(\"touchmove\", this);\r\n    }\r\n\r\n    ontouchstart(e) {\r\n        this.touch = e.touches[0];\r\n    }\r\n\r\n    ontouchmove(e) {\r\n        if (!this.touch) {\r\n            return;\r\n        }\r\n        const grid = this.grid;\r\n        const xDiff = this.touch.clientX - e.touches[0].clientX;\r\n        const yDiff = this.touch.clientY - e.touches[0].clientY;\r\n\r\n        if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n            if (xDiff > 0) {\r\n                grid.getNext();\r\n            } else {\r\n                grid.getPrev();\r\n            }\r\n        }\r\n        this.touch = null;\r\n    }\r\n}\r\n\r\nexport default TouchSupport;\r\n", "// @ts-nocheck\r\nimport BasePlugin from \"../core/base-plugin.js\";\r\nimport { dispatch, findAll, hasClass, setAttribute, $, $$ } from \"../utils/shortcuts.js\";\r\n\r\nconst SELECTABLE_CLASS = \"dg-selectable\";\r\nconst SELECT_ALL_CLASS = \"dg-select-all\";\r\nconst CHECKBOX_CLASS = \"form-check-input\"; //bs5\n\r\n/**\r\n * Allows to select rows\r\n */\r\nclass SelectableRows extends BasePlugin {\n    #cbSelector = `tbody tr${this.visibleOnly ? \":not([hidden])\" : \"\"} .${SELECTABLE_CLASS} input[type=checkbox]`;\n    #inputSelector = `tbody .${SELECTABLE_CLASS} input`;\n\r\n    disconnected() {\r\n        if (this.selectAll) {\r\n            this.selectAll.removeEventListener(\"change\", this);\r\n        }\r\n    }\n\n    get isSingleSelect() {\n        return this.grid.options.singleSelect;\n    }\n\n    get visibleOnly() {\n        return this.grid.options.selectVisibleOnly;\n    }\n\r\n    /**\n     * Get selected rows or fields.\n     * Returns full rows, a single field's values, or objects with specified fields.\n     * In single select mode, returns a single item.\n     * @param {...string} keys Field names to select.\n     * @returns {Array|Object} Selected data.\n     */\n    getSelection(...keys) {\n        const grid = this.grid;\n        const selectedData = [];\n\n        const inputs = findAll(grid, `${this.#inputSelector}:checked`);\n\n        for (const checkbox of inputs) {\n            const idx = Number.parseInt(checkbox.dataset.id);\n            const item = grid.data[idx - 1];\n            if (!item) {\n                console.warn(`Item ${idx} not found`);\n                continue;\n            }\n            if (keys.length === 0) {\n                selectedData.push(item);\n            } else if (keys.length === 1) {\n                selectedData.push(item[keys[0]]);\n            } else {\n                selectedData.push(Object.fromEntries(keys.map(k => [k, item[k]])));\n            }\n        }\n        return this.isSingleSelect ? selectedData[0] ?? {} : selectedData;\n    }\r\n\r\n    /**\r\n     * Uncheck box if hidden and visible only\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\r\n    clearCheckboxes(tbody) {\r\n        const grid = this.grid;\r\n        if (!grid.options.selectVisibleOnly) {\r\n            return;\r\n        }\r\n        const inputs = findAll(tbody, `tr[hidden] .${SELECTABLE_CLASS} input`);\r\n        for (const input of inputs) {\r\n            input.checked = false;\n            if (this.isSingleSelect) {\n                input.dataset.toggled = \"false\"; // Reset toggled state for radio buttons\n            }\r\n        }\r\n        this.selectAll.checked = false;\n    }\r\n\r\n    colIndex() {\r\n        return this.grid.startColIndex() - 2;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createHeaderCol(tr) {\r\n        const th = document.createElement(\"th\");\r\n        setAttribute(th, \"scope\", \"col\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(...[SELECTABLE_CLASS, \"dg-not-resizable\", \"dg-not-sortable\"]);\r\n        th.tabIndex = 0;\r\n\n        this.selectAll = document.createElement(\"input\");\r\n        this.selectAll.type = \"checkbox\";\r\n        this.selectAll.classList.add(SELECT_ALL_CLASS);\r\n        this.selectAll.classList.add(CHECKBOX_CLASS);\r\n        this.selectAll.addEventListener(\"change\", this);\r\n\r\n        const label = document.createElement(\"label\");\n        label.hidden = this.isSingleSelect;\r\n        label.appendChild(this.selectAll);\r\n\r\n        th.appendChild(label);\n\r\n        th.setAttribute(\"width\", \"40\");\r\n        tr.appendChild(th);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createFilterCol(tr) {\r\n        const th = document.createElement(\"th\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(SELECTABLE_CLASS);\r\n        th.tabIndex = 0;\r\n\r\n        tr.appendChild(th);\r\n    }\r\n\r\n    /**\r\n     * Handles the selectAll checkbox when any other .dg-selectable checkbox is checked on table body.\r\n     * It should check selectAll if all is checked\r\n     * It should uncheck selectAll if any is unchecked\r\n     * @param {HTMLTableSectionElement} tbody\r\n     */\r\n    shouldSelectAll(tbody) {\r\n        if (!this.selectAll) {\r\n            return;\r\n        }\r\n        // Delegate listener for change events on input checkboxes\r\n        tbody.addEventListener(\"change\", this);\r\n        // Make sure state is up to date\r\n        tbody.dispatchEvent(new Event(\"change\"));\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createDataCol(tr) {\r\n        // Create col\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell button\");\r\n        setAttribute(td, \"aria-colindex\", this.colIndex());\r\n        td.classList.add(SELECTABLE_CLASS);\r\n\r\n        // Create input\r\n        const input = document.createElement(\"input\");\r\n        // Alias row id for easy retrieval in getSelection\r\n        input.dataset.id = tr.getAttribute(\"aria-rowindex\");\r\n        input.type = this.isSingleSelect ? \"radio\" : \"checkbox\";\r\n        input.classList.add(CHECKBOX_CLASS);\n        if (this.isSingleSelect) {\n            input.name = \"dg-row-select\";\n            input.dataset.toggled = \"false\";\n        }\n\r\n        // Label need to take full space thanks to css to make the whole cell clickable\r\n        const label = document.createElement(\"label\");\r\n        label.classList.add(\"dg-clickable-cell\");\n\r\n        label.appendChild(input);\r\n        td.appendChild(label);\r\n\r\n        // Prevent unwanted click behaviour on row\r\n        label.addEventListener(\"click\", this);\r\n\r\n        tr.appendChild(td);\r\n    }\r\n\r\n    /**\r\n     * @param {Event} e\r\n     */\r\n    onclick(e) {\n        if (!this.isSingleSelect) return e.stopPropagation();\n\n        // Implements radio button toggle behaviour for selecting and unselecting a row\n        const el = e.target,\n            unchecked = el.dataset.toggled !== \"true\";\n        unchecked && $$(`${this.#cbSelector.replace(\"checkbox\", \"radio\")}`, this.grid)?.forEach(r => {\n            // Uncheck all other radios in the same group and reset their data-toggled\n            if (r.name === el.name && r !== el) r.checked = r.dataset.toggled = false;\n        });\r\n        el.checked = el.dataset.toggled = unchecked;\n        !unchecked && this.onchange(e); // Fires rowsSelected event\r\n    }\r\n\r\n    /**\r\n     * Handle change event on select all or any select checkbox in the table body\r\n     * @param {import(\"../utils/shortcuts.js\").FlexibleEvent} e\r\n     */\r\n    onchange(e) {\n        const el = e.target, grid = this.grid;\n        if (hasClass(e.target, SELECT_ALL_CLASS)) {\n            findAll(grid, this.#inputSelector).forEach(cb => {\n                if (!this.visibleOnly || cb.offsetWidth) cb.checked = this.selectAll.checked;\n            });\n        } else if (el.matches(this.#cbSelector)) {\n            if (!el.closest(`.${SELECTABLE_CLASS}`)) return;\n            const totalCheckboxes = findAll(grid, this.#cbSelector);\n            this.selectAll.checked = totalCheckboxes.every(n => n.checked);\n        }\n        if (el.matches(`.${SELECT_ALL_CLASS},${this.#inputSelector}`)) {\r\n            dispatch(el, \"rowsSelected\", {\r\n                selection: grid.getSelection()\n            }, true);\r\n        }\n    }\r\n}\r\n\r\nexport default SelectableRows;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Support for fixed table height\r\n *\r\n * We should add a fake row to push the footer down in case we don't have enough rows\r\n */\r\nclass FixedHeight extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n\r\n        this.hasFixedHeight = false;\r\n        // If we have a fixed height, make sure we have overflowY set\r\n        if (grid.style.height) {\r\n            grid.style.overflowY = \"auto\";\r\n            this.hasFixedHeight = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n    createFakeRow() {\r\n        const grid = this.grid;\r\n        const tbody = grid.querySelector(\"tbody\");\r\n        const tr = document.createElement(\"tr\");\r\n        setAttribute(tr, \"role\", \"row\");\r\n        setAttribute(tr, \"hidden\", \"\");\r\n        tr.classList.add(\"dg-fake-row\");\r\n        tr.tabIndex = 0;\r\n        tbody?.appendChild(tr);\r\n    }\r\n\r\n    get fakeRow() {\r\n        return this.grid.querySelector(\".dg-fake-row\");\r\n    }\r\n\r\n    /**\r\n     * On last page, use a fake row to push footer down\r\n     */\r\n    updateFakeRow() {\r\n        const grid = this.grid;\r\n        const fakeRow = this.fakeRow;\r\n        if (!fakeRow) {\r\n            return;\r\n        }\r\n\r\n        // We don't need a fake row if we display everything\r\n        if (grid.options.perPage > grid.totalRecords()) {\r\n            return;\r\n        }\r\n        // We are not on last page\r\n        if (grid.page !== grid.totalPages()) {\r\n            return;\r\n        }\r\n        if (!grid.options.autoheight) {\r\n            return;\r\n        }\r\n        // Find remaining missing height\r\n        const max = grid.options.perPage * grid.rowHeight;\r\n        const visibleRows = grid.querySelectorAll(\"tbody tr:not([hidden])\").length;\r\n        const fakeHeight = visibleRows > 1 ? max - visibleRows * grid.rowHeight : max;\r\n        if (fakeHeight > 0) {\r\n            setAttribute(fakeRow, \"height\", fakeHeight);\r\n            fakeRow.removeAttribute(\"hidden\");\r\n        } else {\r\n            fakeRow.removeAttribute(\"height\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default FixedHeight;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport getTextWidth from \"../utils/getTextWidth.js\";\r\nimport { getAttribute, hasAttribute, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Allows to resize columns\r\n */\r\nclass AutosizeColumn extends BasePlugin {\r\n    /**\r\n     * Autosize col based on column data\r\n     * @param {HTMLTableCellElement} th\r\n     * @param {import(\"../data-grid\").Column} column\r\n     * @param {Number} min\r\n     * @param {Number} max\r\n     * @returns {Number}\r\n     */\r\n    computeSize(th, column, min, max) {\r\n        const grid = this.grid;\r\n        if (hasAttribute(th, \"width\")) {\r\n            return getAttribute(th, \"width\");\r\n        }\r\n        if (!grid.data.length) {\r\n            return;\r\n        }\r\n        const firstVal = grid.data[0];\r\n        const lastVal = grid.data[grid.data.length - 1];\r\n        let v = firstVal[column.field] ? firstVal[column.field].toString() : \"\";\r\n        const v2 = lastVal[column.field] ? lastVal[column.field].toString() : \"\";\r\n        if (v2.length > v.length) {\r\n            v = v2;\r\n        }\r\n        let width = 0;\r\n        if (v.length <= 6) {\r\n            width = min;\r\n        } else if (v.length > 50) {\r\n            width = max;\r\n        } else {\r\n            // Add some extra room to have some spare space\r\n            width = getTextWidth(`${v}0000`, th);\r\n        }\r\n        if (width > max) {\r\n            width = max;\r\n        }\r\n        if (width < min) {\r\n            width = min;\r\n        }\r\n        setAttribute(th, \"width\", width);\r\n        return width;\r\n    }\r\n}\r\n\r\nexport default AutosizeColumn;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport debounce from \"../utils/debounce.js\";\r\nimport {\r\n    addClass,\r\n    ce,\r\n    find,\r\n    findAll,\r\n    hasClass,\r\n    insertAfter,\r\n    removeAttribute,\r\n    removeClass,\r\n    setAttribute,\r\n} from \"../utils/shortcuts.js\";\r\n\r\nconst RESPONSIVE_CLASS = \"dg-responsive\";\r\n\r\nlet obsTo;\r\n\r\n/**\r\n * @param {Array<HTMLElement>} list\r\n * @returns {Array<HTMLElement>}\r\n */\r\nfunction sortByPriority(list) {\r\n    return list.sort((a, b) => {\r\n        const v1 = Number.parseInt(a.dataset.responsive) || 1;\r\n        const v2 = Number.parseInt(b.dataset.responsive) || 1;\r\n        return v2 - v1;\r\n    });\r\n}\r\n\r\n/**\r\n * @type {ResizeObserverCallback}\r\n */\r\n//@ts-ignore\r\nconst callback = debounce((entries) => {\r\n    for (const entry of entries) {\r\n        /**\r\n         * @type {import(\"../data-grid\").default}\r\n         */\r\n        // @ts-ignore\r\n        const grid = entry.target;\r\n        const table = grid.table;\r\n        if (grid.plugins.ResponsiveGrid.observerBlocked) {\r\n            return;\r\n        }\r\n        // check inlineSize (width) and not blockSize (height)\r\n        const contentBoxSize = Array.isArray(entry.contentBoxSize) ? entry.contentBoxSize[0] : entry.contentBoxSize;\r\n        const size = Number.parseInt(contentBoxSize.inlineSize);\r\n        const tableWidth = table.offsetWidth;\r\n        const realTableWidth = findAll(grid.headerRow, \"th\").reduce((result, th) => {\r\n            return result + th.offsetWidth;\r\n        }, 0);\r\n        const diff = (realTableWidth || tableWidth) - size - 1;\r\n        const minWidth = 50;\r\n        const prevAction = grid.plugins.ResponsiveGrid.prevAction;\r\n        // We have an array with the columns to show/hide are in order, most important first\r\n        const headerCols = sortByPriority(\r\n            findAll(grid.headerRow, \"th[field]\")\r\n                .reverse() // Order takes precedence if no priority is set\r\n                .filter((col) => {\r\n                    // Leave out unresponsive columns\r\n                    return col.dataset.responsive !== \"0\";\r\n                }),\r\n        );\r\n        let changed = false;\r\n\r\n        grid.log(`table is ${tableWidth}/${realTableWidth} and available size is ${size}. Diff: ${diff}`);\r\n\r\n        // The table is too big when diff has a high value, otherwise it will be like -1 or -2\r\n        if (diff > 0) {\r\n            if (prevAction === \"show\") {\r\n                return;\r\n            }\r\n            grid.plugins.ResponsiveGrid.prevAction = \"hide\";\r\n            let remaining = diff;\r\n            let cols = headerCols.filter((col) => {\r\n                return !col.hasAttribute(\"hidden\") && col.hasAttribute(\"data-responsive\");\r\n            });\r\n            if (cols.length === 0) {\r\n                cols = headerCols.filter((col) => {\r\n                    return !col.hasAttribute(\"hidden\");\r\n                });\r\n                // Always keep one column\r\n                if (cols.length === 1) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (const col of cols) {\r\n                if (remaining < 0) {\r\n                    continue;\r\n                }\r\n\r\n                const colWidth = col.offsetWidth;\r\n                const field = col.getAttribute(\"field\");\r\n                if (!field) {\r\n                    continue;\r\n                }\r\n                col.dataset.baseWidth = `${col.offsetWidth}`;\r\n\r\n                grid.hideColumn(field, false);\r\n                grid.setColProp(field, \"responsiveHidden\", true);\r\n                changed = true;\r\n\r\n                remaining -= colWidth;\r\n                remaining = Math.round(remaining);\r\n            }\r\n        } else {\r\n            if (prevAction === \"hide\") {\r\n                return;\r\n            }\r\n            grid.plugins.ResponsiveGrid.prevAction = \"show\";\r\n\r\n            const requiredWidth =\r\n                headerCols\r\n                    .filter((col) => {\r\n                        return !col.hasAttribute(\"hidden\");\r\n                    })\r\n                    .reduce((result, col) => {\r\n                        const width = col.dataset.minWidth ? Number.parseInt(col.dataset.minWidth) : col.offsetWidth;\r\n                        return result + width;\r\n                    }, 0) + minWidth; // Add an offset so that inserting column is smoother\r\n\r\n            // Compute available width to insert columns\r\n            let remaining = size - requiredWidth;\r\n            // Do we have any hidden column that we can restore ?\r\n            const filteredHeaderCols = headerCols\r\n                .slice()\r\n                .reverse() // Reverse the array to restore the columns in the proper order\r\n                .filter((col) => {\r\n                    return col.hasAttribute(\"hidden\");\r\n                });\r\n\r\n            for (const col of filteredHeaderCols) {\r\n                if (remaining < minWidth) {\r\n                    continue;\r\n                }\r\n                const colWidth = Number.parseInt(col.dataset.minWidth);\r\n\r\n                // We need to have enough space to restore it\r\n                if (colWidth > remaining) {\r\n                    remaining = -1; // break loop to keep restoring in order\r\n                    continue;\r\n                }\r\n\r\n                const field = col.getAttribute(\"field\");\r\n                if (!field) {\r\n                    continue;\r\n                }\r\n\r\n                grid.showColumn(field, false);\r\n                grid.setColProp(field, \"responsiveHidden\", false);\r\n                changed = true;\r\n\r\n                remaining -= colWidth;\r\n                remaining = Math.round(remaining);\r\n            }\r\n        }\r\n\r\n        // Check footer\r\n        const footer = find(grid.table, \"tfoot\");\r\n        const realFooterWidth = findAll(grid.table, \".dg-footer > div\").reduce((result, div) => {\r\n            return result + div.offsetWidth;\r\n        }, 0);\r\n        const availableFooterWidth = footer.offsetWidth - realFooterWidth;\r\n        if (realFooterWidth > size) {\r\n            addClass(footer, \"dg-footer-compact\");\r\n        } else if (availableFooterWidth > 250) {\r\n            removeClass(footer, \"dg-footer-compact\");\r\n        }\r\n        if (changed) {\r\n            grid.renderTable();\r\n        }\r\n        // Prevent resize loop\r\n        setTimeout(() => {\r\n            grid.plugins.ResponsiveGrid.prevAction = null;\r\n        }, 1000);\r\n        grid.table.style.visibility = \"visible\";\r\n    }\r\n}, 100);\r\nconst resizeObserver = new ResizeObserver(callback);\r\n\r\n/**\r\n * Responsive data grid\r\n */\r\nclass ResponsiveGrid extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n\r\n        this.observerBlocked = false;\r\n        this.prevAction = null;\r\n    }\r\n\r\n    connected() {\r\n        if (this.grid.options.responsive) {\r\n            this.observe();\r\n        }\r\n    }\r\n\r\n    disconnected() {\r\n        this.unobserve();\r\n    }\r\n\r\n    observe() {\r\n        if (!this.grid.options.responsive) {\r\n            return;\r\n        }\r\n        resizeObserver.observe(this.grid);\r\n        this.grid.style.display = \"block\"; // Otherwise resize doesn't happen\r\n        this.grid.style.overflowX = \"hidden\"; // Prevent scrollbars from appearing\r\n    }\r\n\r\n    unobserve() {\r\n        resizeObserver.unobserve(this.grid);\r\n        this.grid.style.display = \"unset\";\r\n        this.grid.style.overflowX = \"unset\";\r\n    }\r\n\r\n    blockObserver() {\r\n        this.observerBlocked = true;\r\n        if (obsTo) {\r\n            clearTimeout(obsTo);\r\n        }\r\n    }\r\n\r\n    unblockObserver() {\r\n        obsTo = setTimeout(() => {\r\n            this.observerBlocked = false;\r\n        }, 200); // more than debounce\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasHiddenColumns() {\r\n        let flag = false;\r\n\r\n        for (const col of this.grid.options.columns) {\r\n            if (col.responsiveHidden) {\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    colIndex() {\r\n        return this.grid.startColIndex() - 1;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createHeaderCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        const th = ce(\"th\", tr);\r\n        setAttribute(th, \"scope\", \"col\");\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        setAttribute(th, \"width\", \"40\");\r\n        th.classList.add(...[`${RESPONSIVE_CLASS}-toggle`, \"dg-not-resizable\", \"dg-not-sortable\"]);\r\n        th.tabIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createFilterCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        const th = ce(\"th\", tr);\r\n        setAttribute(th, \"role\", \"columnheader button\");\r\n        setAttribute(th, \"aria-colindex\", this.colIndex());\r\n        th.classList.add(`${RESPONSIVE_CLASS}-toggle`);\r\n        th.tabIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    createDataCol(tr) {\r\n        if (!this.grid.options.responsiveToggle) {\r\n            return;\r\n        }\r\n        // Create col\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell button\");\r\n        setAttribute(td, \"aria-colindex\", this.colIndex());\r\n        td.classList.add(`${RESPONSIVE_CLASS}-toggle`);\r\n\r\n        // Create icon\r\n        td.innerHTML = `<div class='dg-clickable-cell'><svg class='${RESPONSIVE_CLASS}-open' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\">\r\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n  <line y1=\"7\" x1=\"12\" y2=\"17\" x2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n</svg>\r\n<svg class='${RESPONSIVE_CLASS}-close' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" style=\"display:none\">\r\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\r\n</svg></div>`;\r\n        tr.appendChild(td);\r\n\r\n        td.addEventListener(\"click\", this);\r\n        td.addEventListener(\"mousedown\", this);\r\n    }\r\n\r\n    computeLabelWidth() {\r\n        let idealWidth = 0;\r\n        let consideredCol = 0;\r\n        while (idealWidth < 120) {\r\n            consideredCol++;\r\n            const hCol = find(this.grid, `.dg-head-columns th[aria-colindex=\"${consideredCol}\"]`);\r\n            if (hCol) {\r\n                idealWidth += hCol.offsetWidth;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return idealWidth;\r\n    }\r\n\r\n    /**\r\n     * @param {Event} ev\r\n     */\r\n    onmousedown(ev) {\r\n        // Avoid selection through double click\r\n        ev.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * @param {Event} ev\r\n     */\r\n    onclick(ev) {\r\n        // Prevent expandable\r\n        ev.stopPropagation();\r\n\r\n        // target is the element that triggered the event (e.g., the user clicked on)\r\n        // currentTarget is the element that the event listener is attached to.\r\n\r\n        /**\r\n         * @type {HTMLTableRowElement}\r\n         */\r\n        //@ts-ignore\r\n        const td = ev.currentTarget;\r\n        const tr = td.parentElement;\r\n        const open = find(td, `.${RESPONSIVE_CLASS}-open`);\r\n        const close = find(td, `.${RESPONSIVE_CLASS}-close`);\r\n\r\n        this.blockObserver();\r\n\r\n        const isExpanded = hasClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n        if (isExpanded) {\r\n            removeClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n            open.style.display = \"unset\";\r\n            close.style.display = \"none\";\r\n\r\n            // Move back rows and cleanup row\r\n            const childRow = tr.nextElementSibling;\r\n            const hiddenCols = findAll(childRow, `.${RESPONSIVE_CLASS}-hidden`);\r\n\r\n            for (const col of hiddenCols) {\r\n                // We don't really need to care where we insert them since we are going to redraw anyway\r\n                tr.appendChild(col);\r\n                setAttribute(col, \"hidden\");\r\n            }\r\n\r\n            childRow.parentElement.removeChild(childRow);\r\n        } else {\r\n            addClass(tr, `${RESPONSIVE_CLASS}-expanded`);\r\n            open.style.display = \"none\";\r\n            close.style.display = \"unset\";\r\n\r\n            // Create a child row and move rows into it\r\n            const childRow = ce(\"tr\");\r\n            insertAfter(childRow, tr);\r\n            addClass(childRow, `${RESPONSIVE_CLASS}-child-row`);\r\n\r\n            const childRowTd = ce(\"td\", childRow);\r\n            setAttribute(childRowTd, \"colspan\", this.grid.columnsLength(true));\r\n\r\n            const childTable = ce(\"table\", childRowTd);\r\n            addClass(childTable, `${RESPONSIVE_CLASS}-table`);\r\n\r\n            const hiddenCols = findAll(tr, `.${RESPONSIVE_CLASS}-hidden`);\r\n            const idealWidth = this.computeLabelWidth();\r\n\r\n            for (const col of hiddenCols) {\r\n                const childTableRow = ce(\"tr\", childTable);\r\n\r\n                // Add label\r\n                const label = col.dataset.name;\r\n                const labelCol = ce(\"th\", childTableRow);\r\n                // It looks much better when aligned with an actual col\r\n                labelCol.style.width = `${idealWidth}px`;\r\n                labelCol.innerHTML = label;\r\n\r\n                // Add actual row\r\n                childTableRow.appendChild(col);\r\n                removeAttribute(col, \"hidden\");\r\n            }\r\n        }\r\n\r\n        this.unblockObserver();\r\n    }\r\n}\r\n\r\nexport default ResponsiveGrid;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport interpolate from \"../utils/interpolate.js\";\r\nimport { dispatch, on, setAttribute } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Add action on rows\r\n */\r\nclass RowActions extends BasePlugin {\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasActions() {\r\n        return this.grid.options.actions.length > 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    makeActionHeader(tr) {\r\n        const actionsTh = document.createElement(\"th\");\r\n        setAttribute(actionsTh, \"role\", \"columnheader button\");\r\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\r\n        actionsTh.classList.add(...[\"dg-actions\", \"dg-not-sortable\", \"dg-not-resizable\", this.actionClass]);\r\n        actionsTh.tabIndex = 0;\r\n        tr.appendChild(actionsTh);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {HTMLTableRowElement} tr\r\n     */\r\n    makeActionFilter(tr) {\r\n        const actionsTh = document.createElement(\"th\");\r\n        actionsTh.setAttribute(\"role\", \"columnheader button\");\r\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\r\n        actionsTh.classList.add(...[\"dg-actions\", this.actionClass]);\r\n        actionsTh.tabIndex = 0;\r\n        tr.appendChild(actionsTh);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLTableRowElement} tr\r\n     * @param {Object} item\r\n     */\r\n    makeActionRow(tr, item) {\r\n        const labels = this.grid.labels;\r\n        const td = document.createElement(\"td\");\r\n        setAttribute(td, \"role\", \"gridcell\");\r\n        setAttribute(td, \"aria-colindex\", this.grid.columnsLength(true));\r\n        td.classList.add(...[\"dg-actions\", this.actionClass]);\r\n        td.tabIndex = 0;\r\n\r\n        // Add menu toggle\r\n        const actionsToggle = document.createElement(\"button\");\r\n        actionsToggle.classList.add(\"dg-actions-toggle\");\r\n        actionsToggle.innerHTML = \"\u2630\";\r\n        td.appendChild(actionsToggle);\r\n        on(actionsToggle, \"click\", (ev) => {\r\n            ev.stopPropagation();\r\n            ev.target.parentElement.classList.toggle(\"dg-actions-expand\");\r\n        });\r\n\r\n        for (const action of this.grid.options.actions) {\r\n            const button = document.createElement(\"button\");\r\n            if (action.html) {\r\n                button.innerHTML = action.html;\r\n            } else {\r\n                button.innerText = action.title ?? action.name;\r\n            }\r\n            if (action.title) {\r\n                button.title = action.title;\r\n            }\r\n            if (action.url) {\r\n                button.type = \"submit\";\r\n                button.formAction = interpolate(action.url, item);\r\n            }\r\n            if (action.class) {\r\n                button.classList.add(...action.class.split(\" \"));\r\n            }\r\n            const actionHandler = (ev) => {\r\n                ev.stopPropagation();\r\n                if (action.confirm) {\r\n                    const c = confirm(labels.areYouSure);\r\n                    if (!c) {\r\n                        ev.preventDefault();\r\n                        return;\r\n                    }\r\n                }\r\n                dispatch(this.grid, \"action\", {\r\n                    data: item,\r\n                    action: action.name,\r\n                });\r\n            };\r\n            button.addEventListener(\"click\", actionHandler);\r\n            td.appendChild(button);\r\n\r\n            // Row action\r\n            if (action.default) {\r\n                tr.classList.add(\"dg-actionable\");\r\n                tr.addEventListener(\"click\", actionHandler);\r\n            }\r\n        }\r\n\r\n        tr.appendChild(td);\r\n    }\r\n\r\n    get actionClass() {\r\n        if (this.grid.options.actions.length < 3 && !this.grid.options.collapseActions) {\r\n            return `dg-actions-${this.grid.options.actions.length}`;\r\n        }\r\n        return \"dg-actions-more\";\r\n    }\r\n}\r\n\r\nexport default RowActions;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { dispatch } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Make editable inputs in rows\r\n */\r\nclass EditableColumn extends BasePlugin {\r\n    /**\r\n     *\r\n     * @param {HTMLTableCellElement} td\r\n     * @param {import(\"../data-grid\").Column} column\r\n     * @param {Object} item\r\n     * @param {number} i\r\n     */\r\n    makeEditableInput(td, column, item, i) {\r\n        const gridId = this.grid.getAttribute(\"id\");\r\n        const input = document.createElement(\"input\");\r\n        input.type = column.editableType || \"text\";\r\n        if (input.type === \"email\") {\r\n            input.inputMode = \"email\";\r\n        }\r\n        if (input.type === \"decimal\") {\r\n            input.type = \"text\";\r\n            input.inputMode = \"decimal\";\r\n        }\r\n        input.autocomplete = \"off\";\r\n        input.spellcheck = false;\r\n        input.tabIndex = 0;\r\n        input.classList.add(\"dg-editable\");\r\n        input.name = `${gridId.replace(\"-\", \"_\")}[${i + 1}][${column.field}]`;\r\n        input.value = item[column.field];\r\n        input.dataset.field = column.field;\r\n\r\n        // Prevent row action\r\n        input.addEventListener(\"click\", (ev) => ev.stopPropagation());\r\n        // Enter validates edit\r\n        input.addEventListener(\"keypress\", (ev) => {\r\n            if (ev.type === \"keypress\") {\r\n                const key = ev.keyCode || ev.key;\r\n                if (key === 13 || key === \"Enter\") {\r\n                    input.blur();\r\n                    ev.preventDefault();\r\n                }\r\n            }\r\n        });\r\n        // Save on blur\r\n        input.addEventListener(\"blur\", () => {\r\n            // Only fire on update\r\n            if (input.value === item[input.dataset.field]) {\r\n                return;\r\n            }\r\n            // Update underlying data\r\n            item[input.dataset.field] = input.value;\r\n            // Notify\r\n            dispatch(this.grid, \"edit\", {\r\n                data: item,\r\n                value: input.value,\r\n            });\r\n        });\r\n        td.appendChild(input);\r\n    }\r\n}\r\n\r\nexport default EditableColumn;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { $ } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Adds an element for showing a spinning icon on grid loading.\r\n */\r\nclass SpinnerSupport extends BasePlugin {\n    connected() {\n        // Inserts spinner\r\n        if (this.grid.options.spinnerClass && this.grid.plugins.SpinnerSupport) {\r\n            this.add();\r\n        }\r\n    }\n\r\n    /**\r\n     * Adds a spinner element with its associated css styles.\r\n     */\r\n    add() {\r\n        const grid = this.grid;\r\n        const classes = grid.options.spinnerClass;\r\n        if (!classes) {\r\n            return;\r\n        }\r\n        const cls = classes\r\n            .split(\" \")\r\n            .map((e) => `.${e}`)\r\n            .join(\"\");\r\n\r\n        const template = `\r\n<style id=\"dg-styles\">\r\n  data-grid ${cls} { position: absolute; top: 37%; left: 47%; z-index: 999; }\r\n  data-grid:not(.dg-loading) ${cls} { display: none; }\r\n  data-grid:not(.dg-initialized).dg-loading ${cls} { top: 0; }\r\n  @media only screen and (max-width: 767px) {\r\n    data-grid[responsive] ${cls} { top: 8rem; left: 42%; }\r\n  }\r\n</style>\r\n`;\r\n        if (!$(\"#dg-styles\")) {\r\n            const styleParent = $(\"head\") ?? $(\"body\");\r\n            const position = /head/i.test(styleParent.tagName) ? \"beforeend\" : \"afterbegin\";\r\n            styleParent.insertAdjacentHTML(position, template);\r\n        }\r\n        !$(`i${cls}`, grid) && grid.insertAdjacentHTML(\"afterbegin\", `<i class=\"${classes}\"></i>`);\r\n    }\r\n}\r\n\r\nexport default SpinnerSupport;\r\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { findAll } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * @typedef GridState\r\n * @property {Object} meta\r\n * @property {Number} pages\r\n * @property {Number} page\r\n * @property {Number} perPage\r\n * @property {Object} filters\r\n * @property {Array} columns\r\n * @property {String} sort\r\n * @property {String} sortDir\r\n * @property {Number} scrollTo\r\n */\r\n\r\nclass SaveState extends BasePlugin {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this.cachedState = null;\r\n        this.isFilterSortSet = false;\r\n        this.isDataLoaded = false;\r\n        this.isScrolled = false;\r\n        this.log(\"Init\");\r\n    }\r\n\r\n    async connected() {\r\n        this.log(\"connected\");\r\n        const grid = this.grid;\r\n\r\n        this.log(grid.options);\n\r\n        if (!grid.options.saveState) {\r\n            this.log(\"disabled\");\r\n            return;\r\n        }\r\n\r\n        this.log(\"enabled\");\r\n\r\n        const cachedState = this._getState();\r\n        if (cachedState) {\n            const waitForColumns = async () => { // Use async/await to wait for columns to be available\n                if (!grid.options.server) return;\n                let timeout = 500, // Timeout (in millisecond) to wait for columns to be set\n                    start = Date.now(), colAbsent;\n                while ((colAbsent = !grid.options.columns?.length) && Date.now() - start < timeout) {\n                    await new Promise(resolve => requestAnimationFrame(resolve));\n                }\n                colAbsent && this.log(\"Timeout waiting for columns.\");\n            };\n            const restoreState = async () => { // Ensures columns are loaded before state restoration\n                await waitForColumns();\n\r\n                this.log(\"hide columns\");\r\n\r\n                for (const col of cachedState.columns) {\r\n                    if (col.hidden) {\r\n                        const hideCol = grid.options.columns.find((c) => c.field === col.field);\r\n                        hideCol.hidden = true;\r\n                    }\r\n                }\r\n\r\n                this.log(\"set: meta, pages\");\r\n                grid.options.perPage = cachedState.perPage;\r\n                if (grid.options.server) {\r\n                    grid.meta = cachedState.meta;\r\n                    grid.pages = cachedState.pages;\r\n                    grid.page = cachedState.page;\r\n                }\n            };\n            await restoreState();\n        }\r\n\r\n        this.cachedState = cachedState;\n        this.log(\"cachedState\", this.cachedState);\n\r\n        const dgLoadData = grid.loadData;\r\n        grid.loadData = function (...args) {\r\n            return dgLoadData.apply(this, args).finally(() => {\n                const saveState = this.plugins.SaveState;\r\n                saveState.log(\"loadData\", this.options.columns);\n\r\n                if (!grid.classList.contains(\"dg-initialized\")) {\r\n                    saveState.log(\"not init, loadData skipped\");\r\n                    return;\r\n                }\r\n\r\n                saveState.log(\"loadData finished, set param controls\", this.options.columns);\r\n\r\n                if (saveState.cachedState && !saveState.isFilterSortSet) {\r\n                    saveState.log(\"set sort and filters\");\r\n\r\n                    const sortableHeaders = findAll(grid, \"thead tr.dg-head-columns th[aria-sort]\");\r\n                    for (const el of sortableHeaders) {\r\n                        el.setAttribute(\"aria-sort\", \"none\");\r\n                    }\r\n\r\n                    grid.querySelector(`thead tr.dg-head-columns th[field='${saveState.cachedState.sort}']`)\n                        ?.setAttribute(\"aria-sort\", saveState.cachedState.sortDir);\r\n\r\n                    const filters = findAll(grid.filterRow, \"[id^=dg-filter]\");\r\n                    saveState.log(\"filters\", filters);\r\n\r\n                    for (const el of filters) {\r\n                        el.value = saveState?.cachedState?.filters?.[el.dataset.name] ?? \"\";\r\n                        saveState.log({ name: el.dataset.name, val: el.value, saveState });\r\n                    }\r\n                    saveState.isFilterSortSet = true;\r\n                }\r\n\r\n                /** @type {GridState} */\r\n                const newState = {\r\n                    meta: grid.meta,\r\n                    pages: grid.pages,\r\n                    page: grid.page,\r\n                    perPage: grid.options.perPage,\r\n                    filters: {},\r\n                    columns: grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden })),\r\n                    sort: grid.getSort(),\r\n                    sortDir: grid.getSortDir(),\r\n                    scrollTo: window.scrollY,\r\n                };\r\n\r\n                const filters = grid.getFilters();\r\n                saveState.log(\"filters\", filters);\r\n\r\n                for (const key of Object.keys(filters)) {\r\n                    newState.filters[key] = filters[key] ?? \"\";\r\n                    saveState.log({ key, val: filters[key], newState, filters });\r\n                }\r\n\r\n                saveState.log(\"store new state\", newState);\r\n                saveState._setState(newState);\r\n\r\n                if (!grid.options.server && saveState.cachedState && !saveState.isDataLoaded) {\r\n                    saveState.isDataLoaded = true;\r\n                    grid.filterData();\r\n                    grid.page = saveState.cachedState.page;\r\n                    grid.pageChanged();\r\n                    saveState.log(\"data loaded\");\r\n                }\r\n            });\r\n        };\r\n\r\n        const updateState = () => {\r\n            const saveState = grid.plugins.SaveState;\r\n            const state = saveState._getState();\r\n            if (!state) {\r\n                return;\r\n            }\r\n            state.columns = grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden }));\r\n            state.sort = grid.getSort();\r\n            state.sortDir = grid.getSortDir();\r\n            state.scrollTo = window.scrollY;\r\n            saveState._setState(state);\r\n        };\r\n\r\n        document.addEventListener(\"scrollend\", updateState);\r\n        grid.addEventListener(\"headerRendered\", updateState);\r\n\r\n        grid.addEventListener(\"bodyRendered\", (ev) => {\r\n            if (!grid.classList.contains(\"dg-initialized\") || grid.classList.contains(\"dg-loading\")) {\r\n                return;\r\n            }\r\n\r\n            if (!grid.options.server) {\r\n                updateState();\r\n            }\r\n\r\n            const saveState = grid.plugins.SaveState;\r\n            if (!saveState.cachedState || !saveState.isFilterSortSet) {\r\n                return;\r\n            }\r\n\r\n            if (!saveState.isDataLoaded) {\r\n                saveState.isDataLoaded = true;\n                grid.reload();\r\n                saveState.log(\"***grid reloaded\");\r\n            } else if (!saveState.isScrolled) {\r\n                saveState.isScrolled = true;\r\n                window.scrollTo({ top: saveState.cachedState.scrollTo, left: 0, behavior: \"instant\" });\r\n            }\r\n        });\r\n    }\r\n\r\n    log(...data) {\r\n        this.grid.log(\"[Save-State] \", ...data);\r\n    }\r\n\r\n    /**\r\n     * @returns {GridState}\r\n     */\r\n    _getState() {\r\n        let state;\r\n        try {\r\n            state = JSON.parse(sessionStorage.getItem(`gridSaveState_${this.grid.id}`));\r\n        } catch (_) {}\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * @param {GridState} state\r\n     */\r\n    _setState(state) {\r\n        sessionStorage.setItem(`gridSaveState_${this.grid.id}`, JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default SaveState;\r\n", "/**\r\n * Data Grid custom element\r\n * https://github.com/lekoala/data-grid/\r\n * @license MIT\r\n */\r\n\r\nimport DataGrid from \"./src/data-grid.js\";\r\n// Optional plugins\r\nimport ColumnResizer from \"./src/plugins/column-resizer.js\";\r\nimport ContextMenu from \"./src/plugins/context-menu.js\";\r\nimport DraggableHeaders from \"./src/plugins/draggable-headers.js\";\r\nimport TouchSupport from \"./src/plugins/touch-support.js\";\r\nimport SelectableRows from \"./src/plugins/selectable-rows.js\";\r\nimport FixedHeight from \"./src/plugins/fixed-height.js\";\r\nimport AutosizeColumn from \"./src/plugins/autosize-column.js\";\r\nimport ResponsiveGrid from \"./src/plugins/responsive-grid.js\";\r\nimport RowActions from \"./src/plugins/row-actions.js\";\r\nimport EditableColumn from \"./src/plugins/editable-column.js\";\r\nimport SpinnerSupport from \"./src/plugins/spinner-support.js\";\r\nimport SaveState from \"./src/plugins/save-state.js\";\r\n\r\n// Using shorthand property names\r\n// This make them reserved and keys will be preserved\r\n// Actual class names are renamed\r\nDataGrid.registerPlugins({\r\n  ColumnResizer,\r\n  ContextMenu,\r\n  DraggableHeaders,\r\n  TouchSupport,\r\n  SelectableRows,\r\n  FixedHeight,\r\n  AutosizeColumn,\r\n  ResponsiveGrid,\r\n  RowActions,\r\n  EditableColumn,\r\n  SpinnerSupport,\r\n  SaveState\r\n});\r\n\r\n// Prevent errors if included multiple times\r\nif (!customElements.get(\"data-grid\")) {\r\n  customElements.define(\"data-grid\", DataGrid);\r\n}\r\n\r\nexport default DataGrid;\r\n\r\nconst global = typeof globalThis !== \"undefined\" ? globalThis : self;\r\nglobal.DataGrid = DataGrid;"],
  "mappings": "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",
  "names": ["camelize", "str", "m", "chr", "normalizeData", "v", "val", "supportedPassiveTypes", "passiveOpts", "type", "getAttribute", "el", "name", "hasAttribute", "setAttribute", "v", "check", "removeAttribute", "on", "listener", "off", "dispatch", "el", "name", "data", "bubbles", "opts", "hasClass", "addClass", "removeClass", "toggleClass", "$", "selector", "base", "$$", "find", "findAll", "ce", "tagName", "parent", "el", "insertAfter", "newNode", "existingNode", "BaseElement", "options", "opt", "v", "setAttribute", "jsonConfig", "data", "key", "normalizeData", "getAttribute", "event", "template", "dispatch", "attributeName", "oldValue", "newValue", "isOption", "transformer", "attr", "camelize", "base_element_default", "addSelectOption", "el", "value", "label", "checked", "opt", "appendParamsToUrl", "url", "params", "key", "k", "convertArray", "v", "bv", "elementOffset", "el", "rect", "scrollLeft", "scrollTop", "interpolate", "str", "data", "$1", "$2", "canvas", "getTextWidth", "text", "el", "withPadding", "styles", "fontWeight", "fontSize", "fontFamily", "padding", "paddingLeft", "paddingRight", "context", "metrics", "randstr", "prefix", "debounce", "handler", "timeout", "timer", "args", "plugins", "labels", "applyColumnDefinition", "el", "column", "setAttribute", "addClass", "DataGrid", "_DataGrid", "base_element_default", "randstr", "pluginName", "pluginClass", "attr", "camelize", "v", "#setNoData", "tbody", "list", "plugin", "columns", "cols", "key", "col", "item", "convertArray", "$", "val", "initOnly", "pv", "updatePage", "addSelectOption", "field", "found", "prop", "c", "render", "dispatch", "start", "visibleOnly", "len", "tr", "find", "row", "removeAttribute", "headers", "findAll", "th", "fieldName", "value", "k", "i", "keys", "force", "data", "metaKey", "dataKey", "callbackOrUrl", "needRender", "flagEmpty", "resolve", "response", "err", "event", "filters", "inputs", "input", "name", "baseCol", "haveClasses", "sort", "stack", "itemA", "itemB", "a", "b", "valA", "valB", "columnName", "sortDir", "dir", "reject", "base", "url", "params", "appendParamsToUrl", "newError", "error", "sortedColumn", "thead", "tfoot", "td", "availableWidth", "colMaxWidth", "idx", "ce", "sampleTh", "totalWidth", "colIdx", "computedWidth", "getTextWidth", "w", "colAvailableWidth", "visibleCols", "lastCol", "scrollbarWidth", "diff", "thWithWidth", "hasClass", "actualWidth", "minWidth", "newWidth", "rowsWithSort", "sortableRow", "relatedTh", "filter", "filteredRows", "eventName", "eventHandler", "debounce", "e", "isKeyPressFilter", "isSelect", "uniqueValues", "opt", "on", "ev", "toggleClass", "tv", "interpolate", "prev", "total", "p", "bodyRows", "index", "high", "low", "getAttribute", "data_grid_default", "BasePlugin", "grid", "event", "base_plugin_default", "ColumnResizer", "base_plugin_default", "grid", "resizeLabel", "table", "cols", "findAll", "col", "hasClass", "resizer", "addClass", "startX", "startW", "remainingSpace", "max", "mouseMoveHandler", "e", "newWidth", "setAttribute", "mouseUpHandler", "removeClass", "off", "dispatch", "getAttribute", "on", "target", "visibleCols", "columnIndex", "column", "removeAttribute", "elementOffset", "j", "column_resizer_default", "getParentElement", "el", "type", "prop", "parent", "ContextMenu", "base_plugin_default", "off", "grid", "on", "e", "t", "field", "target", "getParentElement", "menu", "rect", "x", "y", "removeAttribute", "documentClickHandler", "setAttribute", "col", "li", "label", "checkbox", "text", "context_menu_default", "DraggableHeaders", "base_plugin_default", "th", "grid", "on", "e", "t", "target", "getParentElement", "index", "targetIndex", "offset", "tmp", "swapNodes", "selector", "el1", "rowIndex", "el2", "setAttribute", "newNode", "findAll", "c", "getAttribute", "dispatch", "draggable_headers_default", "TouchSupport", "base_plugin_default", "grid", "e", "xDiff", "yDiff", "touch_support_default", "SELECTABLE_CLASS", "SELECT_ALL_CLASS", "CHECKBOX_CLASS", "SelectableRows", "base_plugin_default", "#cbSelector", "#inputSelector", "keys", "grid", "selectedData", "inputs", "findAll", "checkbox", "idx", "item", "k", "tbody", "input", "tr", "th", "setAttribute", "label", "td", "e", "el", "unchecked", "$$", "r", "hasClass", "cb", "totalCheckboxes", "dispatch", "selectable_rows_default", "FixedHeight", "base_plugin_default", "grid", "tbody", "tr", "setAttribute", "fakeRow", "max", "visibleRows", "fakeHeight", "fixed_height_default", "AutosizeColumn", "base_plugin_default", "th", "column", "min", "max", "grid", "hasAttribute", "getAttribute", "firstVal", "lastVal", "v", "v2", "width", "getTextWidth", "setAttribute", "autosize_column_default", "RESPONSIVE_CLASS", "obsTo", "sortByPriority", "list", "a", "b", "v1", "callback", "debounce", "entries", "entry", "grid", "table", "contentBoxSize", "size", "tableWidth", "realTableWidth", "findAll", "result", "th", "diff", "minWidth", "prevAction", "headerCols", "col", "changed", "remaining", "cols", "colWidth", "field", "requiredWidth", "width", "filteredHeaderCols", "footer", "find", "realFooterWidth", "div", "availableFooterWidth", "addClass", "removeClass", "resizeObserver", "ResponsiveGrid", "base_plugin_default", "flag", "tr", "ce", "setAttribute", "td", "idealWidth", "consideredCol", "hCol", "ev", "open", "close", "hasClass", "childRow", "hiddenCols", "insertAfter", "childRowTd", "childTable", "childTableRow", "label", "labelCol", "removeAttribute", "responsive_grid_default", "RowActions", "base_plugin_default", "tr", "actionsTh", "setAttribute", "item", "labels", "td", "actionsToggle", "on", "ev", "action", "button", "interpolate", "actionHandler", "dispatch", "row_actions_default", "EditableColumn", "base_plugin_default", "td", "column", "item", "i", "gridId", "input", "ev", "key", "dispatch", "editable_column_default", "SpinnerSupport", "base_plugin_default", "grid", "classes", "cls", "e", "template", "$", "styleParent", "position", "spinner_support_default", "SaveState", "base_plugin_default", "grid", "cachedState", "waitForColumns", "timeout", "start", "colAbsent", "resolve", "col", "hideCol", "c", "dgLoadData", "args", "saveState", "sortableHeaders", "findAll", "el", "filters", "newState", "key", "updateState", "state", "ev", "data", "save_state_default", "data_grid_default", "column_resizer_default", "context_menu_default", "draggable_headers_default", "touch_support_default", "selectable_rows_default", "fixed_height_default", "autosize_column_default", "responsive_grid_default", "row_actions_default", "editable_column_default", "spinner_support_default", "save_state_default", "global"]
}
